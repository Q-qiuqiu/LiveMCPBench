[
    {
        "name": "Excel MCP Server",
        "organization": "negokaz",
        "description": "A Model Context Protocol (MCP) server that reads and writes MS Excel data.",
        "web": "https://github.com/negokaz/excel-mcp-server",
        "config": {
            "mcpServers": {
                "excel": {
                    "command": "npx",
                    "args": [
                        "--yes",
                        "@negokaz/excel-mcp-server"
                    ],
                    "env": {
                        "EXCEL_MCP_PAGING_CELLS_LIMIT": "4000"
                    }
                }
            }
        },
        "category": "File Access",
        "tools": {
            "excel": {
                "server_name": "excel",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "excel_copy_sheet",
                        "description": "Copy existing sheet to a new sheet",
                        "inputSchema": {
                            "properties": {
                                "dstSheetName": {
                                    "description": "Sheet name to be copied",
                                    "type": "string"
                                },
                                "fileAbsolutePath": {
                                    "description": "Absolute path to the Excel file",
                                    "type": "string"
                                },
                                "srcSheetName": {
                                    "description": "Source sheet name in the Excel file",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "fileAbsolutePath",
                                "srcSheetName",
                                "dstSheetName"
                            ],
                            "type": "object"
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": false,
                            "destructiveHint": true,
                            "idempotentHint": false,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "excel_create_table",
                        "description": "Create a table in the Excel sheet",
                        "inputSchema": {
                            "properties": {
                                "fileAbsolutePath": {
                                    "description": "Absolute path to the Excel file",
                                    "type": "string"
                                },
                                "range": {
                                    "description": "Range to be a table (e.g., \"A1:C10\")",
                                    "type": "string"
                                },
                                "sheetName": {
                                    "description": "Sheet name where the table is created",
                                    "type": "string"
                                },
                                "tableName": {
                                    "description": "Table name to be created",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "fileAbsolutePath",
                                "sheetName",
                                "tableName"
                            ],
                            "type": "object"
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": false,
                            "destructiveHint": true,
                            "idempotentHint": false,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "excel_describe_sheets",
                        "description": "List all sheet information of specified Excel file",
                        "inputSchema": {
                            "properties": {
                                "fileAbsolutePath": {
                                    "description": "Absolute path to the Excel file",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "fileAbsolutePath"
                            ],
                            "type": "object"
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": false,
                            "destructiveHint": true,
                            "idempotentHint": false,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "excel_format_range",
                        "description": "Format cells in the Excel sheet with style information",
                        "inputSchema": {
                            "properties": {
                                "fileAbsolutePath": {
                                    "description": "Absolute path to the Excel file",
                                    "type": "string"
                                },
                                "range": {
                                    "description": "Range of cells in the Excel sheet (e.g., \"A1:C3\")",
                                    "type": "string"
                                },
                                "sheetName": {
                                    "description": "Sheet name in the Excel file",
                                    "type": "string"
                                },
                                "styles": {
                                    "description": "2D array of style objects for each cell. If a cell does not change style, use null. The number of items of the array must match the range size.",
                                    "items": {
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "description": "Style object for the cell",
                                                    "properties": {
                                                        "border": {
                                                            "items": {
                                                                "properties": {
                                                                    "color": {
                                                                        "pattern": "^#[0-9A-Fa-f]{6}$",
                                                                        "type": "string"
                                                                    },
                                                                    "style": {
                                                                        "enum": [
                                                                            "none",
                                                                            "continuous",
                                                                            "dash",
                                                                            "dot",
                                                                            "double",
                                                                            "dashDot",
                                                                            "dashDotDot",
                                                                            "slantDashDot",
                                                                            "mediumDashDot",
                                                                            "mediumDashDotDot"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "enum": [
                                                                            "left",
                                                                            "right",
                                                                            "top",
                                                                            "bottom",
                                                                            "diagonalDown",
                                                                            "diagonalUp"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "type"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "decimalPlaces": {
                                                            "maximum": 30,
                                                            "minimum": 0,
                                                            "type": "integer"
                                                        },
                                                        "fill": {
                                                            "properties": {
                                                                "color": {
                                                                    "items": {
                                                                        "pattern": "^#[0-9A-Fa-f]{6}$",
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "pattern": {
                                                                    "enum": [
                                                                        "none",
                                                                        "solid",
                                                                        "mediumGray",
                                                                        "darkGray",
                                                                        "lightGray",
                                                                        "darkHorizontal",
                                                                        "darkVertical",
                                                                        "darkDown",
                                                                        "darkUp",
                                                                        "darkGrid",
                                                                        "darkTrellis",
                                                                        "lightHorizontal",
                                                                        "lightVertical",
                                                                        "lightDown",
                                                                        "lightUp",
                                                                        "lightGrid",
                                                                        "lightTrellis",
                                                                        "gray125",
                                                                        "gray0625"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "shading": {
                                                                    "enum": [
                                                                        "horizontal",
                                                                        "vertical",
                                                                        "diagonalDown",
                                                                        "diagonalUp",
                                                                        "fromCenter",
                                                                        "fromCorner"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "enum": [
                                                                        "gradient",
                                                                        "pattern"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "type",
                                                                "pattern",
                                                                "color"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "font": {
                                                            "properties": {
                                                                "bold": {
                                                                    "type": "boolean"
                                                                },
                                                                "color": {
                                                                    "pattern": "^#[0-9A-Fa-f]{6}$",
                                                                    "type": "string"
                                                                },
                                                                "italic": {
                                                                    "type": "boolean"
                                                                },
                                                                "size": {
                                                                    "maximum": 409,
                                                                    "minimum": 1,
                                                                    "type": "number"
                                                                },
                                                                "strike": {
                                                                    "type": "boolean"
                                                                },
                                                                "underline": {
                                                                    "enum": [
                                                                        "none",
                                                                        "single",
                                                                        "double",
                                                                        "singleAccounting",
                                                                        "doubleAccounting"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "vertAlign": {
                                                                    "enum": [
                                                                        "baseline",
                                                                        "superscript",
                                                                        "subscript"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "numFmt": {
                                                            "description": "Custom number format string",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "description": "No style applied to this cell",
                                                    "type": "null"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "fileAbsolutePath",
                                "sheetName",
                                "range",
                                "styles"
                            ],
                            "type": "object"
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": false,
                            "destructiveHint": true,
                            "idempotentHint": false,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "excel_read_sheet",
                        "description": "Read values from Excel sheet with pagination.",
                        "inputSchema": {
                            "properties": {
                                "fileAbsolutePath": {
                                    "description": "Absolute path to the Excel file",
                                    "type": "string"
                                },
                                "range": {
                                    "description": "Range of cells to read in the Excel sheet (e.g., \"A1:C10\"). [default: first paging range]",
                                    "type": "string"
                                },
                                "sheetName": {
                                    "description": "Sheet name in the Excel file",
                                    "type": "string"
                                },
                                "showFormula": {
                                    "description": "Show formula instead of value",
                                    "type": "boolean"
                                },
                                "showStyle": {
                                    "description": "Show style information for cells",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "fileAbsolutePath",
                                "sheetName"
                            ],
                            "type": "object"
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": false,
                            "destructiveHint": true,
                            "idempotentHint": false,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "excel_write_to_sheet",
                        "description": "Write values to the Excel sheet",
                        "inputSchema": {
                            "properties": {
                                "fileAbsolutePath": {
                                    "description": "Absolute path to the Excel file",
                                    "type": "string"
                                },
                                "newSheet": {
                                    "description": "Create a new sheet if true, otherwise write to the existing sheet",
                                    "type": "boolean"
                                },
                                "range": {
                                    "description": "Range of cells in the Excel sheet (e.g., \"A1:C10\")",
                                    "type": "string"
                                },
                                "sheetName": {
                                    "description": "Sheet name in the Excel file",
                                    "type": "string"
                                },
                                "values": {
                                    "description": "Values to write to the Excel sheet. If the value is a formula, it should start with \"=\"",
                                    "items": {
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "number"
                                                },
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "fileAbsolutePath",
                                "sheetName",
                                "newSheet",
                                "range",
                                "values"
                            ],
                            "type": "object"
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": false,
                            "destructiveHint": true,
                            "idempotentHint": false,
                            "openWorldHint": true
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP NPX Fetch",
        "organization": "tokenizin-agency",
        "description": "A powerful MCP server for fetching and transforming web content into various formats (HTML, JSON, Markdown, Plain Text) with ease.",
        "web": "https://github.com/tokenizin-agency/mcp-npx-fetch",
        "config": {
            "mcpServers": {
                "npx_fetch": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@tokenizin/mcp-npx-fetch"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "npx_fetch": {
                "server_name": "npx_fetch",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "fetch_html",
                        "description": "Fetch a website and return the content as HTML",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL of the website to fetch"
                                },
                                "headers": {
                                    "type": "object",
                                    "description": "Optional headers to include in the request"
                                }
                            },
                            "required": [
                                "url"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "fetch_markdown",
                        "description": "Fetch a website and return the content as Markdown",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL of the website to fetch"
                                },
                                "headers": {
                                    "type": "object",
                                    "description": "Optional headers to include in the request"
                                }
                            },
                            "required": [
                                "url"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "fetch_txt",
                        "description": "Fetch a website, return the content as plain text (no HTML)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL of the website to fetch"
                                },
                                "headers": {
                                    "type": "object",
                                    "description": "Optional headers to include in the request"
                                }
                            },
                            "required": [
                                "url"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "fetch_json",
                        "description": "Fetch a JSON file from a URL",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL of the JSON to fetch"
                                },
                                "headers": {
                                    "type": "object",
                                    "description": "Optional headers to include in the request"
                                }
                            },
                            "required": [
                                "url"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Whois MCP",
        "organization": "bharathvaj-ganesan",
        "description": "Model Context Protocol server for whois lookups.",
        "web": "https://github.com/bharathvaj-ganesan/whois-mcp",
        "config": {
            "mcpServers": {
                "whois": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@bharathvaj/whois-mcp@latest"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "whois": {
                "server_name": "whois",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "whois_domain",
                        "description": "Looksup whois information about the domain",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "domain": {
                                    "type": "string",
                                    "minLength": 1
                                }
                            },
                            "required": [
                                "domain"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "whois_tld",
                        "description": "Looksup whois information about the Top Level Domain (TLD)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "tld": {
                                    "type": "string",
                                    "minLength": 1
                                }
                            },
                            "required": [
                                "tld"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "whois_ip",
                        "description": "Looksup whois information about the IP",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "ip": {
                                    "type": "string",
                                    "anyOf": [
                                        {
                                            "format": "ipv4"
                                        },
                                        {
                                            "format": "ipv6"
                                        }
                                    ]
                                }
                            },
                            "required": [
                                "ip"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "whois_as",
                        "description": "Looksup whois information about the Autonomous System Number (ASN)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "asn": {
                                    "type": "string",
                                    "pattern": "^AS\\d+$"
                                }
                            },
                            "required": [
                                "asn"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Exchange Rate MCP Server",
        "description": "This is a Model Context Protocol (MCP) server that provides access to exchange rate data from the Norges Bank API.",
        "web": "https://github.com/karashiiro/exchange-rate-mcp",
        "config": {
            "mcpServers": {
                "exchange-rate-mcp": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@karashiiro/exchange-rate-mcp"
                    ]
                }
            }
        },
        "category": "Finance",
        "tools": {
            "exchange-rate-mcp": {
                "server_name": "exchange-rate-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "exchange_rate",
                        "description": "Retrieves exchange rates using Norges Bank's API. Returns rate information including the base currency, target currency, date, and conversion rate.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "baseCurrency": {
                                    "type": "string",
                                    "description": "The base currency code (e.g., NOK, USD)"
                                },
                                "targetCurrency": {
                                    "type": "string",
                                    "description": "The target currency code (e.g., EUR, USD)"
                                },
                                "date": {
                                    "type": "string",
                                    "description": "Optional date in YYYY-MM-DD format. Defaults to latest available rate."
                                }
                            },
                            "required": [
                                "baseCurrency",
                                "targetCurrency"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "NPM Sentinel MCP",
        "description": "A powerful Model Context Protocol (MCP) server that revolutionizes NPM package analysis through AI. Built to integrate with Claude and Anthropic AI, it provides real-time intelligence on package security, dependencies, and performance. This MCP server delivers instant insights and smart analysis to safeguard and optimize your npm ecosystem, making package management decisions faster and safer for modern development workflows.",
        "web": "https://github.com/nekzus/npm-sentinel-mcp",
        "config": {
            "mcpServers": {
                "npm-sentinel-mcp": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@nekzus/mcp-server@latest"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "npm-sentinel-mcp": {
                "server_name": "npm-sentinel-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "npmVersions",
                        "description": "Get all available versions of an NPM package",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to get versions for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Get All Package Versions",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmLatest",
                        "description": "Get the latest version and changelog of an NPM package",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to get latest versions for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Get Latest Package Information",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmDeps",
                        "description": "Analyze dependencies and devDependencies of an NPM package",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to analyze dependencies for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Get Package Dependencies",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmTypes",
                        "description": "Check TypeScript types availability and version for a package",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to check types for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Check TypeScript Type Availability",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmSize",
                        "description": "Get package size information including dependencies and bundle size",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to get size information for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Get Package Size (Bundlephobia)",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmVulnerabilities",
                        "description": "Check for known vulnerabilities in packages",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to check for vulnerabilities"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Check Package Vulnerabilities (OSV.dev)",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": false,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmTrends",
                        "description": "Get download trends and popularity metrics for packages",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to get trends for"
                                },
                                "period": {
                                    "type": "string",
                                    "enum": [
                                        "last-week",
                                        "last-month",
                                        "last-year"
                                    ],
                                    "description": "Time period for trends. Options: \"last-week\", \"last-month\", \"last-year\"",
                                    "default": "last-month"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Get NPM Package Download Trends",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmCompare",
                        "description": "Compare multiple NPM packages based on various metrics",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to compare"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Compare NPM Packages",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmMaintainers",
                        "description": "Get maintainers information for NPM packages",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to get maintainers for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Get NPM Package Maintainers",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmScore",
                        "description": "Get consolidated package score based on quality, maintenance, and popularity metrics",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to get scores for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Get NPM Package Score (NPMS.io)",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmPackageReadme",
                        "description": "Get the README content for NPM packages",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to get READMEs for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Get NPM Package README",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmSearch",
                        "description": "Search for NPM packages with optional limit",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "Search query for packages"
                                },
                                "limit": {
                                    "type": "number",
                                    "minimum": 1,
                                    "maximum": 50,
                                    "description": "Maximum number of results to return (default: 10)"
                                }
                            },
                            "required": [
                                "query"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Search NPM Packages",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": false,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmLicenseCompatibility",
                        "description": "Check license compatibility between multiple packages",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "minItems": 1,
                                    "description": "List of package names to check for license compatibility"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Check NPM License Compatibility",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmRepoStats",
                        "description": "Get repository statistics for NPM packages",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to get repository stats for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Get NPM Package Repository Stats (GitHub)",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmDeprecated",
                        "description": "Check if packages are deprecated",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to check for deprecation"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Check NPM Package Deprecation Status",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmChangelogAnalysis",
                        "description": "Analyze changelog and release history of packages",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to analyze changelogs for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Analyze NPM Package Changelog (GitHub)",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmAlternatives",
                        "description": "Find alternative packages with similar functionality",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to find alternatives for"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Find NPM Package Alternatives",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": false,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmQuality",
                        "description": "Analyze package quality metrics",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to analyze"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Analyze NPM Package Quality (NPMS.io)",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "npmMaintenance",
                        "description": "Analyze package maintenance metrics",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of package names to analyze"
                                }
                            },
                            "required": [
                                "packages"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": {
                            "title": "Analyze NPM Package Maintenance (NPMS.io)",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": true,
                            "openWorldHint": true
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "PDF Reader MCP Server",
        "organization": "sylphxltd",
        "description": "Empower your AI agents (like Cline) with the ability to securely read and extract information (text, metadata, page count) from PDF files within your project context using a single, flexible tool.",
        "web": "https://github.com/sylphxltd/pdf-reader-mcp",
        "config": {
            "mcpServers": {
                "pdf-reader-mcp": {
                    "command": "npx",
                    "args": [
                        "@sylphlab/pdf-reader-mcp"
                    ],
                    "name": "PDF Reader (npx)"
                }
            }
        },
        "category": "File Access",
        "tools": {
            "pdf-reader-mcp": {
                "server_name": "pdf-reader-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "read_pdf",
                        "description": "Reads content/metadata from one or more PDFs (local/URL). Each source can specify pages to extract.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "sources": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "minLength": 1,
                                                "description": "Relative path to the local PDF file."
                                            },
                                            "url": {
                                                "type": "string",
                                                "format": "uri",
                                                "description": "URL of the PDF file."
                                            },
                                            "pages": {
                                                "anyOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "integer",
                                                            "exclusiveMinimum": true,
                                                            "minimum": 0
                                                        },
                                                        "minItems": 1
                                                    },
                                                    {
                                                        "type": "string",
                                                        "minLength": 1
                                                    }
                                                ],
                                                "description": "Extract text only from specific pages (1-based) or ranges for *this specific source*. If provided, 'include_full_text' for the entire request is ignored for this source."
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "minItems": 1,
                                    "description": "An array of PDF sources to process, each can optionally specify pages."
                                },
                                "include_full_text": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Include the full text content of each PDF (only if 'pages' is not specified for that source)."
                                },
                                "include_metadata": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "Include metadata and info objects for each PDF."
                                },
                                "include_page_count": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "Include the total number of pages for each PDF."
                                }
                            },
                            "required": [
                                "sources"
                            ],
                            "additionalProperties": false
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "duckduckgo-search MCP Server",
        "description": "A Model Context Protocol server for DuckDuckGo Search",
        "web": "https://github.com/zhsama/duckduckgo-mcp-server",
        "config": {
            "mcpServers": {
                "duckduckgo-search": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "duckduckgo-mcp-server"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "duckduckgo-search": {
                "server_name": "duckduckgo-search",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "duckduckgo_web_search",
                        "description": "Performs a web search using the DuckDuckGo, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports content filtering and region-specific searches. Maximum 20 results per request.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "Search query (max 400 chars)",
                                    "maxLength": 400
                                },
                                "count": {
                                    "type": "number",
                                    "description": "Number of results (1-20, default 10)",
                                    "minimum": 1,
                                    "maximum": 20,
                                    "default": 10
                                },
                                "safeSearch": {
                                    "type": "string",
                                    "description": "SafeSearch level (strict, moderate, off)",
                                    "enum": [
                                        "strict",
                                        "moderate",
                                        "off"
                                    ],
                                    "default": "moderate"
                                }
                            },
                            "required": [
                                "query"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "OP.GG MCP Server",
        "description": "This MCP server provides AI agents with access to OP.GG data through a standardized interface. It offers a simple way to connect to our remote server (https://mcp-api.op.gg/mcp), allowing for easy installation and immediate access to OP.GG data in a format that's easily consumable by AI models and agent frameworks.",
        "web": "https://github.com/opgginc/opgg-mcp",
        "config": {
            "mcpServers": {
                "opgg-mcp": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "supergateway",
                        "--streamableHttp",
                        "https://mcp-api.op.gg/mcp"
                    ]
                }
            }
        },
        "category": "Entertainment",
        "tools": {
            "opgg-mcp": {
                "server_name": "opgg-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "lol-champion-leader-board",
                        "description": "Retrieves the leaderboard of master players who play a specific champion well. You can also look up the high ranked players, like the high winrate 5 players in #1-#30, to retrieve their champion performance or recent match history to teach how to play the champions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "region": {
                                    "type": "string",
                                    "enum": [
                                        "KR",
                                        "BR",
                                        "EUNE",
                                        "EUW",
                                        "LAN",
                                        "LAS",
                                        "NA",
                                        "OCE",
                                        "RU",
                                        "TR",
                                        "JP",
                                        "PH",
                                        "SG",
                                        "TH",
                                        "TW",
                                        "VN",
                                        "ME",
                                        "SEA"
                                    ],
                                    "description": "Regions in the game League of Legends."
                                },
                                "champion": {
                                    "type": "string",
                                    "enum": [
                                        "ANNIE",
                                        "OLAF",
                                        "GALIO",
                                        "TWISTED_FATE",
                                        "XIN_ZHAO",
                                        "URGOT",
                                        "LEBLANC",
                                        "VLADIMIR",
                                        "FIDDLESTICKS",
                                        "KAYLE",
                                        "MASTER_YI",
                                        "ALISTAR",
                                        "RYZE",
                                        "SION",
                                        "SIVIR",
                                        "SORAKA",
                                        "TEEMO",
                                        "TRISTANA",
                                        "WARWICK",
                                        "NUNU_WILLUMP",
                                        "MISS_FORTUNE",
                                        "ASHE",
                                        "TRYNDAMERE",
                                        "JAX",
                                        "MORGANA",
                                        "ZILEAN",
                                        "SINGED",
                                        "EVELYNN",
                                        "TWITCH",
                                        "KARTHUS",
                                        "CHOGATH",
                                        "AMUMU",
                                        "RAMMUS",
                                        "ANIVIA",
                                        "SHACO",
                                        "DR_MUNDO",
                                        "SONA",
                                        "KASSADIN",
                                        "IRELIA",
                                        "JANNA",
                                        "GANGPLANK",
                                        "CORKI",
                                        "KARMA",
                                        "TARIC",
                                        "VEIGAR",
                                        "TRUNDLE",
                                        "SWAIN",
                                        "CAITLYN",
                                        "BLITZCRANK",
                                        "MALPHITE",
                                        "KATARINA",
                                        "NOCTURNE",
                                        "MAOKAI",
                                        "RENEKTON",
                                        "JARVAN_IV",
                                        "ELISE",
                                        "ORIANNA",
                                        "WUKONG",
                                        "BRAND",
                                        "LEE_SIN",
                                        "VAYNE",
                                        "RUMBLE",
                                        "CASSIOPEIA",
                                        "SKARNER",
                                        "HEIMERDINGER",
                                        "NASUS",
                                        "NIDALEE",
                                        "UDYR",
                                        "POPPY",
                                        "GRAGAS",
                                        "PANTHEON",
                                        "EZREAL",
                                        "MORDEKAISER",
                                        "YORICK",
                                        "AKALI",
                                        "KENNEN",
                                        "GAREN",
                                        "LEONA",
                                        "MALZAHAR",
                                        "TALON",
                                        "RIVEN",
                                        "KOGMAW",
                                        "SHEN",
                                        "LUX",
                                        "XERATH",
                                        "SHYVANA",
                                        "AHRI",
                                        "GRAVES",
                                        "FIZZ",
                                        "VOLIBEAR",
                                        "RENGAR",
                                        "VARUS",
                                        "NAUTILUS",
                                        "VIKTOR",
                                        "SEJUANI",
                                        "FIORA",
                                        "ZIGGS",
                                        "LULU",
                                        "DRAVEN",
                                        "HECARIM",
                                        "KHAZIX",
                                        "DARIUS",
                                        "JAYCE",
                                        "LISSANDRA",
                                        "DIANA",
                                        "QUINN",
                                        "SYNDRA",
                                        "AURELION_SOL",
                                        "KAYN",
                                        "ZOE",
                                        "ZYRA",
                                        "KAISA",
                                        "SERAPHINE",
                                        "GNAR",
                                        "ZAC",
                                        "YASUO",
                                        "VELKOZ",
                                        "TALIYAH",
                                        "CAMILLE",
                                        "AKSHAN",
                                        "BELVETH",
                                        "BRAUM",
                                        "JHIN",
                                        "KINDRED",
                                        "ZERI",
                                        "JINX",
                                        "TAHM_KENCH",
                                        "BRIAR",
                                        "VIEGO",
                                        "SENNA",
                                        "LUCIAN",
                                        "ZED",
                                        "KLED",
                                        "EKKO",
                                        "QIYANA",
                                        "VI",
                                        "AATROX",
                                        "NAMI",
                                        "AZIR",
                                        "YUUMI",
                                        "SAMIRA",
                                        "THRESH",
                                        "ILLAOI",
                                        "REKSAI",
                                        "IVERN",
                                        "KALISTA",
                                        "BARD",
                                        "RAKAN",
                                        "XAYAH",
                                        "ORNN",
                                        "SYLAS",
                                        "NEEKO",
                                        "APHELIOS",
                                        "RELL",
                                        "PYKE",
                                        "VEX",
                                        "YONE",
                                        "AMBESSA",
                                        "SETT",
                                        "LILLIA",
                                        "GWEN",
                                        "RENATA_GLASC",
                                        "AURORA",
                                        "NILAH",
                                        "KSANTE",
                                        "SMOLDER",
                                        "MILIO",
                                        "HWEI",
                                        "NAAFIRI"
                                    ],
                                    "description": "These are the champion names in the game League of Legends."
                                }
                            },
                            "required": [
                                "region",
                                "champion"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "lol-champion-analysis",
                        "description": "Retrieves very detailed information about a specific champion, such as win rate, pick rate, recommended builds, recommended skill order, recommended items, etc. If a user mentions a specific champion, you *must* always call this function, review the data, and then respond. If the user asks some tips during playing game, you should also occasionally call this function to advice how to play the game well. If the users asks like 'what items should I buy?', 'which skill should I level up?', also you need to call this function to see the high winrate champions. (Counter Picks ban/pick data is available in the `weakCounters` field). You must assume the position user want to know.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "game_mode": {
                                    "type": "string",
                                    "enum": [
                                        "RANKED",
                                        "FLEX",
                                        "URF",
                                        "ARAM",
                                        "NEXUS_BLITZ"
                                    ],
                                    "description": "Different queue types and game modes in League of Legends."
                                },
                                "champion": {
                                    "type": "string",
                                    "enum": [
                                        "ANNIE",
                                        "OLAF",
                                        "GALIO",
                                        "TWISTED_FATE",
                                        "XIN_ZHAO",
                                        "URGOT",
                                        "LEBLANC",
                                        "VLADIMIR",
                                        "FIDDLESTICKS",
                                        "KAYLE",
                                        "MASTER_YI",
                                        "ALISTAR",
                                        "RYZE",
                                        "SION",
                                        "SIVIR",
                                        "SORAKA",
                                        "TEEMO",
                                        "TRISTANA",
                                        "WARWICK",
                                        "NUNU_WILLUMP",
                                        "MISS_FORTUNE",
                                        "ASHE",
                                        "TRYNDAMERE",
                                        "JAX",
                                        "MORGANA",
                                        "ZILEAN",
                                        "SINGED",
                                        "EVELYNN",
                                        "TWITCH",
                                        "KARTHUS",
                                        "CHOGATH",
                                        "AMUMU",
                                        "RAMMUS",
                                        "ANIVIA",
                                        "SHACO",
                                        "DR_MUNDO",
                                        "SONA",
                                        "KASSADIN",
                                        "IRELIA",
                                        "JANNA",
                                        "GANGPLANK",
                                        "CORKI",
                                        "KARMA",
                                        "TARIC",
                                        "VEIGAR",
                                        "TRUNDLE",
                                        "SWAIN",
                                        "CAITLYN",
                                        "BLITZCRANK",
                                        "MALPHITE",
                                        "KATARINA",
                                        "NOCTURNE",
                                        "MAOKAI",
                                        "RENEKTON",
                                        "JARVAN_IV",
                                        "ELISE",
                                        "ORIANNA",
                                        "WUKONG",
                                        "BRAND",
                                        "LEE_SIN",
                                        "VAYNE",
                                        "RUMBLE",
                                        "CASSIOPEIA",
                                        "SKARNER",
                                        "HEIMERDINGER",
                                        "NASUS",
                                        "NIDALEE",
                                        "UDYR",
                                        "POPPY",
                                        "GRAGAS",
                                        "PANTHEON",
                                        "EZREAL",
                                        "MORDEKAISER",
                                        "YORICK",
                                        "AKALI",
                                        "KENNEN",
                                        "GAREN",
                                        "LEONA",
                                        "MALZAHAR",
                                        "TALON",
                                        "RIVEN",
                                        "KOGMAW",
                                        "SHEN",
                                        "LUX",
                                        "XERATH",
                                        "SHYVANA",
                                        "AHRI",
                                        "GRAVES",
                                        "FIZZ",
                                        "VOLIBEAR",
                                        "RENGAR",
                                        "VARUS",
                                        "NAUTILUS",
                                        "VIKTOR",
                                        "SEJUANI",
                                        "FIORA",
                                        "ZIGGS",
                                        "LULU",
                                        "DRAVEN",
                                        "HECARIM",
                                        "KHAZIX",
                                        "DARIUS",
                                        "JAYCE",
                                        "LISSANDRA",
                                        "DIANA",
                                        "QUINN",
                                        "SYNDRA",
                                        "AURELION_SOL",
                                        "KAYN",
                                        "ZOE",
                                        "ZYRA",
                                        "KAISA",
                                        "SERAPHINE",
                                        "GNAR",
                                        "ZAC",
                                        "YASUO",
                                        "VELKOZ",
                                        "TALIYAH",
                                        "CAMILLE",
                                        "AKSHAN",
                                        "BELVETH",
                                        "BRAUM",
                                        "JHIN",
                                        "KINDRED",
                                        "ZERI",
                                        "JINX",
                                        "TAHM_KENCH",
                                        "BRIAR",
                                        "VIEGO",
                                        "SENNA",
                                        "LUCIAN",
                                        "ZED",
                                        "KLED",
                                        "EKKO",
                                        "QIYANA",
                                        "VI",
                                        "AATROX",
                                        "NAMI",
                                        "AZIR",
                                        "YUUMI",
                                        "SAMIRA",
                                        "THRESH",
                                        "ILLAOI",
                                        "REKSAI",
                                        "IVERN",
                                        "KALISTA",
                                        "BARD",
                                        "RAKAN",
                                        "XAYAH",
                                        "ORNN",
                                        "SYLAS",
                                        "NEEKO",
                                        "APHELIOS",
                                        "RELL",
                                        "PYKE",
                                        "VEX",
                                        "YONE",
                                        "AMBESSA",
                                        "SETT",
                                        "LILLIA",
                                        "GWEN",
                                        "RENATA_GLASC",
                                        "AURORA",
                                        "NILAH",
                                        "KSANTE",
                                        "SMOLDER",
                                        "MILIO",
                                        "HWEI",
                                        "NAAFIRI"
                                    ],
                                    "description": "These are the champion names in the game League of Legends."
                                },
                                "position": {
                                    "type": "string",
                                    "enum": [
                                        "TOP",
                                        "MID",
                                        "JUNGLE",
                                        "ADC",
                                        "SUPPORT",
                                        "NONE"
                                    ],
                                    "description": "These are the champion positions in the game League of Legends."
                                },
                                "lang": {
                                    "type": "string",
                                    "enum": [
                                        "ar_AE",
                                        "cs_CZ",
                                        "de_DE",
                                        "el_GR",
                                        "en_US",
                                        "en_AU",
                                        "en_GB",
                                        "en_PH",
                                        "en_SG",
                                        "es_AR",
                                        "es_ES",
                                        "es_MX",
                                        "fr_FR",
                                        "hu_HU",
                                        "it_IT",
                                        "ja_JP",
                                        "ko_KR",
                                        "pl_PL",
                                        "pt_BR",
                                        "ro_RO",
                                        "ru_RU",
                                        "th_TH",
                                        "tr_TR",
                                        "vi_VN",
                                        "zh_CN",
                                        "zh_MY",
                                        "zh_TW"
                                    ],
                                    "description": "Language code for localized content. Determines the language of returned data."
                                }
                            },
                            "required": [
                                "game_mode",
                                "champion",
                                "position",
                                "lang"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "lol-champion-meta-data",
                        "description": "Retrieves meta data for a specific champion, including statistics and performance metrics.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "champion": {
                                    "type": "string",
                                    "enum": [
                                        "ANNIE",
                                        "OLAF",
                                        "GALIO",
                                        "TWISTED_FATE",
                                        "XIN_ZHAO",
                                        "URGOT",
                                        "LEBLANC",
                                        "VLADIMIR",
                                        "FIDDLESTICKS",
                                        "KAYLE",
                                        "MASTER_YI",
                                        "ALISTAR",
                                        "RYZE",
                                        "SION",
                                        "SIVIR",
                                        "SORAKA",
                                        "TEEMO",
                                        "TRISTANA",
                                        "WARWICK",
                                        "NUNU_WILLUMP",
                                        "MISS_FORTUNE",
                                        "ASHE",
                                        "TRYNDAMERE",
                                        "JAX",
                                        "MORGANA",
                                        "ZILEAN",
                                        "SINGED",
                                        "EVELYNN",
                                        "TWITCH",
                                        "KARTHUS",
                                        "CHOGATH",
                                        "AMUMU",
                                        "RAMMUS",
                                        "ANIVIA",
                                        "SHACO",
                                        "DR_MUNDO",
                                        "SONA",
                                        "KASSADIN",
                                        "IRELIA",
                                        "JANNA",
                                        "GANGPLANK",
                                        "CORKI",
                                        "KARMA",
                                        "TARIC",
                                        "VEIGAR",
                                        "TRUNDLE",
                                        "SWAIN",
                                        "CAITLYN",
                                        "BLITZCRANK",
                                        "MALPHITE",
                                        "KATARINA",
                                        "NOCTURNE",
                                        "MAOKAI",
                                        "RENEKTON",
                                        "JARVAN_IV",
                                        "ELISE",
                                        "ORIANNA",
                                        "WUKONG",
                                        "BRAND",
                                        "LEE_SIN",
                                        "VAYNE",
                                        "RUMBLE",
                                        "CASSIOPEIA",
                                        "SKARNER",
                                        "HEIMERDINGER",
                                        "NASUS",
                                        "NIDALEE",
                                        "UDYR",
                                        "POPPY",
                                        "GRAGAS",
                                        "PANTHEON",
                                        "EZREAL",
                                        "MORDEKAISER",
                                        "YORICK",
                                        "AKALI",
                                        "KENNEN",
                                        "GAREN",
                                        "LEONA",
                                        "MALZAHAR",
                                        "TALON",
                                        "RIVEN",
                                        "KOGMAW",
                                        "SHEN",
                                        "LUX",
                                        "XERATH",
                                        "SHYVANA",
                                        "AHRI",
                                        "GRAVES",
                                        "FIZZ",
                                        "VOLIBEAR",
                                        "RENGAR",
                                        "VARUS",
                                        "NAUTILUS",
                                        "VIKTOR",
                                        "SEJUANI",
                                        "FIORA",
                                        "ZIGGS",
                                        "LULU",
                                        "DRAVEN",
                                        "HECARIM",
                                        "KHAZIX",
                                        "DARIUS",
                                        "JAYCE",
                                        "LISSANDRA",
                                        "DIANA",
                                        "QUINN",
                                        "SYNDRA",
                                        "AURELION_SOL",
                                        "KAYN",
                                        "ZOE",
                                        "ZYRA",
                                        "KAISA",
                                        "SERAPHINE",
                                        "GNAR",
                                        "ZAC",
                                        "YASUO",
                                        "VELKOZ",
                                        "TALIYAH",
                                        "CAMILLE",
                                        "AKSHAN",
                                        "BELVETH",
                                        "BRAUM",
                                        "JHIN",
                                        "KINDRED",
                                        "ZERI",
                                        "JINX",
                                        "TAHM_KENCH",
                                        "BRIAR",
                                        "VIEGO",
                                        "SENNA",
                                        "LUCIAN",
                                        "ZED",
                                        "KLED",
                                        "EKKO",
                                        "QIYANA",
                                        "VI",
                                        "AATROX",
                                        "NAMI",
                                        "AZIR",
                                        "YUUMI",
                                        "SAMIRA",
                                        "THRESH",
                                        "ILLAOI",
                                        "REKSAI",
                                        "IVERN",
                                        "KALISTA",
                                        "BARD",
                                        "RAKAN",
                                        "XAYAH",
                                        "ORNN",
                                        "SYLAS",
                                        "NEEKO",
                                        "APHELIOS",
                                        "RELL",
                                        "PYKE",
                                        "VEX",
                                        "YONE",
                                        "AMBESSA",
                                        "SETT",
                                        "LILLIA",
                                        "GWEN",
                                        "RENATA_GLASC",
                                        "AURORA",
                                        "NILAH",
                                        "KSANTE",
                                        "SMOLDER",
                                        "MILIO",
                                        "HWEI",
                                        "NAAFIRI"
                                    ],
                                    "description": "These are the champion names in the game League of Legends."
                                },
                                "lang": {
                                    "type": "string",
                                    "enum": [
                                        "ar_AE",
                                        "cs_CZ",
                                        "de_DE",
                                        "el_GR",
                                        "en_US",
                                        "en_AU",
                                        "en_GB",
                                        "en_PH",
                                        "en_SG",
                                        "es_AR",
                                        "es_ES",
                                        "es_MX",
                                        "fr_FR",
                                        "hu_HU",
                                        "it_IT",
                                        "ja_JP",
                                        "ko_KR",
                                        "pl_PL",
                                        "pt_BR",
                                        "ro_RO",
                                        "ru_RU",
                                        "th_TH",
                                        "tr_TR",
                                        "vi_VN",
                                        "zh_CN",
                                        "zh_MY",
                                        "zh_TW"
                                    ],
                                    "description": "Language code for localized content. Determines the language of returned data."
                                }
                            },
                            "required": [
                                "champion",
                                "lang"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "lol-champion-metadata-resources",
                        "description": "Retrieves metadata for all League of Legends champions with localized names and keys in CSV format. Returns champion_id, key, and name for all champions in the specified language.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "lang": {
                                    "type": "string",
                                    "enum": [
                                        "ar_AE",
                                        "cs_CZ",
                                        "de_DE",
                                        "el_GR",
                                        "en_US",
                                        "en_AU",
                                        "en_GB",
                                        "en_PH",
                                        "en_SG",
                                        "es_AR",
                                        "es_ES",
                                        "es_MX",
                                        "fr_FR",
                                        "hu_HU",
                                        "it_IT",
                                        "ja_JP",
                                        "ko_KR",
                                        "pl_PL",
                                        "pt_BR",
                                        "ro_RO",
                                        "ru_RU",
                                        "th_TH",
                                        "tr_TR",
                                        "vi_VN",
                                        "zh_CN",
                                        "zh_MY",
                                        "zh_TW"
                                    ],
                                    "description": "Language code for localized content (e.g., en_US, ko_KR, ja_JP). Determines the language of champion names."
                                }
                            },
                            "required": [
                                "lang"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": true,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "lol-champion-skin-sale",
                        "description": "Retrieves information about champion skins that are currently on sale.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "lang": {
                                    "type": "string",
                                    "enum": [
                                        "ar_AE",
                                        "cs_CZ",
                                        "de_DE",
                                        "el_GR",
                                        "en_US",
                                        "en_AU",
                                        "en_GB",
                                        "en_PH",
                                        "en_SG",
                                        "es_AR",
                                        "es_ES",
                                        "es_MX",
                                        "fr_FR",
                                        "hu_HU",
                                        "it_IT",
                                        "ja_JP",
                                        "ko_KR",
                                        "pl_PL",
                                        "pt_BR",
                                        "ro_RO",
                                        "ru_RU",
                                        "th_TH",
                                        "tr_TR",
                                        "vi_VN",
                                        "zh_CN",
                                        "zh_MY",
                                        "zh_TW"
                                    ],
                                    "description": "Language code for localized content. Determines the language of returned data."
                                }
                            },
                            "required": [
                                "lang"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "lol-summoner-search",
                        "description": "Retrieves information about a specific summoner, such as their rank, win rate, and recent match history. If a user mentions a specific summoner or wants to know about themselves, you *must* always call this function. If you can't find the summoner, ask to the user which region do they play.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "game_name": {
                                    "type": "string",
                                    "description": "The first part of a Riot ID (e.g., \"Annie\" in \"Annie#Opgg\")."
                                },
                                "tag_line": {
                                    "type": "string",
                                    "description": "The second part of a Riot ID (e.g., \"Opgg\" in \"Annie#Opgg\")."
                                },
                                "region": {
                                    "type": "string",
                                    "enum": [
                                        "KR",
                                        "BR",
                                        "EUNE",
                                        "EUW",
                                        "LAN",
                                        "LAS",
                                        "NA",
                                        "OCE",
                                        "RU",
                                        "TR",
                                        "JP",
                                        "PH",
                                        "SG",
                                        "TH",
                                        "TW",
                                        "VN",
                                        "ME",
                                        "SEA"
                                    ],
                                    "description": "The region to search in (e.g., KR, NA, EUW)."
                                },
                                "lang": {
                                    "type": "string",
                                    "enum": [
                                        "ar_AE",
                                        "cs_CZ",
                                        "de_DE",
                                        "el_GR",
                                        "en_US",
                                        "en_AU",
                                        "en_GB",
                                        "en_PH",
                                        "en_SG",
                                        "es_AR",
                                        "es_ES",
                                        "es_MX",
                                        "fr_FR",
                                        "hu_HU",
                                        "it_IT",
                                        "ja_JP",
                                        "ko_KR",
                                        "pl_PL",
                                        "pt_BR",
                                        "ro_RO",
                                        "ru_RU",
                                        "th_TH",
                                        "tr_TR",
                                        "vi_VN",
                                        "zh_CN",
                                        "zh_MY",
                                        "zh_TW"
                                    ],
                                    "description": "Language code for localized content. Determines the language of returned data."
                                }
                            },
                            "required": [
                                "game_name",
                                "tag_line",
                                "region",
                                "lang"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "lol-champion-positions-data",
                        "description": "Retrieves the analytics of champions by each positions. You can also look up the winrate, banrate, plays, wins, kills, kda and etc. `tier_data` is champion tier which tells which champion is powerful (OP) or not, for example `tier 1` champion is easy to play and powerful champion. (You can recommend this champion to the user if they want recommandation)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "lang": {
                                    "type": "string",
                                    "enum": [
                                        "ar_AE",
                                        "cs_CZ",
                                        "de_DE",
                                        "el_GR",
                                        "en_US",
                                        "en_AU",
                                        "en_GB",
                                        "en_PH",
                                        "en_SG",
                                        "es_AR",
                                        "es_ES",
                                        "es_MX",
                                        "fr_FR",
                                        "hu_HU",
                                        "it_IT",
                                        "ja_JP",
                                        "ko_KR",
                                        "pl_PL",
                                        "pt_BR",
                                        "ro_RO",
                                        "ru_RU",
                                        "th_TH",
                                        "tr_TR",
                                        "vi_VN",
                                        "zh_CN",
                                        "zh_MY",
                                        "zh_TW"
                                    ],
                                    "description": "Language code for localized content. Determines the language of returned data."
                                },
                                "format": {
                                    "type": "string",
                                    "enum": [
                                        "csv",
                                        "json_zip"
                                    ],
                                    "description": "Format of the output data. Determines the format of returned data. Default is `csv`.",
                                    "default": "csv"
                                }
                            },
                            "required": [
                                "lang"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "lol-summoner-game-history",
                        "description": "Retrieves the recent match history of a specific summoner. If a user mentions a specific summoner, wants to know about their recent matches, wants to know how to improve or wants to get an advice, you *must* always call this function.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "game_name": {
                                    "type": "string",
                                    "description": "The first part of a Riot ID (e.g., \"Annie\" in \"Annie#Opgg\")."
                                },
                                "tag_line": {
                                    "type": "string",
                                    "description": "The second part of a Riot ID (e.g., \"Opgg\" in \"Annie#Opgg\")."
                                },
                                "region": {
                                    "type": "string",
                                    "enum": [
                                        "KR",
                                        "BR",
                                        "EUNE",
                                        "EUW",
                                        "LAN",
                                        "LAS",
                                        "NA",
                                        "OCE",
                                        "RU",
                                        "TR",
                                        "JP",
                                        "PH",
                                        "SG",
                                        "TH",
                                        "TW",
                                        "VN",
                                        "ME",
                                        "SEA"
                                    ],
                                    "description": "The region to search in (e.g., KR, NA, EUW)."
                                },
                                "lang": {
                                    "type": "string",
                                    "enum": [
                                        "ar_AE",
                                        "cs_CZ",
                                        "de_DE",
                                        "el_GR",
                                        "en_US",
                                        "en_AU",
                                        "en_GB",
                                        "en_PH",
                                        "en_SG",
                                        "es_AR",
                                        "es_ES",
                                        "es_MX",
                                        "fr_FR",
                                        "hu_HU",
                                        "it_IT",
                                        "ja_JP",
                                        "ko_KR",
                                        "pl_PL",
                                        "pt_BR",
                                        "ro_RO",
                                        "ru_RU",
                                        "th_TH",
                                        "tr_TR",
                                        "vi_VN",
                                        "zh_CN",
                                        "zh_MY",
                                        "zh_TW"
                                    ],
                                    "description": "Language code for localized content. Determines the language of returned data."
                                }
                            },
                            "required": [
                                "game_name",
                                "tag_line",
                                "region",
                                "lang"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "lol-summoner-renewal",
                        "description": "Renew the summoner's data of OP.GG through RiotAPI. When you retrieve summoner data, you *must* always call this function first, and then call the next functions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "game_name": {
                                    "type": "string",
                                    "description": "The first part of a Riot ID (e.g., \"Annie\" in \"Annie#Opgg\")."
                                },
                                "tag_line": {
                                    "type": "string",
                                    "description": "The second part of a Riot ID (e.g., \"Opgg\" in \"Annie#Opgg\")."
                                },
                                "region": {
                                    "type": "string",
                                    "enum": [
                                        "KR",
                                        "BR",
                                        "EUNE",
                                        "EUW",
                                        "LAN",
                                        "LAS",
                                        "NA",
                                        "OCE",
                                        "RU",
                                        "TR",
                                        "JP",
                                        "PH",
                                        "SG",
                                        "TH",
                                        "TW",
                                        "VN",
                                        "ME",
                                        "SEA"
                                    ],
                                    "description": "The region to search in (e.g., KR, NA, EUW)."
                                }
                            },
                            "required": [
                                "game_name",
                                "tag_line",
                                "region"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "lol-brawl-champion-tier-rank",
                        "description": "Retrieves champion tier ranking list in brawl mode.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "lang": {
                                    "type": "string",
                                    "enum": [
                                        "ar_AE",
                                        "cs_CZ",
                                        "de_DE",
                                        "el_GR",
                                        "en_US",
                                        "en_AU",
                                        "en_GB",
                                        "en_PH",
                                        "en_SG",
                                        "es_AR",
                                        "es_ES",
                                        "es_MX",
                                        "fr_FR",
                                        "hu_HU",
                                        "it_IT",
                                        "ja_JP",
                                        "ko_KR",
                                        "pl_PL",
                                        "pt_BR",
                                        "ro_RO",
                                        "ru_RU",
                                        "th_TH",
                                        "tr_TR",
                                        "vi_VN",
                                        "zh_CN",
                                        "zh_MY",
                                        "zh_TW"
                                    ],
                                    "description": "Language code for localized content. Determines the language of returned data."
                                }
                            },
                            "required": [
                                "lang"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "esports-lol-schedules",
                        "description": "Get upcoming LoL match schedules.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": {
                            "title": "Esports LoL Schedules",
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "esports-lol-team-standings",
                        "description": "Get team standings for a LoL league.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "shortName": {
                                    "type": "string",
                                    "enum": [
                                        "lck",
                                        "lpl",
                                        "lec",
                                        "lcs",
                                        "ljl",
                                        "vcs",
                                        "cblol",
                                        "lcl",
                                        "lla",
                                        "tcl",
                                        "pcs",
                                        "lco",
                                        "lta south",
                                        "lta north",
                                        "lcp",
                                        "first stand",
                                        "fst",
                                        "al",
                                        "msi",
                                        "worlds"
                                    ],
                                    "description": "League short name (LCK, LPL, Worlds, ...)"
                                }
                            },
                            "required": [
                                "shortName"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "tft-meta-trend-deck-list",
                        "description": "TFT deck list tool for retrieving current meta decks.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "tft-meta-item-combinations",
                        "description": "TFT tool for retrieving information about item combinations and recipes.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "language": {
                                    "type": "string",
                                    "enum": [
                                        "en_US",
                                        "ko_KR",
                                        "ja_JP",
                                        "zh_CN",
                                        "zh_TW",
                                        "fr_FR",
                                        "de_DE",
                                        "es_ES",
                                        "it_IT",
                                        "pl_PL",
                                        "pt_BR",
                                        "ru_RU",
                                        "tr_TR",
                                        "vi_VN"
                                    ],
                                    "description": "These are the champion names in the game League of Legends."
                                }
                            },
                            "required": []
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "tft-champion-item-build",
                        "description": "TFT tool for retrieving champion item build information.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "championId": {
                                    "type": "string",
                                    "enum": [
                                        null
                                    ],
                                    "description": "TFT champion ID to retrieve item build for"
                                }
                            },
                            "required": [
                                "championId"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "tft-recommend-champion-for-item",
                        "description": "TFT tool for retrieving champion recommendations for a specific item.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "itemId": {
                                    "type": "string",
                                    "enum": [
                                        null
                                    ],
                                    "description": "TFT item ID to get champion recommendations for"
                                }
                            },
                            "required": [
                                "itemId"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "tft-play-style-comment",
                        "description": "This tool provides comments on the playstyle of TFT champions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "region": {
                                    "type": "string",
                                    "enum": [
                                        "KR",
                                        "BR",
                                        "EUNE",
                                        "EUW",
                                        "LAN",
                                        "LAS",
                                        "NA",
                                        "OCE",
                                        "RU",
                                        "TR",
                                        "JP",
                                        "PH",
                                        "SG",
                                        "TH",
                                        "TW",
                                        "VN",
                                        "ME"
                                    ],
                                    "description": "TFT region"
                                },
                                "puuid": {
                                    "type": "string",
                                    "description": "Riot unique puuid value"
                                }
                            },
                            "required": [
                                "region",
                                "puuid"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "tft-augments-metadata-resources",
                        "description": "Retrieves metadata for all Teamfight Tactics augments with localized names and descriptions in CSV format. Returns apiName, desc, name, tier, and imageUrl for all augments in the specified language.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "lang": {
                                    "type": "string",
                                    "enum": [
                                        "en_US",
                                        "ko_KR",
                                        "ja_JP",
                                        "zh_CN",
                                        "zh_TW",
                                        "fr_FR",
                                        "de_DE",
                                        "es_ES",
                                        "it_IT",
                                        "pl_PL",
                                        "pt_BR",
                                        "ru_RU",
                                        "tr_TR",
                                        "vi_VN"
                                    ],
                                    "description": "Language code for localized content (e.g., en_US, ko_KR, ja_JP). Determines the language of augment names and descriptions."
                                }
                            },
                            "required": [
                                "lang"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": true,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "valorant-meta-maps",
                        "description": "Valorant map meta data",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "valorant-meta-characters",
                        "description": "Valorant character meta data",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "valorant-leaderboard",
                        "description": "Fetch Valorant leaderboard by region",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "region": {
                                    "type": "string",
                                    "enum": [
                                        "AP",
                                        "BR",
                                        "EU",
                                        "KR",
                                        "LATAM",
                                        "NA"
                                    ],
                                    "description": "Regions in Valorant"
                                }
                            },
                            "required": [
                                "region"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "valorant-agents-composition-with-map",
                        "description": "Retrieve agent composition data for a Valorant map.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "mapId": {
                                    "type": "string",
                                    "description": "Map ID in Valorant"
                                }
                            },
                            "required": [
                                "mapId"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "valorant-characters-statistics",
                        "description": "Retrieve character statistics data for Valorant, optionally filtered by map.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "mapId": {
                                    "type": "string",
                                    "description": "Optional Map ID in Valorant"
                                }
                            }
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    },
                    {
                        "name": "valorant-player-match-history",
                        "description": "Retrieve match history for a Valorant player using their game name and tag line.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "gameName": {
                                    "type": "string",
                                    "description": "Game name of the player"
                                },
                                "tagLine": {
                                    "type": "string",
                                    "description": "Tag line of the player"
                                }
                            },
                            "required": [
                                "gameName",
                                "tagLine"
                            ]
                        },
                        "annotations": {
                            "title": null,
                            "readOnlyHint": true,
                            "destructiveHint": false,
                            "idempotentHint": false,
                            "openWorldHint": false
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "HowToCook-MCP Server",
        "organization": "worryzyy",
        "description": "An MCP (Model Context Protocol) server based on Anduin2017/HowToCook, allowing AI assistants to recommend recipes, plan meals, and solve the age-old question of \"what should I eat today?\"",
        "web": "https://github.com/worryzyy/HowToCook-mcp",
        "config": {
            "mcpServers": {
                "howtocook-mcp": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "howtocook-mcp"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "howtocook-mcp": {
                "server_name": "howtocook-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "mcp_howtocook_getAllRecipes",
                        "description": "获取所有菜谱",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "no_param": {
                                    "type": "string",
                                    "description": "无参数"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "mcp_howtocook_getRecipesByCategory",
                        "description": "根据分类查询菜谱，可选分类有: 水产, 早餐, 调料, 甜品, 饮品, 荤菜, 半成品加工, 汤, 主食, 素菜",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "enum": [
                                        "水产",
                                        "早餐",
                                        "调料",
                                        "甜品",
                                        "饮品",
                                        "荤菜",
                                        "半成品加工",
                                        "汤",
                                        "主食",
                                        "素菜"
                                    ],
                                    "description": "菜谱分类名称，如水产、早餐、荤菜、主食等"
                                }
                            },
                            "required": [
                                "category"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "mcp_howtocook_recommendMeals",
                        "description": "根据用户的忌口、过敏原、人数智能推荐菜谱，创建一周的膳食计划以及大致的购物清单",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "allergies": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "过敏原列表，如[\"大蒜\", \"虾\"]"
                                },
                                "avoidItems": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "忌口食材列表，如[\"葱\", \"姜\"]"
                                },
                                "peopleCount": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 10,
                                    "description": "用餐人数，1-10之间的整数"
                                }
                            },
                            "required": [
                                "peopleCount"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "mcp_howtocook_whatToEat",
                        "description": "不知道吃什么？根据人数直接推荐适合的菜品组合",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "peopleCount": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 10,
                                    "description": "用餐人数，1-10之间的整数，会根据人数推荐合适数量的菜品"
                                }
                            },
                            "required": [
                                "peopleCount"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "mcp_howtocook_getRecipeById",
                        "description": "根据菜谱名称或ID查询指定菜谱的完整详情，包括食材、步骤等",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "菜谱名称或ID，支持模糊匹配菜谱名称"
                                }
                            },
                            "required": [
                                "query"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Baige (ygocdb.com) MCP Server",
        "organization": "lieyanqzu",
        "description": "A server based on Model Context Protocol (MCP) for interacting with the Baige (ygocdb.com) API. Provides a set of tools for querying Yu-Gi-Oh! card information in Chinese.",
        "web": "https://github.com/lieyanqzu/ygocdb-mcp",
        "config": {
            "mcpServers": {
                "ygocdb": {
                    "command": "npx",
                    "args": [
                        "ygocdb-mcp-server"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "ygocdb": {
                "server_name": "ygocdb",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "search_cards",
                        "description": "通过关键字搜索游戏王卡牌，可以搜索卡牌名称、效果文本等。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "搜索关键字，可以是卡牌名称、效果描述等"
                                }
                            },
                            "required": [
                                "query"
                            ]
                        },
                        "annotations": {
                            "title": "通过关键字搜索游戏王卡牌",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": null,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "get_card_by_id",
                        "description": "通过卡牌ID获取单张游戏王卡牌的详细信息",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "游戏王卡牌ID，通常为八位数字"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": {
                            "title": "通过ID获取单张游戏王卡牌",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": null,
                            "openWorldHint": true
                        }
                    },
                    {
                        "name": "get_card_image",
                        "description": "通过卡牌ID获取游戏王卡牌的图片",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "游戏王卡牌ID，可以使用search_cards工具搜索"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": {
                            "title": "通过ID获取游戏王卡牌图片",
                            "readOnlyHint": true,
                            "destructiveHint": null,
                            "idempotentHint": null,
                            "openWorldHint": true
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Trends Hub",
        "organization": "baranwang",
        "description": "基于 Model Context Protocol (MCP) 协议的全网热点趋势一站式聚合服务",
        "web": "https://github.com/baranwang/mcp-trends-hub",
        "config": {
            "mcpServers": {
                "trends-hub": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "mcp-trends-hub@1.6.2"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "trends-hub": {
                "server_name": "trends-hub",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get-36kr-trending",
                        "description": "获取 36 氪热榜，提供创业、商业、科技领域的热门资讯，包含投融资动态、新兴产业分析和商业模式创新信息",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "const": "hot",
                                            "description": "人气榜"
                                        },
                                        {
                                            "type": "string",
                                            "const": "video",
                                            "description": "视频榜"
                                        },
                                        {
                                            "type": "string",
                                            "const": "comment",
                                            "description": "热议榜"
                                        },
                                        {
                                            "type": "string",
                                            "const": "collect",
                                            "description": "收藏榜"
                                        }
                                    ],
                                    "default": "hot",
                                    "description": "分类"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-9to5mac-news",
                        "description": "获取 9to5Mac 苹果相关新闻，包含苹果产品发布、iOS 更新、Mac 硬件、应用推荐及苹果公司动态的英文资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-bbc-news",
                        "description": "获取 BBC 新闻，提供全球新闻、英国新闻、商业、政治、健康、教育、科技、娱乐等资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "const": "",
                                            "description": "热门新闻"
                                        },
                                        {
                                            "type": "string",
                                            "const": "world",
                                            "description": "国际"
                                        },
                                        {
                                            "type": "string",
                                            "const": "uk",
                                            "description": "英国"
                                        },
                                        {
                                            "type": "string",
                                            "const": "business",
                                            "description": "商业"
                                        },
                                        {
                                            "type": "string",
                                            "const": "politics",
                                            "description": "政治"
                                        },
                                        {
                                            "type": "string",
                                            "const": "health",
                                            "description": "健康"
                                        },
                                        {
                                            "type": "string",
                                            "const": "education",
                                            "description": "教育"
                                        },
                                        {
                                            "type": "string",
                                            "const": "science_and_environment",
                                            "description": "科学与环境"
                                        },
                                        {
                                            "type": "string",
                                            "const": "technology",
                                            "description": "科技"
                                        },
                                        {
                                            "type": "string",
                                            "const": "entertainment_and_arts",
                                            "description": "娱乐与艺术"
                                        }
                                    ],
                                    "default": ""
                                },
                                "edition": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "const": ""
                                        },
                                        {
                                            "type": "string",
                                            "const": "uk",
                                            "description": "UK"
                                        },
                                        {
                                            "type": "string",
                                            "const": "us",
                                            "description": "US & Canada"
                                        },
                                        {
                                            "type": "string",
                                            "const": "int",
                                            "description": "Rest of the world"
                                        }
                                    ],
                                    "default": "",
                                    "description": "版本，仅对 `category` 为空有效"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-bilibili-rank",
                        "description": "获取哔哩哔哩视频排行榜，包含全站、动画、音乐、游戏等多个分区的热门视频，反映当下年轻人的内容消费趋势",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "anyOf": [
                                        {
                                            "type": "number",
                                            "const": 0,
                                            "description": "全站"
                                        },
                                        {
                                            "type": "number",
                                            "const": 1,
                                            "description": "动画"
                                        },
                                        {
                                            "type": "number",
                                            "const": 3,
                                            "description": "音乐"
                                        },
                                        {
                                            "type": "number",
                                            "const": 4,
                                            "description": "游戏"
                                        },
                                        {
                                            "type": "number",
                                            "const": 5,
                                            "description": "娱乐"
                                        },
                                        {
                                            "type": "number",
                                            "const": 188,
                                            "description": "科技"
                                        },
                                        {
                                            "type": "number",
                                            "const": 119,
                                            "description": "鬼畜"
                                        },
                                        {
                                            "type": "number",
                                            "const": 129,
                                            "description": "舞蹈"
                                        },
                                        {
                                            "type": "number",
                                            "const": 155,
                                            "description": "时尚"
                                        },
                                        {
                                            "type": "number",
                                            "const": 160,
                                            "description": "生活"
                                        },
                                        {
                                            "type": "number",
                                            "const": 168,
                                            "description": "国创相关"
                                        },
                                        {
                                            "type": "number",
                                            "const": 181,
                                            "description": "影视"
                                        }
                                    ],
                                    "default": 0,
                                    "description": "排行榜分区"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-douban-rank",
                        "description": "获取豆瓣实时热门榜单，提供当前热门的图书、电影、电视剧、综艺等作品信息，包含评分和热度数据",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "const": "subject",
                                            "description": "图书、电影、电视剧、综艺等"
                                        },
                                        {
                                            "type": "string",
                                            "const": "movie",
                                            "description": "电影"
                                        },
                                        {
                                            "type": "string",
                                            "const": "tv",
                                            "description": "电视剧"
                                        }
                                    ],
                                    "default": "subject"
                                },
                                "start": {
                                    "type": "integer",
                                    "default": 0
                                },
                                "count": {
                                    "type": "integer",
                                    "default": 10
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-douyin-trending",
                        "description": "获取抖音热搜榜单，展示当下最热门的社会话题、娱乐事件、网络热点和流行趋势",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-gcores-new",
                        "description": "获取机核网游戏相关资讯，包含电子游戏评测、玩家文化、游戏开发和游戏周边产品的深度内容",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-ifanr-news",
                        "description": "获取爱范儿科技快讯，包含最新的科技产品、数码设备、互联网动态等前沿科技资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "limit": {
                                    "type": "integer",
                                    "default": 20
                                },
                                "offset": {
                                    "type": "integer",
                                    "default": 0
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-infoq-news",
                        "description": "获取 InfoQ 技术资讯，包含软件开发、架构设计、云计算、AI等企业级技术内容和前沿开发者动态",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "region": {
                                    "type": "string",
                                    "enum": [
                                        "cn",
                                        "global"
                                    ],
                                    "default": "cn"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-juejin-article-rank",
                        "description": "获取掘金文章榜，包含前端开发、后端技术、人工智能、移动开发及技术架构等领域的高质量中文技术文章和教程",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "category_id": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "const": "6809637769959178254",
                                            "description": "后端"
                                        },
                                        {
                                            "type": "string",
                                            "const": "6809637767543259144",
                                            "description": "前端"
                                        },
                                        {
                                            "type": "string",
                                            "const": "6809635626879549454",
                                            "description": "Android"
                                        },
                                        {
                                            "type": "string",
                                            "const": "6809635626661445640",
                                            "description": "iOS"
                                        },
                                        {
                                            "type": "string",
                                            "const": "6809637773935378440",
                                            "description": "人工智能"
                                        },
                                        {
                                            "type": "string",
                                            "const": "6809637771511070734",
                                            "description": "开发工具"
                                        },
                                        {
                                            "type": "string",
                                            "const": "6809637776263217160",
                                            "description": "代码人生"
                                        },
                                        {
                                            "type": "string",
                                            "const": "6809637772874219534",
                                            "description": "阅读"
                                        }
                                    ],
                                    "default": "6809637769959178254"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-netease-news-trending",
                        "description": "获取网易新闻热点榜，包含时政要闻、社会事件、财经资讯、科技动态及娱乐体育的全方位中文新闻资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-nytimes-news",
                        "description": "获取纽约时报新闻，包含国际政治、经济金融、社会文化、科学技术及艺术评论的高质量英文或中文国际新闻资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "region": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "const": "cn",
                                            "description": "中文"
                                        },
                                        {
                                            "type": "string",
                                            "const": "global",
                                            "description": "全球"
                                        }
                                    ],
                                    "default": "cn"
                                },
                                "section": {
                                    "type": "string",
                                    "default": "HomePage",
                                    "description": "分类，当 `region` 为 `cn` 时无效。可选值: Africa, Americas, ArtandDesign, Arts, AsiaPacific, Automobiles, Baseball, Books/Review, Business, Climate, CollegeBasketball, CollegeFootball, Dance, Dealbook, DiningandWine, Economy, Education, EnergyEnvironment, Europe, FashionandStyle, Golf, Health, Hockey, HomePage, Jobs, Lens, MediaandAdvertising, MiddleEast, MostEmailed, MostShared, MostViewed, Movies, Music, NYRegion, Obituaries, PersonalTech, Politics, ProBasketball, ProFootball, RealEstate, Science, SmallBusiness, Soccer, Space, Sports, SundayBookReview, Sunday-Review, Technology, Television, Tennis, Theater, TMagazine, Travel, Upshot, US, Weddings, Well, World, YourMoney"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-smzdm-rank",
                        "description": "获取什么值得买热门，包含商品推荐、优惠信息、购物攻略、产品评测及消费经验分享的实用中文消费类资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "unit": {
                                    "anyOf": [
                                        {
                                            "type": "number",
                                            "const": 1,
                                            "description": "今日热门"
                                        },
                                        {
                                            "type": "number",
                                            "const": 7,
                                            "description": "周热门"
                                        },
                                        {
                                            "type": "number",
                                            "const": 30,
                                            "description": "月热门"
                                        }
                                    ],
                                    "default": 1
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-sspai-rank",
                        "description": "获取少数派热榜，包含数码产品评测、软件应用推荐、生活方式指南及效率工作技巧的优质中文科技生活类内容",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "tag": {
                                    "type": "string",
                                    "enum": [
                                        "热门文章",
                                        "应用推荐",
                                        "生活方式",
                                        "效率技巧",
                                        "少数派播客"
                                    ],
                                    "default": "热门文章",
                                    "description": "分类"
                                },
                                "limit": {
                                    "type": "integer",
                                    "default": 40
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-tencent-news-trending",
                        "description": "获取腾讯新闻热点榜，包含国内外时事、社会热点、财经资讯、娱乐动态及体育赛事的综合性中文新闻资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "page_size": {
                                    "type": "integer",
                                    "default": 20
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-thepaper-trending",
                        "description": "获取澎湃新闻热榜，包含时政要闻、财经动态、社会事件、文化教育及深度报道的高质量中文新闻资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-theverge-news",
                        "description": "获取 The Verge 新闻，包含科技创新、数码产品评测、互联网趋势及科技公司动态的英文科技资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-toutiao-trending",
                        "description": "获取今日头条热榜，包含时政要闻、社会事件、国际新闻、科技发展及娱乐八卦等多领域的热门中文资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-weibo-trending",
                        "description": "获取微博热搜榜，包含时事热点、社会现象、娱乐新闻、明星动态及网络热议话题的实时热门中文资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-weread-rank",
                        "description": "获取微信读书排行榜，包含热门小说、畅销书籍、新书推荐及各类文学作品的阅读数据和排名信息",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "const": "rising",
                                            "description": "飙升榜"
                                        },
                                        {
                                            "type": "string",
                                            "const": "hot_search",
                                            "description": "热搜榜"
                                        },
                                        {
                                            "type": "string",
                                            "const": "newbook",
                                            "description": "新书榜"
                                        },
                                        {
                                            "type": "string",
                                            "const": "general_novel_rising",
                                            "description": "小说榜"
                                        },
                                        {
                                            "type": "string",
                                            "const": "all",
                                            "description": "总榜"
                                        }
                                    ],
                                    "default": "rising",
                                    "description": "排行榜分区"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-zhihu-trending",
                        "description": "获取知乎热榜，包含时事热点、社会话题、科技动态、娱乐八卦等多领域的热门问答和讨论的中文资讯",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "limit": {
                                    "type": "number",
                                    "default": 50
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP Image Extractor",
        "description": "MCP server for extracting and converting images to base64 for LLM analysis.",
        "web": "https://github.com/ifmelate/mcp-image-extractor",
        "config": {
            "mcpServers": {
                "image-extractor": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "mcp-image-extractor"
                    ]
                }
            }
        },
        "category": "Visualization",
        "tools": {
            "image-extractor": {
                "server_name": "image-extractor",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "extract_image_from_file",
                        "description": "Extract and analyze images from local file paths. Supports visual content understanding, OCR text extraction, and object recognition for screenshots, photos, diagrams, and documents.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "file_path": {
                                    "type": "string",
                                    "description": "Path to the image file to analyze (supports screenshots, photos, diagrams, and documents in PNG, JPG, GIF, WebP formats)"
                                },
                                "resize": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "For backward compatibility only. Images are always automatically resized to optimal dimensions (max 512x512) for LLM analysis"
                                },
                                "max_width": {
                                    "type": "number",
                                    "default": 512,
                                    "description": "For backward compatibility only. Default maximum width is now 512px"
                                },
                                "max_height": {
                                    "type": "number",
                                    "default": 512,
                                    "description": "For backward compatibility only. Default maximum height is now 512px"
                                }
                            },
                            "required": [
                                "file_path"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "extract_image_from_url",
                        "description": "Extract and analyze images from web URLs. Perfect for analyzing web screenshots, online photos, diagrams, or any image accessible via HTTP/HTTPS for visual content analysis and text extraction.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL of the image to analyze for visual content, text extraction, or object recognition (supports web screenshots, photos, diagrams)"
                                },
                                "resize": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "For backward compatibility only. Images are always automatically resized to optimal dimensions (max 512x512) for LLM analysis"
                                },
                                "max_width": {
                                    "type": "number",
                                    "default": 512,
                                    "description": "For backward compatibility only. Default maximum width is now 512px"
                                },
                                "max_height": {
                                    "type": "number",
                                    "default": 512,
                                    "description": "For backward compatibility only. Default maximum height is now 512px"
                                }
                            },
                            "required": [
                                "url"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "extract_image_from_base64",
                        "description": "Extract and analyze images from base64-encoded data. Ideal for processing screenshots from clipboard, dynamically generated images, or images embedded in applications without requiring file system access.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "base64": {
                                    "type": "string",
                                    "description": "Base64-encoded image data to analyze (useful for screenshots, images from clipboard, or dynamically generated visuals)"
                                },
                                "mime_type": {
                                    "type": "string",
                                    "default": "image/png",
                                    "description": "MIME type of the image (e.g., image/png, image/jpeg)"
                                },
                                "resize": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "For backward compatibility only. Images are always automatically resized to optimal dimensions (max 512x512) for LLM analysis"
                                },
                                "max_width": {
                                    "type": "number",
                                    "default": 512,
                                    "description": "For backward compatibility only. Default maximum width is now 512px"
                                },
                                "max_height": {
                                    "type": "number",
                                    "default": 512,
                                    "description": "For backward compatibility only. Default maximum height is now 512px"
                                }
                            },
                            "required": [
                                "base64"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Maven Dependencies MCP Server",
        "description": "An MCP (Model Context Protocol) server that provides tools for checking Maven dependency versions. This server enables LLMs to verify Maven dependencies and retrieve their latest versions from Maven Central Repository.",
        "web": "https://github.com/Bigsy/maven-mcp-server",
        "config": {
            "mcpServers": {
                "maven-deps-server": {
                    "command": "npx",
                    "args": [
                        "mcp-maven-deps"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "maven-deps-server": {
                "server_name": "maven-deps-server",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_latest_release",
                        "description": "Get the latest release version of a Maven dependency (excludes pre-releases by default)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "dependency": {
                                    "type": "string",
                                    "description": "Maven coordinate in format \"groupId:artifactId[:version][:packaging][:classifier]\" (e.g. \"org.springframework:spring-core\" or \"org.springframework:spring-core:5.3.20:jar\")"
                                },
                                "excludePreReleases": {
                                    "type": "boolean",
                                    "description": "Whether to exclude pre-release versions (alpha, beta, milestone, RC, snapshot). Default: true",
                                    "default": true
                                }
                            },
                            "required": [
                                "dependency"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "check_maven_version_exists",
                        "description": "Check if a specific version of a Maven dependency exists",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "dependency": {
                                    "type": "string",
                                    "description": "Maven coordinate in format \"groupId:artifactId[:version][:packaging][:classifier]\" (e.g. \"org.springframework:spring-core\" or \"org.springframework:spring-core:5.3.20:jar\")"
                                },
                                "version": {
                                    "type": "string",
                                    "description": "Version to check if not included in dependency string"
                                }
                            },
                            "required": [
                                "dependency"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "list_maven_versions",
                        "description": "List Maven dependency versions sorted by last updated date (most recent first)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "dependency": {
                                    "type": "string",
                                    "description": "Maven coordinate in format \"groupId:artifactId[:packaging][:classifier]\" (e.g. \"org.springframework:spring-core\" or \"org.springframework:spring-core:jar\")"
                                },
                                "depth": {
                                    "type": "number",
                                    "description": "Number of versions to return (default: 15)",
                                    "minimum": 1,
                                    "maximum": 100
                                },
                                "excludePreReleases": {
                                    "type": "boolean",
                                    "description": "Whether to exclude pre-release versions (alpha, beta, milestone, RC, snapshot). Default: true",
                                    "default": true
                                }
                            },
                            "required": [
                                "dependency"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Bing_CN_MCP",
        "description": "一个基于 MCP (Model Context Protocol) 的中文必应搜索工具，可以直接通过 Claude 或其他支持 MCP 的 AI 来搜索必应并获取网页内容。",
        "web": "https://github.com/yan5236/bing-cn-mcp-server",
        "config": {
            "mcpServers": {
                "bing-cn-mcp": {
                    "command": "npx",
                    "args": [
                        "bing-cn-mcp"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "bing-cn-mcp": {
                "server_name": "bing-cn-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "bing_search",
                        "description": "使用必应搜索指定的关键词，并返回搜索结果列表，包括标题、链接、摘要和ID",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "搜索关键词"
                                },
                                "num_results": {
                                    "type": "number",
                                    "default": 5,
                                    "description": "返回的结果数量，默认为5"
                                }
                            },
                            "required": [
                                "query"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "fetch_webpage",
                        "description": "根据提供的ID获取对应网页的内容",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "result_id": {
                                    "type": "string",
                                    "description": "从bing_search返回的结果ID"
                                }
                            },
                            "required": [
                                "result_id"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Simple Document Processing MCP Server",
        "organization": "cablate",
        "description": "A powerful Model Context Protocol (MCP) server providing comprehensive document processing capabilities.",
        "web": "https://github.com/cablate/mcp-doc-forge",
        "config": {
            "mcpServers": {
                "searxng": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@cablate/mcp-doc-forge"
                    ]
                }
            }
        },
        "category": "File Access",
        "tools": {
            "searxng": {
                "server_name": "searxng",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "document_reader",
                        "description": "Read content from non-image document-files at specified paths, supporting various file formats: .pdf, .docx, .txt, .html, .csv",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "filePath": {
                                    "type": "string",
                                    "description": "Path to the file to be read"
                                }
                            },
                            "required": [
                                "filePath"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "pdf_merger",
                        "description": "Merge multiple PDF files into one",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPaths": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Paths to the input PDF files"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where merged PDFs should be saved"
                                }
                            },
                            "required": [
                                "inputPaths",
                                "outputDir"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "pdf_splitter",
                        "description": "Split a PDF file into multiple files",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input PDF file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where split PDFs should be saved"
                                },
                                "pageRanges": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "start": {
                                                "type": "number"
                                            },
                                            "end": {
                                                "type": "number"
                                            }
                                        }
                                    },
                                    "description": "Array of page ranges to split"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir",
                                "pageRanges"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "docx_to_pdf",
                        "description": "Convert DOCX files to PDF format",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input DOCX file"
                                },
                                "outputPath": {
                                    "type": "string",
                                    "description": "Path where the output PDF file should be saved"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputPath"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "docx_to_html",
                        "description": "Convert DOCX to HTML while preserving formatting",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input DOCX file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where HTML should be saved"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "html_cleaner",
                        "description": "Clean HTML by removing unnecessary tags and attributes",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input HTML file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where cleaned HTML should be saved"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "html_to_text",
                        "description": "Convert HTML to plain text while preserving structure",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input HTML file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where text file should be saved"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "html_to_markdown",
                        "description": "Convert HTML to Markdown format",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input HTML file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where Markdown file should be saved"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "html_extract_resources",
                        "description": "Extract all resources (images, videos, links) from HTML",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input HTML file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where resources should be saved"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "html_formatter",
                        "description": "Format and beautify HTML code",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input HTML file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where formatted HTML should be saved"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "text_diff",
                        "description": "Compare two text files and show differences",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "file1Path": {
                                    "type": "string",
                                    "description": "Path to the first text file"
                                },
                                "file2Path": {
                                    "type": "string",
                                    "description": "Path to the second text file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where diff result should be saved"
                                }
                            },
                            "required": [
                                "file1Path",
                                "file2Path",
                                "outputDir"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "text_splitter",
                        "description": "Split text file by specified delimiter or line count",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input text file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where split files should be saved"
                                },
                                "splitBy": {
                                    "type": "string",
                                    "enum": [
                                        "lines",
                                        "delimiter"
                                    ],
                                    "description": "Split method: by line count or delimiter"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Line count (number) or delimiter string"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir",
                                "splitBy",
                                "value"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "text_formatter",
                        "description": "Format text with proper indentation and line spacing",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input text file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where formatted file should be saved"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "text_encoding_converter",
                        "description": "Convert text between different encodings",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input text file"
                                },
                                "outputDir": {
                                    "type": "string",
                                    "description": "Directory where converted file should be saved"
                                },
                                "fromEncoding": {
                                    "type": "string",
                                    "description": "Source encoding (e.g., 'big5', 'gbk', 'utf8')"
                                },
                                "toEncoding": {
                                    "type": "string",
                                    "description": "Target encoding (e.g., 'utf8', 'big5', 'gbk')"
                                }
                            },
                            "required": [
                                "inputPath",
                                "outputDir",
                                "fromEncoding",
                                "toEncoding"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "excel_read",
                        "description": "Read Excel file and convert to JSON format while preserving structure",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "inputPath": {
                                    "type": "string",
                                    "description": "Path to the input Excel file"
                                },
                                "includeHeaders": {
                                    "type": "boolean",
                                    "description": "Whether to include headers in the output",
                                    "default": true
                                }
                            },
                            "required": [
                                "inputPath"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "format_convert",
                        "description": "Convert between different document formats (Markdown, HTML, XML, JSON)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "input": {
                                    "type": "string",
                                    "description": "Input content to convert"
                                },
                                "fromFormat": {
                                    "type": "string",
                                    "enum": [
                                        "markdown",
                                        "html",
                                        "xml",
                                        "json"
                                    ],
                                    "description": "Source format"
                                },
                                "toFormat": {
                                    "type": "string",
                                    "enum": [
                                        "markdown",
                                        "html",
                                        "xml",
                                        "json"
                                    ],
                                    "description": "Target format"
                                }
                            },
                            "required": [
                                "input",
                                "fromFormat",
                                "toFormat"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "ArXiv MCP Server",
        "organization": "blazickjp",
        "description": "The ArXiv MCP Server provides a bridge between AI assistants and arXiv's research repository through the Model Context Protocol (MCP). It allows AI models to search for papers and access their content in a programmatic way.",
        "web": "https://github.com/blazickjp/arxiv-mcp-server",
        "config": {
            "mcpServers": {
                "arxiv-mcp-server": {
                    "command": "uv",
                    "args": [
                        "tool",
                        "run",
                        "arxiv-mcp-server",
                        "--storage-path",
                        "./annotated_data/files"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "arxiv-mcp-server": {
                "server_name": "arxiv-mcp-server",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "search_papers",
                        "description": "Search for papers on arXiv with advanced filtering and query optimization.\n\nQUERY CONSTRUCTION GUIDELINES:\n- Use QUOTED PHRASES for exact matches: \"multi-agent systems\", \"neural networks\", \"machine learning\"\n- Combine related concepts with OR: \"AI agents\" OR \"software agents\" OR \"intelligent agents\"  \n- Use field-specific searches for precision:\n  - ti:\"exact title phrase\" - search in titles only\n  - au:\"author name\" - search by author\n  - abs:\"keyword\" - search in abstracts only\n- Use ANDNOT to exclude unwanted results: \"machine learning\" ANDNOT \"survey\"\n- For best results, use 2-4 core concepts rather than long keyword lists\n\nADVANCED SEARCH PATTERNS:\n- Field + phrase: ti:\"transformer architecture\" for papers with exact title phrase\n- Multiple fields: au:\"Smith\" AND ti:\"quantum\" for author Smith's quantum papers  \n- Exclusions: \"deep learning\" ANDNOT (\"survey\" OR \"review\") to exclude survey papers\n- Broad + narrow: \"artificial intelligence\" AND (robotics OR \"computer vision\")\n\nCATEGORY FILTERING (highly recommended for relevance):\n- cs.AI: Artificial Intelligence\n- cs.MA: Multi-Agent Systems  \n- cs.LG: Machine Learning\n- cs.CL: Computation and Language (NLP)\n- cs.CV: Computer Vision\n- cs.RO: Robotics\n- cs.HC: Human-Computer Interaction\n- cs.CR: Cryptography and Security\n- cs.DB: Databases\n\nEXAMPLES OF EFFECTIVE QUERIES:\n- ti:\"reinforcement learning\" with categories: [\"cs.LG\", \"cs.AI\"] - for RL papers by title\n- au:\"Hinton\" AND \"deep learning\" with categories: [\"cs.LG\"] - for Hinton's deep learning work\n- \"multi-agent\" ANDNOT \"survey\" with categories: [\"cs.MA\"] - exclude survey papers\n- abs:\"transformer\" AND ti:\"attention\" with categories: [\"cs.CL\"] - attention papers with transformer abstracts\n\nDATE FILTERING: Use YYYY-MM-DD format for historical research:\n- date_to: \"2015-12-31\" - for foundational/classic work (pre-2016)\n- date_from: \"2020-01-01\" - for recent developments (post-2020)\n- Both together for specific time periods\n\nRESULT QUALITY: Results sorted by RELEVANCE (most relevant papers first), not just newest papers.\nThis ensures you get the most pertinent results regardless of publication date.\n\nTIPS FOR FOUNDATIONAL RESEARCH:\n- Use date_to: \"2010-12-31\" to find classic papers on BDI, SOAR, ACT-R\n- Combine with field searches: ti:\"BDI\" AND abs:\"belief desire intention\"  \n- Try author searches: au:\"Rao\" AND \"BDI\" for Anand Rao's foundational BDI work",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "Search query using quoted phrases for exact matches (e.g., '\"machine learning\" OR \"deep learning\"') or specific technical terms. Avoid overly broad or generic terms."
                                },
                                "max_results": {
                                    "type": "integer",
                                    "description": "Maximum number of results to return (default: 10, max: 50). Use 15-20 for comprehensive searches."
                                },
                                "date_from": {
                                    "type": "string",
                                    "description": "Start date for papers (YYYY-MM-DD format). Use to find recent work, e.g., '2023-01-01' for last 2 years."
                                },
                                "date_to": {
                                    "type": "string",
                                    "description": "End date for papers (YYYY-MM-DD format). Use with date_from to find historical work, e.g., '2020-12-31' for older research."
                                },
                                "categories": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Strongly recommended: arXiv categories to focus search (e.g., ['cs.AI', 'cs.MA'] for agent research, ['cs.LG'] for ML, ['cs.CL'] for NLP, ['cs.CV'] for vision). Greatly improves relevance."
                                },
                                "sort_by": {
                                    "type": "string",
                                    "enum": [
                                        "relevance",
                                        "date"
                                    ],
                                    "description": "Sort results by 'relevance' (most relevant first, default) or 'date' (newest first). Use 'relevance' for focused searches, 'date' for recent developments."
                                }
                            },
                            "required": [
                                "query"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "download_paper",
                        "description": "Download a paper and create a resource for it",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "paper_id": {
                                    "type": "string",
                                    "description": "The arXiv ID of the paper to download"
                                },
                                "check_status": {
                                    "type": "boolean",
                                    "description": "If true, only check conversion status without downloading",
                                    "default": false
                                }
                            },
                            "required": [
                                "paper_id"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "list_papers",
                        "description": "List all existing papers available as resources",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": null
                    },
                    {
                        "name": "read_paper",
                        "description": "Read the full content of a stored paper in markdown format",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "paper_id": {
                                    "type": "string",
                                    "description": "The arXiv ID of the paper to read"
                                }
                            },
                            "required": [
                                "paper_id"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP Yahoo Finance",
        "organization": "maxscheijen",
        "description": "A Model Context Protocol (MCP) server for Yahoo Finance interaction. This server provides tools to get pricing, company information and more.",
        "web": "https://github.com/maxscheijen/mcp-yahoo-finance",
        "config": {
            "mcpServers": {
                "yahoo-finance": {
                    "command": "uvx",
                    "args": [
                        "mcp-yahoo-finance"
                    ]
                }
            }
        },
        "category": "Finance",
        "tools": {
            "yahoo-finance": {
                "server_name": "yahoo-finance",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_current_stock_price",
                        "description": "Get the current stock price based on stock symbol.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_stock_price_by_date",
                        "description": "Get the stock price for a given stock symbol on a specific date.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                },
                                "date": {
                                    "type": "string",
                                    "description": "The date in YYYY-MM-DD format."
                                }
                            },
                            "required": [
                                "symbol",
                                "date"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_stock_price_date_range",
                        "description": "Get the stock prices for a given date range for a given stock symbol.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                },
                                "start_date": {
                                    "type": "string",
                                    "description": "The start date in YYYY-MM-DD format."
                                },
                                "end_date": {
                                    "type": "string",
                                    "description": "The end date in YYYY-MM-DD format."
                                }
                            },
                            "required": [
                                "symbol",
                                "start_date",
                                "end_date"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_historical_stock_prices",
                        "description": "Get historical stock prices for a given stock symbol.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                },
                                "period": {
                                    "type": "string",
                                    "description": "The period for historical data. Defaults to \"1mo\". Valid periods: \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\""
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "The interval beween data points. Defaults to \"1d\". Valid intervals: \"1d\", \"5d\", \"1wk\", \"1mo\", \"3mo\""
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_dividends",
                        "description": "Get dividends for a given stock symbol.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_income_statement",
                        "description": "Get income statement for a given stock symbol.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                },
                                "freq": {
                                    "type": "string",
                                    "description": "At what frequency to get cashflow statements. Defaults to \"yearly\". Valid freqencies: \"yearly\", \"quarterly\", \"trainling\""
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_cashflow",
                        "description": "Get cashflow for a given stock symbol.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                },
                                "freq": {
                                    "type": "string",
                                    "description": "At what frequency to get cashflow statements. Defaults to \"yearly\". Valid freqencies: \"yearly\", \"quarterly\", \"trainling\""
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_earning_dates",
                        "description": "Get earning dates.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                },
                                "limit": {
                                    "type": "string",
                                    "description": "max amount of upcoming and recent earnings dates to return. Default value 12 should return next 4 quarters and last 8 quarters. Increase if more history is needed."
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_news",
                        "description": "Get news for a given stock symbol.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_recommendations",
                        "description": "Get analyst recommendations for a given symbol.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Stock symbol in Yahoo Finance format."
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "OpenStreetMap (OSM) MCP Server",
        "description": "An OpenStreetMap MCP server implementation that enhances LLM capabilities with location-based services and geospatial data.",
        "web": "https://github.com/jagan-shanmugam/open-streetmap-mcp",
        "config": {
            "mcpServers": {
                "osm-mcp-server": {
                    "command": "uvx",
                    "args": [
                        "osm-mcp-server"
                    ]
                }
            }
        },
        "category": "Location",
        "tools": {
            "osm-mcp-server": {
                "server_name": "osm-mcp-server",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "geocode_address",
                        "description": "\nConvert an address or place name to geographic coordinates with detailed location information.\n\nThis tool takes a text description of a location (such as an address, landmark name, or\nplace of interest) and returns its precise geographic coordinates along with rich metadata.\nThe results can be used for mapping, navigation, location-based analysis, and as input to\nother geospatial tools.\n\nArgs:\n    address: The address, place name, landmark, or description to geocode (e.g., \"Empire State Building\", \n            \"123 Main St, Springfield\", \"Golden Gate Park, San Francisco\")\n    \nReturns:\n    List of matching locations with:\n    - Geographic coordinates (latitude/longitude)\n    - Formatted address\n    - Administrative boundaries (city, state, country)\n    - OSM type and ID\n    - Bounding box (if applicable)\n    - Importance ranking\n",
                        "inputSchema": {
                            "properties": {
                                "address": {
                                    "title": "Address",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "address"
                            ],
                            "title": "geocode_addressArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "items": {
                                        "additionalProperties": true,
                                        "type": "object"
                                    },
                                    "title": "Result",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "geocode_addressOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "reverse_geocode",
                        "description": "\nConvert geographic coordinates to a detailed address and location description.\n\nThis tool takes a specific point on Earth (latitude and longitude) and returns \ncomprehensive information about that location, including its address, nearby landmarks,\nadministrative boundaries, and other contextual information. Useful for translating\nGPS coordinates into human-readable locations.\n\nArgs:\n    latitude: The latitude coordinate (decimal degrees, WGS84)\n    longitude: The longitude coordinate (decimal degrees, WGS84)\n    \nReturns:\n    Detailed address and location information including:\n    - Formatted address\n    - Building, street, city, state, country\n    - Administrative hierarchy\n    - OSM metadata\n    - Postal code and other relevant identifiers\n",
                        "inputSchema": {
                            "properties": {
                                "latitude": {
                                    "title": "Latitude",
                                    "type": "number"
                                },
                                "longitude": {
                                    "title": "Longitude",
                                    "type": "number"
                                }
                            },
                            "required": [
                                "latitude",
                                "longitude"
                            ],
                            "title": "reverse_geocodeArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "reverse_geocodeOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "find_nearby_places",
                        "description": "\nDiscover points of interest and amenities near a specific location.\n\nThis tool performs a comprehensive search around a geographic point to identify\nnearby establishments, amenities, and points of interest. Results are organized by\ncategory and subcategory, making it easy to find specific types of places. Essential\nfor location-based recommendations, neighborhood analysis, and proximity-based decision making.\n\nArgs:\n    latitude: Center point latitude (decimal degrees)\n    longitude: Center point longitude (decimal degrees)\n    radius: Search radius in meters (defaults to 1000m/1km)\n    categories: List of OSM categories to search for (e.g., [\"amenity\", \"shop\", \"tourism\"]).\n               If omitted, searches common categories.\n    limit: Maximum number of total results to return\n    \nReturns:\n    Structured dictionary containing:\n    - Original query parameters\n    - Total count of places found\n    - Results grouped by category and subcategory\n    - Each place includes name, coordinates, and associated tags\n",
                        "inputSchema": {
                            "properties": {
                                "latitude": {
                                    "title": "Latitude",
                                    "type": "number"
                                },
                                "longitude": {
                                    "title": "Longitude",
                                    "type": "number"
                                },
                                "radius": {
                                    "default": 1000,
                                    "title": "Radius",
                                    "type": "number"
                                },
                                "categories": {
                                    "default": null,
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Categories",
                                    "type": "array"
                                },
                                "limit": {
                                    "default": 20,
                                    "title": "Limit",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "latitude",
                                "longitude"
                            ],
                            "title": "find_nearby_placesArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "find_nearby_placesOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_route_directions",
                        "description": "\nCalculate detailed route directions between two geographic points.\n\nThis tool provides comprehensive turn-by-turn navigation directions between any two locations\non Earth. It calculates the optimal route based on the specified transportation mode and\nreturns detailed information about distance, duration, maneuvers, and the route geometry.\nPerfect for trip planning, navigation assistance, and commute analysis.\n\nArgs:\n    from_latitude: Starting point latitude (decimal degrees)\n    from_longitude: Starting point longitude (decimal degrees)\n    to_latitude: Destination latitude (decimal degrees)\n    to_longitude: Destination longitude (decimal degrees)\n    mode: Transportation mode - options include:\n          - \"car\" (default): Standard automobile routing\n          - \"bike\": Bicycle-friendly routes\n          - \"foot\": Pedestrian walking paths\n    \nReturns:\n    Comprehensive routing information including:\n    - Summary with total distance (meters) and duration (seconds)\n    - Turn-by-turn directions with individual segments\n    - Route geometry for mapping visualization\n    - Waypoint information\n",
                        "inputSchema": {
                            "properties": {
                                "from_latitude": {
                                    "title": "From Latitude",
                                    "type": "number"
                                },
                                "from_longitude": {
                                    "title": "From Longitude",
                                    "type": "number"
                                },
                                "to_latitude": {
                                    "title": "To Latitude",
                                    "type": "number"
                                },
                                "to_longitude": {
                                    "title": "To Longitude",
                                    "type": "number"
                                },
                                "mode": {
                                    "default": "car",
                                    "title": "Mode",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "from_latitude",
                                "from_longitude",
                                "to_latitude",
                                "to_longitude"
                            ],
                            "title": "get_route_directionsArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_route_directionsOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "search_category",
                        "description": "\nSearch for specific types of places within a defined geographic area.\n\nThis tool allows targeted searches for places matching specific categories within\na rectangular geographic region. It's particularly useful for filtering places by type\n(restaurants, schools, parks, etc.) within a neighborhood or city district. Results include\ncomplete location details and metadata about each matching place.\n\nArgs:\n    category: Main OSM category to search for (e.g., \"amenity\", \"shop\", \"tourism\", \"building\")\n    min_latitude: Southern boundary of search area (decimal degrees)\n    min_longitude: Western boundary of search area (decimal degrees)\n    max_latitude: Northern boundary of search area (decimal degrees)\n    max_longitude: Eastern boundary of search area (decimal degrees)\n    subcategories: Optional list of specific subcategories to filter by (e.g., [\"restaurant\", \"cafe\"])\n    \nReturns:\n    Structured results including:\n    - Query parameters\n    - Count of matching places\n    - List of matching places with coordinates, names, and metadata\n",
                        "inputSchema": {
                            "properties": {
                                "category": {
                                    "title": "Category",
                                    "type": "string"
                                },
                                "min_latitude": {
                                    "title": "Min Latitude",
                                    "type": "number"
                                },
                                "min_longitude": {
                                    "title": "Min Longitude",
                                    "type": "number"
                                },
                                "max_latitude": {
                                    "title": "Max Latitude",
                                    "type": "number"
                                },
                                "max_longitude": {
                                    "title": "Max Longitude",
                                    "type": "number"
                                },
                                "subcategories": {
                                    "default": null,
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Subcategories",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "category",
                                "min_latitude",
                                "min_longitude",
                                "max_latitude",
                                "max_longitude"
                            ],
                            "title": "search_categoryArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "search_categoryOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "suggest_meeting_point",
                        "description": "\nFind the optimal meeting place for multiple people coming from different locations.\n\nThis tool calculates a central meeting point based on the locations of multiple individuals,\nthen recommends suitable venues near that central point. Ideal for planning social gatherings,\nbusiness meetings, or any situation where multiple people need to converge from different\nstarting points.\n\nArgs:\n    locations: List of dictionaries, each containing the latitude and longitude of a person's location\n              Example: [{\"latitude\": 37.7749, \"longitude\": -122.4194}, {\"latitude\": 37.3352, \"longitude\": -121.8811}]\n    venue_type: Type of venue to suggest as a meeting point. Options include:\n               \"cafe\", \"restaurant\", \"bar\", \"library\", \"park\", etc.\n    \nReturns:\n    Meeting point recommendations including:\n    - Calculated center point coordinates\n    - List of suggested venues with names and details\n    - Total number of matching venues in the area\n",
                        "inputSchema": {
                            "properties": {
                                "locations": {
                                    "items": {
                                        "additionalProperties": {
                                            "type": "number"
                                        },
                                        "type": "object"
                                    },
                                    "title": "Locations",
                                    "type": "array"
                                },
                                "venue_type": {
                                    "default": "cafe",
                                    "title": "Venue Type",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "locations"
                            ],
                            "title": "suggest_meeting_pointArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "suggest_meeting_pointOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "explore_area",
                        "description": "\nGenerate a comprehensive profile of an area including all amenities and features.\n\nThis powerful analysis tool creates a detailed overview of a neighborhood or area by\nidentifying and categorizing all geographic features, amenities, and points of interest.\nResults are organized by category for easy analysis. Excellent for neighborhood research,\narea comparisons, and location-based decision making.\n\nArgs:\n    latitude: Center point latitude (decimal degrees)\n    longitude: Center point longitude (decimal degrees)\n    radius: Search radius in meters (defaults to 500m)\n    \nReturns:\n    In-depth area profile including:\n    - Address and location context\n    - Total feature count\n    - Features organized by category and subcategory\n    - Each feature includes name, coordinates, and detailed metadata\n",
                        "inputSchema": {
                            "properties": {
                                "latitude": {
                                    "title": "Latitude",
                                    "type": "number"
                                },
                                "longitude": {
                                    "title": "Longitude",
                                    "type": "number"
                                },
                                "radius": {
                                    "default": 500,
                                    "title": "Radius",
                                    "type": "number"
                                }
                            },
                            "required": [
                                "latitude",
                                "longitude"
                            ],
                            "title": "explore_areaArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "explore_areaOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "find_schools_nearby",
                        "description": "\nLocate educational institutions near a specific location, filtered by education level.\n\nThis specialized search tool identifies schools, colleges, and other educational institutions\nwithin a specified distance from a location. Results can be filtered by education level\n(elementary, middle, high school, university, etc.). Essential for families evaluating\nneighborhoods or real estate purchases with education considerations.\n\nArgs:\n    latitude: Center point latitude (decimal degrees)\n    longitude: Center point longitude (decimal degrees)\n    radius: Search radius in meters (defaults to 2000m/2km)\n    education_levels: Optional list of specific education levels to filter by\n                     (e.g., [\"elementary\", \"secondary\", \"university\"])\n    \nReturns:\n    List of educational institutions with:\n    - Name and type\n    - Distance from search point\n    - Education levels offered\n    - Contact information if available\n    - Other relevant metadata\n",
                        "inputSchema": {
                            "properties": {
                                "latitude": {
                                    "title": "Latitude",
                                    "type": "number"
                                },
                                "longitude": {
                                    "title": "Longitude",
                                    "type": "number"
                                },
                                "radius": {
                                    "default": 2000,
                                    "title": "Radius",
                                    "type": "number"
                                },
                                "education_levels": {
                                    "default": null,
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Education Levels",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "latitude",
                                "longitude"
                            ],
                            "title": "find_schools_nearbyArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "find_schools_nearbyOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "analyze_commute",
                        "description": "\nPerform a detailed commute analysis between home and work locations.\n\nThis advanced tool analyzes commute options between two locations (typically home and work),\ncomparing multiple transportation modes and providing detailed metrics for each option.\nIncludes estimated travel times, distances, turn-by-turn directions, and other commute-relevant\ndata. Essential for real estate decisions, lifestyle planning, and workplace relocation analysis.\n\nArgs:\n    home_latitude: Home location latitude (decimal degrees)\n    home_longitude: Home location longitude (decimal degrees)\n    work_latitude: Workplace location latitude (decimal degrees)\n    work_longitude: Workplace location longitude (decimal degrees)\n    modes: List of transportation modes to analyze (options: \"car\", \"foot\", \"bike\")\n    depart_at: Optional departure time (format: \"HH:MM\") for time-sensitive routing\n    \nReturns:\n    Comprehensive commute analysis with:\n    - Summary comparing all transportation modes\n    - Detailed route information for each mode\n    - Total distance and duration for each option\n    - Turn-by-turn directions\n",
                        "inputSchema": {
                            "properties": {
                                "home_latitude": {
                                    "title": "Home Latitude",
                                    "type": "number"
                                },
                                "home_longitude": {
                                    "title": "Home Longitude",
                                    "type": "number"
                                },
                                "work_latitude": {
                                    "title": "Work Latitude",
                                    "type": "number"
                                },
                                "work_longitude": {
                                    "title": "Work Longitude",
                                    "type": "number"
                                },
                                "modes": {
                                    "default": [
                                        "car",
                                        "foot",
                                        "bike"
                                    ],
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Modes",
                                    "type": "array"
                                },
                                "depart_at": {
                                    "default": null,
                                    "title": "Depart At",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "home_latitude",
                                "home_longitude",
                                "work_latitude",
                                "work_longitude"
                            ],
                            "title": "analyze_commuteArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "analyze_commuteOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "find_ev_charging_stations",
                        "description": "\nLocate electric vehicle charging stations near a specific location.\n\nThis specialized search tool identifies EV charging infrastructure within a specified\ndistance from a location. Results can be filtered by connector type (Tesla, CCS, CHAdeMO, etc.)\nand minimum power delivery. Essential for EV owners planning trips or evaluating potential\ncharging stops.\n\nArgs:\n    latitude: Center point latitude (decimal degrees)\n    longitude: Center point longitude (decimal degrees)\n    radius: Search radius in meters (defaults to 5000m/5km)\n    connector_types: Optional list of specific connector types to filter by\n                    (e.g., [\"type2\", \"ccs\", \"tesla\"])\n    min_power: Minimum charging power in kW\n    \nReturns:\n    List of charging stations with:\n    - Location name and operator\n    - Available connector types\n    - Charging speeds\n    - Number of charging points\n    - Access restrictions\n    - Other relevant metadata\n",
                        "inputSchema": {
                            "properties": {
                                "latitude": {
                                    "title": "Latitude",
                                    "type": "number"
                                },
                                "longitude": {
                                    "title": "Longitude",
                                    "type": "number"
                                },
                                "radius": {
                                    "default": 5000,
                                    "title": "Radius",
                                    "type": "number"
                                },
                                "connector_types": {
                                    "default": null,
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Connector Types",
                                    "type": "array"
                                },
                                "min_power": {
                                    "default": null,
                                    "title": "Min Power",
                                    "type": "number"
                                }
                            },
                            "required": [
                                "latitude",
                                "longitude"
                            ],
                            "title": "find_ev_charging_stationsArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "find_ev_charging_stationsOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "analyze_neighborhood",
                        "description": "\nGenerate a comprehensive neighborhood analysis focused on livability factors.\n\nThis advanced analysis tool evaluates a neighborhood based on multiple livability factors,\nincluding amenities, transportation options, green spaces, and services. Results include\ncounts and proximity scores for various categories, helping to assess the overall quality\nand convenience of a residential area. Invaluable for real estate decisions, relocation\nplanning, and neighborhood comparisons.\n\nArgs:\n    latitude: Center point latitude (decimal degrees)\n    longitude: Center point longitude (decimal degrees)\n    radius: Analysis radius in meters (defaults to 1000m/1km)\n    \nReturns:\n    Comprehensive neighborhood profile including:\n    - Overall neighborhood score\n    - Walkability assessment\n    - Public transportation access\n    - Nearby amenities (shops, restaurants, services)\n    - Green spaces and recreation\n    - Education and healthcare facilities\n    - Detailed counts and distance metrics for each category\n",
                        "inputSchema": {
                            "properties": {
                                "latitude": {
                                    "title": "Latitude",
                                    "type": "number"
                                },
                                "longitude": {
                                    "title": "Longitude",
                                    "type": "number"
                                },
                                "radius": {
                                    "default": 1000,
                                    "title": "Radius",
                                    "type": "number"
                                }
                            },
                            "required": [
                                "latitude",
                                "longitude"
                            ],
                            "title": "analyze_neighborhoodArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "analyze_neighborhoodOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "find_parking_facilities",
                        "description": "\nLocate parking facilities near a specific location.\n\nThis tool finds parking options (lots, garages, street parking) near a specified location.\nResults can be filtered by parking type and include capacity information where available.\nUseful for trip planning, city navigation, and evaluating parking availability in urban areas.\n\nArgs:\n    latitude: Center point latitude (decimal degrees)\n    longitude: Center point longitude (decimal degrees)\n    radius: Search radius in meters (defaults to 1000m/1km)\n    parking_type: Optional filter for specific types of parking facilities\n                 (\"surface\", \"underground\", \"multi-storey\", etc.)\n    \nReturns:\n    List of parking facilities with:\n    - Name and type\n    - Capacity information if available\n    - Fee structure if available\n    - Access restrictions\n    - Distance from search point\n",
                        "inputSchema": {
                            "properties": {
                                "latitude": {
                                    "title": "Latitude",
                                    "type": "number"
                                },
                                "longitude": {
                                    "title": "Longitude",
                                    "type": "number"
                                },
                                "radius": {
                                    "default": 1000,
                                    "title": "Radius",
                                    "type": "number"
                                },
                                "parking_type": {
                                    "default": null,
                                    "title": "Parking Type",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "latitude",
                                "longitude"
                            ],
                            "title": "find_parking_facilitiesArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "find_parking_facilitiesOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Sequential Thinking MCP Server",
        "organization": "modelcontextprotocol",
        "description": "An MCP server implementation that provides a tool for dynamic and reflective problem-solving through a structured thinking process.",
        "web": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
        "config": {
            "mcpServers": {
                "sequential-thinking": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@modelcontextprotocol/server-sequential-thinking"
                    ]
                }
            }
        },
        "category": "Miscellaneous",
        "tools": {
            "sequential-thinking": {
                "server_name": "sequential-thinking",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "sequentialthinking",
                        "description": "A detailed tool for dynamic and reflective problem-solving through thoughts.\nThis tool helps analyze problems through a flexible thinking process that can adapt and evolve.\nEach thought can build on, question, or revise previous insights as understanding deepens.\n\nWhen to use this tool:\n- Breaking down complex problems into steps\n- Planning and design with room for revision\n- Analysis that might need course correction\n- Problems where the full scope might not be clear initially\n- Problems that require a multi-step solution\n- Tasks that need to maintain context over multiple steps\n- Situations where irrelevant information needs to be filtered out\n\nKey features:\n- You can adjust total_thoughts up or down as you progress\n- You can question or revise previous thoughts\n- You can add more thoughts even after reaching what seemed like the end\n- You can express uncertainty and explore alternative approaches\n- Not every thought needs to build linearly - you can branch or backtrack\n- Generates a solution hypothesis\n- Verifies the hypothesis based on the Chain of Thought steps\n- Repeats the process until satisfied\n- Provides a correct answer\n\nParameters explained:\n- thought: Your current thinking step, which can include:\n* Regular analytical steps\n* Revisions of previous thoughts\n* Questions about previous decisions\n* Realizations about needing more analysis\n* Changes in approach\n* Hypothesis generation\n* Hypothesis verification\n- next_thought_needed: True if you need more thinking, even if at what seemed like the end\n- thought_number: Current number in sequence (can go beyond initial total if needed)\n- total_thoughts: Current estimate of thoughts needed (can be adjusted up/down)\n- is_revision: A boolean indicating if this thought revises previous thinking\n- revises_thought: If is_revision is true, which thought number is being reconsidered\n- branch_from_thought: If branching, which thought number is the branching point\n- branch_id: Identifier for the current branch (if any)\n- needs_more_thoughts: If reaching end but realizing more thoughts needed\n\nYou should:\n1. Start with an initial estimate of needed thoughts, but be ready to adjust\n2. Feel free to question or revise previous thoughts\n3. Don't hesitate to add more thoughts if needed, even at the \"end\"\n4. Express uncertainty when present\n5. Mark thoughts that revise previous thinking or branch into new paths\n6. Ignore information that is irrelevant to the current step\n7. Generate a solution hypothesis when appropriate\n8. Verify the hypothesis based on the Chain of Thought steps\n9. Repeat the process until satisfied with the solution\n10. Provide a single, ideally correct answer as the final output\n11. Only set next_thought_needed to false when truly done and a satisfactory answer is reached",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "thought": {
                                    "type": "string",
                                    "description": "Your current thinking step"
                                },
                                "nextThoughtNeeded": {
                                    "type": "boolean",
                                    "description": "Whether another thought step is needed"
                                },
                                "thoughtNumber": {
                                    "type": "integer",
                                    "description": "Current thought number",
                                    "minimum": 1
                                },
                                "totalThoughts": {
                                    "type": "integer",
                                    "description": "Estimated total thoughts needed",
                                    "minimum": 1
                                },
                                "isRevision": {
                                    "type": "boolean",
                                    "description": "Whether this revises previous thinking"
                                },
                                "revisesThought": {
                                    "type": "integer",
                                    "description": "Which thought is being reconsidered",
                                    "minimum": 1
                                },
                                "branchFromThought": {
                                    "type": "integer",
                                    "description": "Branching point thought number",
                                    "minimum": 1
                                },
                                "branchId": {
                                    "type": "string",
                                    "description": "Branch identifier"
                                },
                                "needsMoreThoughts": {
                                    "type": "boolean",
                                    "description": "If more thoughts are needed"
                                }
                            },
                            "required": [
                                "thought",
                                "nextThoughtNeeded",
                                "thoughtNumber",
                                "totalThoughts"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP Server Chart",
        "organization": "antvis",
        "description": "A Model Context Protocol server for generating charts using AntV.",
        "web": "https://github.com/antvis/mcp-server-chart",
        "config": {
            "mcpServers": {
                "mcp-server-chart": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@antv/mcp-server-chart"
                    ]
                }
            }
        },
        "category": "Visualization",
        "tools": {
            "mcp-server-chart": {
                "server_name": "mcp-server-chart",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "generate_area_chart",
                        "description": "Generate a area chart to show data trends under continuous independent variables and observe the overall data trend, such as, displacement = velocity (average or instantaneous) × time: s = v × t. If the x-axis is time (t) and the y-axis is velocity (v) at each moment, an area chart allows you to observe the trend of velocity over time and infer the distance traveled by the area's size.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "time": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            },
                                            "group": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "time",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for area chart, such as, [{ time: '2018', value: 99.9 }]."
                                },
                                "stack": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether stacking is enabled. When enabled, area charts require a 'group' field in the data."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                },
                                "axisXTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the x-axis title of chart."
                                },
                                "axisYTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the y-axis title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_bar_chart",
                        "description": "Generate a horizontal bar chart to show data for numerical comparisons among different categories, such as, comparing categorical data and for horizontal comparisons.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "category": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            },
                                            "group": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "category",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for bar chart, such as, [{ category: '分类一', value: 10 }, { category: '分类二', value: 20 }], when grouping or stacking is needed for bar, the data should contain a `group` field, such as, when [{ category: '北京', value: 825, group: '油车' }, { category: '北京', value: 1000, group: '电车' }]."
                                },
                                "group": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether grouping is enabled. When enabled, bar charts require a 'group' field in the data. When `group` is true, `stack` should be false."
                                },
                                "stack": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "Whether stacking is enabled. When enabled, bar charts require a 'group' field in the data. When `stack` is true, `group` should be false."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                },
                                "axisXTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the x-axis title of chart."
                                },
                                "axisYTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the y-axis title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_boxplot_chart",
                        "description": "Generate a boxplot chart to show data for statistical summaries among different categories, such as, comparing the distribution of data points across categories.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "category": {
                                                "type": "string",
                                                "description": "Category of the data point, such as '分类一'."
                                            },
                                            "value": {
                                                "type": "number",
                                                "description": "Value of the data point, such as 10."
                                            },
                                            "group": {
                                                "type": "string",
                                                "description": "Optional group for the data point, used for grouping in the boxplot."
                                            }
                                        },
                                        "required": [
                                            "category",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for boxplot chart, such as, [{ category: '分类一', value: 10 }] or [{ category: '分类二', value: 20, group: '组别一' }]."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                },
                                "axisXTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the x-axis title of chart."
                                },
                                "axisYTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the y-axis title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_column_chart",
                        "description": "Generate a column chart, which are best for comparing categorical data, such as, when values are close, column charts are preferable because our eyes are better at judging height than other visual elements like area or angles.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "category": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            },
                                            "group": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "category",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for column chart, such as, [{ category: '分类一', value: 10 }, { category: '分类二', value: 20 }], when grouping or stacking is needed for column, the data should contain a `group` field, such as, when [{ category: '北京', value: 825, group: '油车' }, { category: '北京', value: 1000, group: '电车' }]."
                                },
                                "group": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "Whether grouping is enabled. When enabled, column charts require a 'group' field in the data. When `group` is true, `stack` should be false."
                                },
                                "stack": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether stacking is enabled. When enabled, column charts require a 'group' field in the data. When `stack` is true, `group` should be false."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                },
                                "axisXTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the x-axis title of chart."
                                },
                                "axisYTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the y-axis title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_district_map",
                        "description": "Generates regional distribution maps, which are usually used to show the administrative divisions and coverage of a dataset. It is not suitable for showing the distribution of specific locations, such as urban administrative divisions, GDP distribution maps of provinces and cities across the country, etc. This tool is limited to generating data maps within China.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string",
                                    "description": "The map title should not exceed 16 characters. The content should be consistent with the information the map wants to convey and should be accurate, rich, creative, and attractive."
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Keywords for the Chinese name of an administrative region (must be within China), and must be one of China, province, city, district, or county. The name should be more specific and add attributive descriptions, for example, \"西安市\" is better than \"西安\", \"杭州西湖区\" is better than \"西湖区\". It cannot be a specific place name or a vague name, such as \"其它\"."
                                        },
                                        "style": {
                                            "type": "object",
                                            "properties": {
                                                "fillColor": {
                                                    "type": "string",
                                                    "description": "Fill color, rgb or rgba format."
                                                }
                                            },
                                            "description": "Style settings."
                                        },
                                        "colors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "default": [
                                                "#1783FF",
                                                "#00C9C9",
                                                "#F0884D",
                                                "#D580FF",
                                                "#7863FF",
                                                "#60C42D",
                                                "#BD8F24",
                                                "#FF80CA",
                                                "#2491B3",
                                                "#17C76F"
                                            ],
                                            "description": "Data color list, in rgb or rgba format."
                                        },
                                        "dataType": {
                                            "type": "string",
                                            "enum": [
                                                "number",
                                                "enum"
                                            ],
                                            "description": "The type of the data value, numeric or enumeration type"
                                        },
                                        "dataLabel": {
                                            "type": "string",
                                            "description": "Data label, such as \"GDP\""
                                        },
                                        "dataValue": {
                                            "type": "string",
                                            "description": "Data value, numeric string or enumeration string."
                                        },
                                        "dataValueUnit": {
                                            "type": "string",
                                            "description": "Data unit, such as \"万亿\""
                                        },
                                        "showAllSubdistricts": {
                                            "type": "boolean",
                                            "default": false,
                                            "description": "Whether to display all subdistricts."
                                        },
                                        "subdistricts": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "description": "Keywords for the Chinese name of an administrative region (must be within China), and must be one of China, province, city, district, or county. The name should be more specific and add attributive descriptions, for example, \"西安市\" is better than \"西安\", \"杭州西湖区\" is better than \"西湖区\". It cannot be a specific place name or a vague name, such as \"其它\"."
                                                    },
                                                    "dataValue": {
                                                        "type": "string",
                                                        "description": "Data value, numeric string or enumeration string."
                                                    },
                                                    "style": {
                                                        "type": "object",
                                                        "properties": {
                                                            "fillColor": {
                                                                "type": "string",
                                                                "description": "Fill color, rgb or rgba format."
                                                            }
                                                        },
                                                        "description": "Style settings."
                                                    }
                                                },
                                                "required": [
                                                    "name"
                                                ]
                                            },
                                            "description": "Sub-administrative regions are used to display the regional composition or regional distribution of related data."
                                        }
                                    },
                                    "required": [
                                        "name"
                                    ],
                                    "description": "Administrative division data, lower-level administrative divisions are optional. There are usually two scenarios: one is to simply display the regional composition, only `fillColor` needs to be configured, and all administrative divisions are consistent, representing that all blocks are connected as one; the other is the regional data distribution scenario, first determine the `dataType`, `dataValueUnit` and `dataLabel` configurations, `dataValue` should be a meaningful value and consistent with the meaning of dataType, and then determine the style configuration. The `fillColor` configuration represents the default fill color for areas without data. Lower-level administrative divisions do not need `fillColor` configuration, and their fill colors are determined by the `colors` configuration (If `dataType` is \"number\", only one base color (warm color) is needed in the list to calculate the continuous data mapping color band; if `dataType` is \"enum\", the number of color values in the list is equal to the number of enumeration values (contrast colors)). If `subdistricts` has a value, `showAllSubdistricts` must be set to true. For example, {\"title\": \"陕西省地级市分布图\", \"data\": {\"name\": \"陕西省\", \"showAllSubdistricts\": true, \"dataLabel\": \"城市\", \"dataType\": \"enum\", \"colors\": [\"#4ECDC4\", \"#A5D8FF\"], \"subdistricts\": [{\"name\": \"西安市\", \"dataValue\": \"省会\"}, {\"name\": \"宝鸡市\", \"dataValue\": \"地级市\"}, {\"name\": \"咸阳市\", \"dataValue\": \"地级市\"}, {\"name\": \"铜川市\", \"dataValue\": \"地级市\"}, {\"name\": \"渭南市\", \"dataValue\": \"地级市\"}, {\"name\": \"延安市\", \"dataValue\": \"地级市\"}, {\"name\": \"榆林市\", \"dataValue\": \"地级市\"}, {\"name\": \"汉中市\", \"dataValue\": \"地级市\"}, {\"name\": \"安康市\", \"dataValue\": \"地级市\"}, {\"name\": \"商洛市\", \"dataValue\": \"地级市\"}]}, \"width\": 1000, \"height\": 1000}."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 1600,
                                    "description": "Set the width of map, default is 1600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 1000,
                                    "description": "Set the height of map, default is 1000."
                                }
                            },
                            "required": [
                                "title",
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_dual_axes_chart",
                        "description": "Generate a dual axes chart which is a combination chart that integrates two different chart types, typically combining a bar chart with a line chart to display both the trend and comparison of data, such as, the trend of sales and profit over time.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "categories": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "minItems": 1,
                                    "description": "Categories for dual axes chart, such as, ['2015', '2016', '2017']."
                                },
                                "series": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "column",
                                                    "line"
                                                ],
                                                "description": "The optional value can be 'column' or 'line'."
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "type": "number"
                                                },
                                                "description": "When type is column, the data represents quantities, such as [91.9, 99.1, 101.6, 114.4, 121]. When type is line, the data represents ratios and its values are recommended to be less than 1, such as [0.055, 0.06, 0.062, 0.07, 0.075]."
                                            },
                                            "axisYTitle": {
                                                "type": "string",
                                                "default": "",
                                                "description": "Set the y-axis title of the chart series, such as, axisYTitle: '销售额'."
                                            }
                                        },
                                        "required": [
                                            "type",
                                            "data"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Series for dual axes chart, such as, [{ type: 'column', data: [91.9, 99.1, 101.6, 114.4, 121], axisYTitle: '销售额' }, { type: 'line', data: [0.055, 0.06, 0.062, 0.07, 0.075], 'axisYTitle': '利润率' }]."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                },
                                "axisXTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the x-axis title of chart."
                                }
                            },
                            "required": [
                                "categories",
                                "series"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_fishbone_diagram",
                        "description": "Generate a fishbone diagram chart to uses a fish skeleton, like structure to display the causes or effects of a core problem, with the problem as the fish head and the causes/effects as the fish bones. It suits problems that can be split into multiple related factors.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "children": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "children": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "children": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "required": [
                                                    "name"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "name"
                                    ],
                                    "description": "Data for fishbone diagram chart which is a hierarchical structure, such as, { name: 'main topic', children: [{ name: 'topic 1', children: [{ name: 'subtopic 1-1' }] }] }, and the maximum depth is 3."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_flow_diagram",
                        "description": "Generate a flow diagram chart to show the steps and decision points of a process or system, such as, scenarios requiring linear process presentation.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "nodes": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "name"
                                                ]
                                            },
                                            "minItems": 1
                                        },
                                        "edges": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "source": {
                                                        "type": "string"
                                                    },
                                                    "target": {
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "default": ""
                                                    }
                                                },
                                                "required": [
                                                    "source",
                                                    "target"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "nodes",
                                        "edges"
                                    ],
                                    "description": "Data for flow diagram chart, such as, { nodes: [{ name: 'node1' }, { name: 'node2' }], edges: [{ source: 'node1', target: 'node2', name: 'edge1' }] }."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_funnel_chart",
                        "description": "Generate a funnel chart to visualize the progressive reduction of data as it passes through stages, such as, the conversion rates of users from visiting a website to completing a purchase.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "category": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "category",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for funnel chart, such as, [{ category: '浏览网站', value: 50000 }, { category: '放入购物车', value: 35000 }, { category: '生成订单', value: 25000 }, { category: '支付订单', value: 15000 }, { category: '完成交易', value: 8000 }]."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_histogram_chart",
                        "description": "Generate a histogram chart to show the frequency of data points within a certain range. It can observe data distribution, such as, normal and skewed distributions, and identify data concentration areas and extreme points.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "number"
                                    },
                                    "minItems": 1,
                                    "description": "Data for histogram chart, it should be an array of numbers, such as, [78, 88, 60, 100, 95]."
                                },
                                "binNumber": {
                                    "type": "number",
                                    "description": "Number of intervals to define the number of intervals in a histogram, when not specified, a built-in value will be used."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                },
                                "axisXTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the x-axis title of chart."
                                },
                                "axisYTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the y-axis title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_line_chart",
                        "description": "Generate a line chart to show trends over time, such as, the ratio of Apple computer sales to Apple's profits changed from 2000 to 2016.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "time": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "time",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for line chart, it should be an array of objects, each object contains a `time` field and a `value` field, such as, [{ time: '2015', value: 23 }, { time: '2016', value: 32 }]."
                                },
                                "stack": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether stacking is enabled. When enabled, line charts require a 'group' field in the data."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        },
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "lineWidth": {
                                            "type": "number",
                                            "description": "Line width for the lines of chart, such as 4."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                },
                                "axisXTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the x-axis title of chart."
                                },
                                "axisYTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the y-axis title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_liquid_chart",
                        "description": "Generate a liquid chart to visualize a single value as a percentage, such as, the current occupancy rate of a reservoir or the completion percentage of a project.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "percent": {
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 1,
                                    "description": "The percentage value to display in the liquid chart, should be a number between 0 and 1, where 1 represents 100%. For example, 0.75 represents 75%."
                                },
                                "shape": {
                                    "type": "string",
                                    "enum": [
                                        "circle",
                                        "rect",
                                        "pin",
                                        "triangle"
                                    ],
                                    "default": "circle",
                                    "description": "The shape of the liquid chart, can be 'circle', 'rect', 'pin', or 'triangle'. Default is 'circle'."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        },
                                        "color": {
                                            "type": "string",
                                            "description": "Custom color for the liquid chart, if not specified, defaults to the theme color."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                }
                            },
                            "required": [
                                "percent"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_mind_map",
                        "description": "Generate a mind map chart to organizes and presents information in a hierarchical structure with branches radiating from a central topic, such as, a diagram showing the relationship between a main topic and its subtopics.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "children": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "children": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "children": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "required": [
                                                    "name"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "name"
                                    ],
                                    "description": "Data for mind map chart which is a hierarchical structure, such as, { name: 'main topic', children: [{ name: 'topic 1', children: [{ name:'subtopic 1-1' }] }, and the maximum depth is 3."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_network_graph",
                        "description": "Generate a network graph chart to show relationships (edges) between entities (nodes), such as, relationships between people in social networks.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "nodes": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "name"
                                                ]
                                            },
                                            "minItems": 1
                                        },
                                        "edges": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "source": {
                                                        "type": "string"
                                                    },
                                                    "target": {
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "default": ""
                                                    }
                                                },
                                                "required": [
                                                    "source",
                                                    "target"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "nodes",
                                        "edges"
                                    ],
                                    "description": "Data for network graph chart, such as, { nodes: [{ name: 'node1' }, { name: 'node2' }], edges: [{ source: 'node1', target: 'node2', name: 'edge1' }] }"
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_organization_chart",
                        "description": "Generate an organization chart to visualize the hierarchical structure of an organization, such as, a diagram showing the relationship between a CEO and their direct reports.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "children": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    },
                                                    "children": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "description": {
                                                                    "type": "string"
                                                                },
                                                                "children": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "description": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "name"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "required": [
                                                    "name"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "name"
                                    ],
                                    "description": "Data for organization chart which is a hierarchical structure, such as, { name: 'CEO', description: 'Chief Executive Officer', children: [{ name: 'CTO', description: 'Chief Technology Officer', children: [{ name: 'Dev Manager', description: 'Development Manager' }] }] }, and the maximum depth is 3."
                                },
                                "orient": {
                                    "type": "string",
                                    "enum": [
                                        "horizontal",
                                        "vertical"
                                    ],
                                    "default": "vertical",
                                    "description": "Orientation of the organization chart, either horizontal or vertical. Default is vertical, when the level of the chart is more than 3, it is recommended to use horizontal orientation."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_path_map",
                        "description": "Generate a route map to display the user's planned route, such as travel guide routes.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string",
                                    "description": "The map title should not exceed 16 characters. The content should be consistent with the information the map wants to convey and should be accurate, rich, creative, and attractive."
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 1,
                                                "description": "A list of keywords for the names of points of interest (POIs) in Chinese. These POIs usually contain a group of places with similar locations, so the names should be more descriptive, must adding attributives to indicate that they are different places in the same area, such as \"北京市\" is better than \"北京\", \"杭州西湖\" is better than \"西湖\"; in addition, if you can determine that a location may appear in multiple areas, you can be more specific, such as \"杭州西湖的苏堤春晓\" is better than \"苏堤春晓\". The tool will use these keywords to search for specific POIs and query their detailed data, such as latitude and longitude, location photos, etc. For example, [\"西安钟楼\", \"西安大唐不夜城\", \"西安大雁塔\"]."
                                            }
                                        },
                                        "required": [
                                            "data"
                                        ],
                                        "description": "The route and places along it."
                                    },
                                    "minItems": 1,
                                    "description": "Routes, each group represents all POIs along a route. For example, [{ \"data\": [\"西安钟楼\", \"西安大唐不夜城\", \"西安大雁塔\"] }, { \"data\": [\"西安曲江池公园\", \"西安回民街\"] }]"
                                },
                                "width": {
                                    "type": "number",
                                    "default": 1600,
                                    "description": "Set the width of map, default is 1600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 1000,
                                    "description": "Set the height of map, default is 1000."
                                }
                            },
                            "required": [
                                "title",
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_pie_chart",
                        "description": "Generate a pie chart to show the proportion of parts, such as, market share and budget allocation.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "category": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "category",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for pie chart, it should be an array of objects, each object contains a `category` field and a `value` field, such as, [{ category: '分类一', value: 27 }]."
                                },
                                "innerRadius": {
                                    "type": "number",
                                    "default": 0,
                                    "description": "Set the innerRadius of pie chart, the value between 0 and 1. Set the pie chart as a donut chart. Set the value to 0.6 or number in [0 ,1] to enable it."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_pin_map",
                        "description": "Generate a point map to display the location and distribution of point data on the map, such as the location distribution of attractions, hospitals, supermarkets, etc.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string",
                                    "description": "The map title should not exceed 16 characters. The content should be consistent with the information the map wants to convey and should be accurate, rich, creative, and attractive."
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "minItems": 1,
                                    "description": "A list of keywords for the names of points of interest (POIs) in Chinese. These POIs usually contain a group of places with similar locations, so the names should be more descriptive, must adding attributives to indicate that they are different places in the same area, such as \"北京市\" is better than \"北京\", \"杭州西湖\" is better than \"西湖\"; in addition, if you can determine that a location may appear in multiple areas, you can be more specific, such as \"杭州西湖的苏堤春晓\" is better than \"苏堤春晓\". The tool will use these keywords to search for specific POIs and query their detailed data, such as latitude and longitude, location photos, etc. For example, [\"西安钟楼\", \"西安大唐不夜城\", \"西安大雁塔\"]."
                                },
                                "markerPopup": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "default": "image",
                                            "description": "Must be \"image\"."
                                        },
                                        "width": {
                                            "type": "number",
                                            "default": 40,
                                            "description": "Width of the photo."
                                        },
                                        "height": {
                                            "type": "number",
                                            "default": 40,
                                            "description": "Height of the photo."
                                        },
                                        "borderRadius": {
                                            "type": "number",
                                            "default": 8,
                                            "description": "Border radius of the photo."
                                        }
                                    },
                                    "description": "Marker type, one is simple mode, which is just an icon and does not require `markerPopup` configuration; the other is image mode, which displays location photos and requires `markerPopup` configuration. Among them, `width`/`height`/`borderRadius` can be combined to realize rectangular photos and square photos. In addition, when `borderRadius` is half of the width and height, it can also be a circular photo."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 1600,
                                    "description": "Set the width of map, default is 1600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 1000,
                                    "description": "Set the height of map, default is 1000."
                                }
                            },
                            "required": [
                                "title",
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_radar_chart",
                        "description": "Generate a radar chart to display multidimensional data (four dimensions or more), such as, evaluate Huawei and Apple phones in terms of five dimensions: ease of use, functionality, camera, benchmark scores, and battery life.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            },
                                            "group": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for radar chart, it should be an array of objects, each object contains a `name` field and a `value` field, such as, [{ name: 'Design', value: 70 }]."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_sankey_chart",
                        "description": "Generate a sankey chart to visualize the flow of data between different stages or categories, such as, the user journey from landing on a page to completing a purchase.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "source": {
                                                "type": "string"
                                            },
                                            "target": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "source",
                                            "target",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Date for sankey chart, such as, [{ source: 'Landing Page', target: 'Product Page', value: 50000 }, { source: 'Product Page', target: 'Add to Cart', value: 35000 }, { source: 'Add to Cart', target: 'Checkout', value: 25000 }, { source: 'Checkout', target: 'Payment', value: 15000 }, { source: 'Payment', target: 'Purchase Completed', value: 8000 }]."
                                },
                                "nodeAlign": {
                                    "type": "string",
                                    "enum": [
                                        "left",
                                        "right",
                                        "justify",
                                        "center"
                                    ],
                                    "default": "center",
                                    "description": "Alignment of nodes in the sankey chart, such as, 'left', 'right', 'justify', or 'center'."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_scatter_chart",
                        "description": "Generate a scatter chart to show the relationship between two variables, helps discover their relationship or trends, such as, the strength of correlation, data distribution patterns.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "x": {
                                                "type": "number"
                                            },
                                            "y": {
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "x",
                                            "y"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for scatter chart, such as, [{ x: 10, y: 15 }]."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                },
                                "axisXTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the x-axis title of chart."
                                },
                                "axisYTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the y-axis title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_treemap_chart",
                        "description": "Generate a treemap chart to display hierarchical data and can intuitively show comparisons between items at the same level, such as, show disk space usage with treemap.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            },
                                            "children": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "value": {
                                                            "type": "number"
                                                        },
                                                        "children": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name",
                                                                    "value"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    "required": [
                                                        "name",
                                                        "value"
                                                    ]
                                                }
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for treemap chart which is a hierarchical structure, such as, [{ name: 'Design', value: 70, children: [{ name: 'Tech', value: 20 }] }], and the maximum depth is 3."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_venn_chart",
                        "description": "Generate a Venn diagram to visualize the relationships between different sets, showing how they intersect and overlap, such as the commonalities and differences between various groups.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "label": {
                                                "type": "string",
                                                "description": "Label for the venn chart segment, such as 'A', 'B', or 'C'."
                                            },
                                            "value": {
                                                "type": "number",
                                                "description": "Value for the venn chart segment, such as 10, 20, or 30."
                                            },
                                            "sets": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "description": "Array of set names that this segment belongs to, such as ['A', 'B'] for an intersection between sets A and B."
                                            }
                                        },
                                        "required": [
                                            "value",
                                            "sets"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for venn chart, such as, [{ label: 'A', value: 10, sets: ['A'] }, { label: 'B', value: 20, sets: ['B'] }, { label: 'C', value: 30, sets: ['C'] }, { label: 'AB', value: 5, sets: ['A', 'B'] }]."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_violin_chart",
                        "description": "Generate a violin chart to show data for statistical summaries among different categories, such as, comparing the distribution of data points across categories.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "category": {
                                                "type": "string",
                                                "description": "Category of the data point, such as '分类一'."
                                            },
                                            "value": {
                                                "type": "number",
                                                "description": "Value of the data point, such as 10."
                                            },
                                            "group": {
                                                "type": "string",
                                                "description": "Optional group for the data point, used for grouping in the violin chart."
                                            }
                                        },
                                        "required": [
                                            "category",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for violin chart, such as, [{ category: '分类一', value: 10 }] or [{ category: '分类二', value: 20, group: '组别一' }]."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                },
                                "axisXTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the x-axis title of chart."
                                },
                                "axisYTitle": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the y-axis title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "generate_word_cloud_chart",
                        "description": "Generate a word cloud chart to show word frequency or weight through text size variation, such as, analyzing common words in social media, reviews, or feedback.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "text": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "text",
                                            "value"
                                        ]
                                    },
                                    "minItems": 1,
                                    "description": "Data for word cloud chart, it should be an array of objects, each object contains a `text` field and a `value` field, such as, [{ value: 4.272, text: '形成' }]."
                                },
                                "style": {
                                    "type": "object",
                                    "properties": {
                                        "backgroundColor": {
                                            "type": "string",
                                            "description": "Background color of the chart, such as, '#fff'."
                                        },
                                        "palette": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Color palette for the chart, it is a collection of colors."
                                        },
                                        "texture": {
                                            "type": "string",
                                            "enum": [
                                                "default",
                                                "rough"
                                            ],
                                            "default": "default",
                                            "description": "Set the texture for the chart, optional, default is 'default'. 'rough' refers to hand-drawn style."
                                        }
                                    },
                                    "description": "Custom style configuration for the chart."
                                },
                                "theme": {
                                    "type": "string",
                                    "enum": [
                                        "default",
                                        "academy",
                                        "dark"
                                    ],
                                    "default": "default",
                                    "description": "Set the theme for the chart, optional, default is 'default'."
                                },
                                "width": {
                                    "type": "number",
                                    "default": 600,
                                    "description": "Set the width of chart, default is 600."
                                },
                                "height": {
                                    "type": "number",
                                    "default": 400,
                                    "description": "Set the height of chart, default is 400."
                                },
                                "title": {
                                    "type": "string",
                                    "default": "",
                                    "description": "Set the title of chart."
                                }
                            },
                            "required": [
                                "data"
                            ],
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Met Museum MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides access to the Metropolitan Museum of Art Collection through natural language interactions. This server allows AI models to search The Met's art collection and have art works available as a Resource.",
        "web": "https://github.com/mikechao/metmuseum-mcp",
        "config": {
            "mcpServers": {
                "met-museum": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "metmuseum-mcp"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "met-museum": {
                "server_name": "met-museum",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "list-departments",
                        "description": "List all departments in the Metropolitan Museum of Art (Met Museum)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "__intent": {
                                    "type": "string",
                                    "description": "In ≤ 30 words, describe why you are calling this tool and how its result advances your overall task. Don't use first-person pronouns like \"I\" or \"my\". Make sure to give a gist of the whole task and how this tool fits into it."
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#",
                            "required": [
                                "__intent"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "search-museum-objects",
                        "description": "Search for objects in the Metropolitan Museum of Art (Met Museum). Will return Total objects found, followed by a list of Object Ids.The parameter title should be set to true if you want to search for objects by title.The parameter hasImages is false by default, but can be set to true to return objects without images.If the parameter hasImages is true, the parameter title should be false.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "q": {
                                    "type": "string",
                                    "description": "The search query, Returns a listing of all Object IDs for objects that contain the search query within the object's data"
                                },
                                "hasImages": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Only returns objects that have images"
                                },
                                "title": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "This should be set to true if you want to search for objects by title"
                                },
                                "departmentId": {
                                    "type": "number",
                                    "description": "Returns objects that are in the specified department. The departmentId should come from the 'list-departments' tool."
                                },
                                "__intent": {
                                    "type": "string",
                                    "description": "In ≤ 30 words, describe why you are calling this tool and how its result advances your overall task. Don't use first-person pronouns like \"I\" or \"my\". Make sure to give a gist of the whole task and how this tool fits into it."
                                }
                            },
                            "required": [
                                "q",
                                "__intent"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-museum-object",
                        "description": "Get a museum object by its ID, from the Metropolitan Museum of Art Collection",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "objectId": {
                                    "type": "number",
                                    "description": "The ID of the museum object to retrieve"
                                },
                                "returnImage": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "Whether to return the image (if available) of the object and add it to the server resources"
                                },
                                "__intent": {
                                    "type": "string",
                                    "description": "In ≤ 30 words, describe why you are calling this tool and how its result advances your overall task. Don't use first-person pronouns like \"I\" or \"my\". Make sure to give a gist of the whole task and how this tool fits into it."
                                }
                            },
                            "required": [
                                "objectId",
                                "__intent"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "mcp-github-trending MCP Server",
        "organization": "hetaoBackend",
        "description": "A MCP server that provides access to GitHub trending repositories and developers data through a simple API interface.",
        "web": "https://github.com/hetaoBackend/mcp-github-trending",
        "config": {
            "mcpServers": {
                "mcp-github-trending": {
                    "command": "uvx",
                    "args": [
                        "mcp-github-trending"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "mcp-github-trending": {
                "server_name": "mcp-github-trending",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_github_trending_repositories",
                        "description": "Get trending repositories on github",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "language": {
                                    "type": "string",
                                    "description": "Language to filter repositories by"
                                },
                                "since": {
                                    "type": "string",
                                    "description": "Time period to filter repositories by",
                                    "enum": [
                                        "daily",
                                        "weekly",
                                        "monthly"
                                    ]
                                },
                                "spoken_language": {
                                    "type": "string",
                                    "description": "Spoken language to filter repositories by"
                                }
                            }
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_github_trending_developers",
                        "description": "Get trending developers on github",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "language": {
                                    "type": "string",
                                    "description": "Language to filter repositories by"
                                },
                                "since": {
                                    "type": "string",
                                    "description": "Time period to filter repositories by",
                                    "enum": [
                                        "daily",
                                        "weekly",
                                        "monthly"
                                    ]
                                },
                                "spoken_language": {
                                    "type": "string",
                                    "description": "Spoken language to filter repositories by"
                                }
                            }
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Bazi MCP (八字 MCP) by Cantian AI",
        "organization": "cantian-ai",
        "description": "Unlock precise Bazi insights with the Bazi MCP, the first AI-powered Bazi calculator. Built to address inaccuracies in existing AI fortune-telling tools like GPT and DeepSeek, our MCP delivers reliable Bazi data for personality analysis, destiny forecasting, and more.",
        "web": "https://github.com/cantian-ai/bazi-mcp",
        "config": {
            "mcpServers": {
                "Bazi": {
                    "command": "npx",
                    "args": [
                        "bazi-mcp"
                    ]
                }
            }
        },
        "category": "Entertainment",
        "tools": {
            "Bazi": {
                "server_name": "Bazi",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "getBaziDetail",
                        "description": "根据时间（公历或农历）、性别来获取八字信息。solarDatetime和lunarDatetime必须传且只传其中一个。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "solarDatetime": {
                                    "type": "string",
                                    "description": "用ISO时间格式表示的公历时间. 例如：`2008-03-01T13:00:00+08:00`。"
                                },
                                "lunarDatetime": {
                                    "type": "string",
                                    "description": "农历时间。例如农历2000年5月初五中午12点整表示为：`2000-5-5 12:00:00`。"
                                },
                                "gender": {
                                    "type": "number",
                                    "description": "传0表示女性，传1表示男性。"
                                },
                                "eightCharProviderSect": {
                                    "type": "number",
                                    "default": 2,
                                    "description": "早晚子时配置。传1表示23:00-23:59日干支为明天，传2表示23:00-23:59日干支为当天。"
                                }
                            },
                            "required": [
                                "gender"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "getSolarTimes",
                        "description": "根据八字获取公历时间列表。返回的时间格式为：YYYY-MM-DD hh:mm:ss。例如时间1998年7月31日下午2点整表示为：1998-07-31 14:00:00",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "bazi": {
                                    "type": "string",
                                    "description": "八字，按年柱、月柱、日柱、时柱顺序，用空格隔开。例如：戊寅 己未 己卯 辛未"
                                }
                            },
                            "required": [
                                "bazi"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "getChineseCalendar",
                        "description": "获取指定公历时间（默认今天）的黄历信息。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "solarDatetime": {
                                    "type": "string",
                                    "description": "用ISO时间格式表示的公历时间. 例如：`2008-03-01T13:00:00+08:00`。"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "buildBaziFromLunarDatetime",
                        "description": "根据农历时间、性别来获取八字信息。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "lunarDatetime": {
                                    "type": "string",
                                    "description": "农历时间。例如：`2000-5-15 12:00:00`。"
                                },
                                "gender": {
                                    "type": "number",
                                    "description": "传0表示女性，传1表示男性。"
                                },
                                "eightCharProviderSect": {
                                    "type": "number",
                                    "default": 2,
                                    "description": "早晚子时配置。传1表示23:00-23:59日干支为明天，传2表示23:00-23:59日干支为当天。"
                                }
                            },
                            "required": [
                                "lunarDatetime",
                                "gender"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "buildBaziFromSolarDatetime",
                        "description": "根据阳历时间、性别来获取八字信息。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "solarDatetime": {
                                    "type": "string",
                                    "description": "用ISO时间格式表示的阳历时间. 例如：`2008-03-01T13:00:00+08:00`。"
                                },
                                "gender": {
                                    "type": "number",
                                    "description": "传0表示女性，传1表示男性。"
                                },
                                "eightCharProviderSect": {
                                    "type": "number",
                                    "default": 2,
                                    "description": "早晚子时配置。传1表示23:00-23:59日干支为明天，传2表示23:00-23:59日干支为当天。"
                                }
                            },
                            "required": [
                                "solarDatetime",
                                "gender"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "鸣潮 MCP Server",
        "description": "一个 Model Context Protocol (MCP) 服务器，用于获取《鸣潮》游戏的角色和声骸信息，并以 Markdown 格式返回，方便大型语言模型使用。",
        "web": "https://github.com/jacksmith3888/wuwa-mcp-server",
        "config": {
            "mcpServers": {
                "wuwa-mcp": {
                    "command": "uvx",
                    "args": [
                        "wuwa-mcp-server"
                    ]
                }
            }
        },
        "category": "Entertainment",
        "tools": {
            "wuwa-mcp": {
                "server_name": "wuwa-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_artifact_info",
                        "description": "获取库街区上的声骸详细信息并以 Markdown 格式返回。\n\nArgs:\n    artifact_name: 要查询的声骸套装的中文名称。\n\nReturns:\n    包含声骸信息的 Markdown 字符串，\n    或者在找不到声骸或获取数据失败时返回错误消息。\n",
                        "inputSchema": {
                            "properties": {
                                "artifact_name": {
                                    "title": "Artifact Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "artifact_name"
                            ],
                            "title": "get_artifact_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_artifact_infoOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_character_info",
                        "description": "获取库街区上的角色详细信息包括角色技能，养成攻略等，并以 Markdown 格式返回。\n\nArgs:\n    character_name: 要查询的角色的中文名称。\n\nReturns:\n    包含角色信息的 Markdown 字符串，\n    或者在找不到角色或获取数据失败时返回错误消息。\n",
                        "inputSchema": {
                            "properties": {
                                "character_name": {
                                    "title": "Character Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "character_name"
                            ],
                            "title": "get_character_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_character_infoOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_character_profile",
                        "description": "获取库街区上的角色档案信息并以 Markdown 格式返回。\n\nArgs:\n    character_name: 要查询的角色的中文名称。\n\nReturns:\n    包含角色档案信息的 Markdown 字符串，\n    或者在找不到角色或获取数据失败时返回错误消息。\n",
                        "inputSchema": {
                            "properties": {
                                "character_name": {
                                    "title": "Character Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "character_name"
                            ],
                            "title": "get_character_profileArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_character_profileOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "kospi-kosdaq-stock-server",
        "organization": "dragon1086",
        "description": "An MCP server that provides KOSPI/KOSDAQ stock data using FastMCP.",
        "web": "https://github.com/dragon1086/kospi-kosdaq-stock-server",
        "config": {
            "mcpServers": {
                "kospi-kosdaq": {
                    "command": "uvx",
                    "args": [
                        "kospi_kosdaq_stock_server"
                    ]
                }
            }
        },
        "category": "Finance",
        "tools": {
            "kospi-kosdaq": {
                "server_name": "kospi-kosdaq",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "load_all_tickers",
                        "description": "Loads all ticker symbols and names for KOSPI and KOSDAQ into memory.\n\nReturns:\n    Dict[str, str]: A dictionary mapping tickers to stock names.\n    Example: {\"005930\": \"삼성전자\", \"035720\": \"카카오\", ...}\n",
                        "inputSchema": {
                            "properties": {},
                            "title": "load_all_tickersArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "load_all_tickersOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_stock_ohlcv",
                        "description": "Retrieves OHLCV (Open/High/Low/Close/Volume) data for a specific stock.\n\nArgs:\n    fromdate (str): Start date for retrieval (YYYYMMDD)\n    todate   (str): End date for retrieval (YYYYMMDD)\n    ticker   (str): Stock ticker symbol\n    adjusted (bool, optional): Whether to use adjusted prices (True: adjusted, False: unadjusted). Defaults to True.\n\nReturns:\n    DataFrame:\n        >> get_stock_ohlcv(\"20210118\", \"20210126\", \"005930\")\n                        Open     High     Low    Close   Volume\n        Date\n        2021-01-26  89500  94800  89500  93800  46415214\n        2021-01-25  87300  89400  86800  88700  25577517\n        2021-01-22  89000  89700  86800  86800  30861661\n        2021-01-21  87500  88600  86500  88100  25318011\n        2021-01-20  89000  89000  86500  87200  25211127\n        2021-01-19  84500  88000  83600  87000  39895044\n        2021-01-18  86600  87300  84100  85000  43227951\n",
                        "inputSchema": {
                            "properties": {
                                "fromdate": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Fromdate"
                                },
                                "todate": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Todate"
                                },
                                "ticker": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Ticker"
                                },
                                "adjusted": {
                                    "default": true,
                                    "title": "Adjusted",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "fromdate",
                                "todate",
                                "ticker"
                            ],
                            "title": "get_stock_ohlcvArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_stock_ohlcvOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_stock_market_cap",
                        "description": "Retrieves market capitalization data for a specific stock.\n\nArgs:\n    fromdate (str): Start date for retrieval (YYYYMMDD)\n    todate   (str): End date for retrieval (YYYYMMDD)\n    ticker   (str): Stock ticker symbol\n\nReturns:\n    DataFrame:\n        >> get_stock_market_cap(\"20150720\", \"20150724\", \"005930\")\n                          Market Cap  Volume      Trading Value  Listed Shares\n        Date\n        2015-07-24  181030885173000  196584  241383636000  147299337\n        2015-07-23  181767381858000  208965  259446564000  147299337\n        2015-07-22  184566069261000  268323  333813094000  147299337\n        2015-07-21  186039062631000  194055  244129106000  147299337\n        2015-07-20  187806654675000  128928  165366199000  147299337\n",
                        "inputSchema": {
                            "properties": {
                                "fromdate": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Fromdate"
                                },
                                "todate": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Todate"
                                },
                                "ticker": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Ticker"
                                }
                            },
                            "required": [
                                "fromdate",
                                "todate",
                                "ticker"
                            ],
                            "title": "get_stock_market_capArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_stock_market_capOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_stock_fundamental",
                        "description": "Retrieves fundamental data (PER/PBR/Dividend Yield) for a specific stock.\n\nArgs:\n    fromdate (str): Start date for retrieval (YYYYMMDD)\n    todate   (str): End date for retrieval (YYYYMMDD)\n    ticker   (str): Stock ticker symbol\n\nReturns:\n    DataFrame:\n        >> get_stock_fundamental(\"20210104\", \"20210108\", \"005930\")\n                          BPS        PER       PBR   EPS       DIV   DPS\n            Date\n            2021-01-08  37528  28.046875  2.369141  3166  1.589844  1416\n            2021-01-07  37528  26.187500  2.210938  3166  1.709961  1416\n            2021-01-06  37528  25.953125  2.189453  3166  1.719727  1416\n            2021-01-05  37528  26.500000  2.240234  3166  1.690430  1416\n            2021-01-04  37528  26.218750  2.210938  3166  1.709961  1416\n",
                        "inputSchema": {
                            "properties": {
                                "fromdate": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Fromdate"
                                },
                                "todate": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Todate"
                                },
                                "ticker": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Ticker"
                                }
                            },
                            "required": [
                                "fromdate",
                                "todate",
                                "ticker"
                            ],
                            "title": "get_stock_fundamentalArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_stock_fundamentalOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_stock_trading_volume",
                        "description": "Retrieves trading volume by investor type for a specific stock.\n\nArgs:\n    fromdate (str): Start date for retrieval (YYYYMMDD)\n    todate   (str): End date for retrieval (YYYYMMDD)\n    ticker   (str): Stock ticker symbol\n\nReturns:\n    DataFrame with columns:\n    - Volume (Sell/Buy/Net Buy)\n    - Trading Value (Sell/Buy/Net Buy)\n    Broken down by investor types (Financial Investment, Insurance, Trust, etc.)\n",
                        "inputSchema": {
                            "properties": {
                                "fromdate": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Fromdate"
                                },
                                "todate": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Todate"
                                },
                                "ticker": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "title": "Ticker"
                                }
                            },
                            "required": [
                                "fromdate",
                                "todate",
                                "ticker"
                            ],
                            "title": "get_stock_trading_volumeArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_stock_trading_volumeOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "mcp-simple-arxiv",
        "description": "An MCP server that provides access to arXiv papers through their API.",
        "web": "https://github.com/andybrandt/mcp-simple-arxiv",
        "config": {
            "mcpServers": {
                "mcp-simple-arxiv": {
                    "command": "uvx",
                    "args": [
                        "mcp-simple-arxiv==0.2.3",
                        "mcp-simple-arxiv"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "mcp-simple-arxiv": {
                "server_name": "mcp-simple-arxiv",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "search_papers",
                        "description": "Search for papers on arXiv by title and abstract content.\n            \nYou can use advanced search syntax:\n- Search in title: ti:\"search terms\"\n- Search in abstract: abs:\"search terms\"\n- Search by author: au:\"author name\"\n- Combine terms with: AND, OR, ANDNOT\n- Filter by category: cat:cs.AI (use list_categories tool to see available categories)\n\nExamples:\n- \"machine learning\"  (searches all fields)\n- ti:\"neural networks\" AND cat:cs.AI  (title with category)\n- au:bengio AND ti:\"deep learning\"  (author and title)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "Search query to match against paper titles and abstracts"
                                },
                                "max_results": {
                                    "type": "number",
                                    "description": "Maximum number of results to return (default: 10)",
                                    "minimum": 1,
                                    "maximum": 50
                                }
                            },
                            "required": [
                                "query"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_paper_data",
                        "description": "Get detailed information about a specific paper including abstract and available formats",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "paper_id": {
                                    "type": "string",
                                    "description": "arXiv paper ID (e.g., '2103.08220')"
                                }
                            },
                            "required": [
                                "paper_id"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "list_categories",
                        "description": "List all available arXiv categories and how to use them in search",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "primary_category": {
                                    "type": "string",
                                    "description": "Optional: filter by primary category (e.g., 'cs' for Computer Science)"
                                }
                            }
                        },
                        "annotations": null
                    },
                    {
                        "name": "update_categories",
                        "description": "Update the stored category taxonomy by fetching the latest version from arxiv.org",
                        "inputSchema": {
                            "type": "object",
                            "properties": {}
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Yahoo Finance MCP Server",
        "description": "A simple MCP server for Yahoo Finance using yfinance. This server provides a set of tools to fetch stock data, news, and other financial information.",
        "web": "https://github.com/narumiruna/yfinance-mcp",
        "config": {
            "mcpServers": {
                "yfmcp": {
                    "command": "uvx",
                    "args": [
                        "yfmcp@latest"
                    ]
                }
            }
        },
        "category": "Finance",
        "tools": {
            "yfmcp": {
                "server_name": "yfmcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_ticker_info",
                        "description": "Retrieve stock data including company info, financials, trading metrics and governance data.",
                        "inputSchema": {
                            "properties": {
                                "symbol": {
                                    "description": "The stock symbol",
                                    "title": "Symbol",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "symbol"
                            ],
                            "title": "get_ticker_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_ticker_infoOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_ticker_news",
                        "description": "Fetches recent news articles related to a specific stock symbol with title, content, and source details.",
                        "inputSchema": {
                            "properties": {
                                "symbol": {
                                    "description": "The stock symbol",
                                    "title": "Symbol",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "symbol"
                            ],
                            "title": "get_ticker_newsArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_ticker_newsOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "search",
                        "description": "Fetches and organizes search results from Yahoo Finance, including stock quotes and news articles.",
                        "inputSchema": {
                            "properties": {
                                "query": {
                                    "description": "The search query (ticker symbol or company name)",
                                    "title": "Query",
                                    "type": "string"
                                },
                                "search_type": {
                                    "description": "Type of search results to retrieve",
                                    "enum": [
                                        "all",
                                        "quotes",
                                        "news"
                                    ],
                                    "title": "Search Type",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "query",
                                "search_type"
                            ],
                            "title": "searchArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "searchOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_top",
                        "description": "Get top entities (ETFs, mutual funds, companies, growth companies, or performing companies) in a sector.",
                        "inputSchema": {
                            "properties": {
                                "sector": {
                                    "description": "The sector to get",
                                    "enum": [
                                        "basic-materials",
                                        "communication-services",
                                        "consumer-cyclical",
                                        "consumer-defensive",
                                        "energy",
                                        "financial-services",
                                        "healthcare",
                                        "industrials",
                                        "real-estate",
                                        "technology",
                                        "utilities"
                                    ],
                                    "title": "Sector",
                                    "type": "string"
                                },
                                "top_type": {
                                    "description": "Type of top companies to retrieve",
                                    "enum": [
                                        "top_etfs",
                                        "top_mutual_funds",
                                        "top_companies",
                                        "top_growth_companies",
                                        "top_performing_companies"
                                    ],
                                    "title": "Top Type",
                                    "type": "string"
                                },
                                "top_n": {
                                    "default": 10,
                                    "description": "Number of top entities to retrieve (limit the results)",
                                    "title": "Top N",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "sector",
                                "top_type"
                            ],
                            "title": "get_topArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_topOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_price_history",
                        "description": "Fetch historical price data for a given stock symbol over a specified period and interval.",
                        "inputSchema": {
                            "properties": {
                                "symbol": {
                                    "description": "The stock symbol",
                                    "title": "Symbol",
                                    "type": "string"
                                },
                                "period": {
                                    "default": "1mo",
                                    "description": "Time period to retrieve data for (e.g. '1d', '1mo', '1y')",
                                    "enum": [
                                        "1d",
                                        "5d",
                                        "1mo",
                                        "3mo",
                                        "6mo",
                                        "1y",
                                        "2y",
                                        "5y",
                                        "10y",
                                        "ytd",
                                        "max"
                                    ],
                                    "title": "Period",
                                    "type": "string"
                                },
                                "interval": {
                                    "default": "1d",
                                    "description": "Data interval frequency (e.g. '1d', '1h', '1m')",
                                    "enum": [
                                        "1m",
                                        "2m",
                                        "5m",
                                        "15m",
                                        "30m",
                                        "60m",
                                        "90m",
                                        "1h",
                                        "1d",
                                        "5d",
                                        "1wk",
                                        "1mo",
                                        "3mo"
                                    ],
                                    "title": "Interval",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "symbol"
                            ],
                            "title": "get_price_historyArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_price_historyOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Wikipedia MCP Server",
        "organization": "cablate",
        "description": "A Model Context Protocol (MCP) server that retrieves information from Wikipedia to provide context to Large Language Models (LLMs). This tool helps AI assistants access factual information from Wikipedia to ground their responses in reliable sources.",
        "web": "https://github.com/Rudra-ravi/wikipedia-mcp",
        "config": {
            "mcpServers": {
                "wikipedia": {
                    "command": "uvx",
                    "args": [
                        "wikipedia-mcp"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "wikipedia": {
                "server_name": "wikipedia",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "search_wikipedia",
                        "description": "Search Wikipedia for articles matching a query.",
                        "inputSchema": {
                            "properties": {
                                "query": {
                                    "title": "Query",
                                    "type": "string"
                                },
                                "limit": {
                                    "default": 10,
                                    "title": "Limit",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "query"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_article",
                        "description": "Get the full content of a Wikipedia article.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "title"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_summary",
                        "description": "Get a summary of a Wikipedia article.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "title"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "summarize_article_for_query",
                        "description": "Get a summary of a Wikipedia article tailored to a specific query.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                },
                                "query": {
                                    "title": "Query",
                                    "type": "string"
                                },
                                "max_length": {
                                    "default": 250,
                                    "title": "Max Length",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "title",
                                "query"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "summarize_article_section",
                        "description": "Get a summary of a specific section of a Wikipedia article.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                },
                                "section_title": {
                                    "title": "Section Title",
                                    "type": "string"
                                },
                                "max_length": {
                                    "default": 150,
                                    "title": "Max Length",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "title",
                                "section_title"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "extract_key_facts",
                        "description": "Extract key facts from a Wikipedia article, optionally focused on a topic.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                },
                                "topic_within_article": {
                                    "default": "",
                                    "title": "Topic Within Article",
                                    "type": "string"
                                },
                                "count": {
                                    "default": 5,
                                    "title": "Count",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "title"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_related_topics",
                        "description": "Get topics related to a Wikipedia article based on links and categories.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                },
                                "limit": {
                                    "default": 10,
                                    "title": "Limit",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "title"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_sections",
                        "description": "Get the sections of a Wikipedia article.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "title"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_links",
                        "description": "Get the links contained within a Wikipedia article.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "title"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_coordinates",
                        "description": "Get the coordinates of a Wikipedia article.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "title"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Time MCP Server",
        "organization": "modelcontextprotocol",
        "description": "A Model Context Protocol server that provides time and timezone conversion capabilities. This server enables LLMs to get current time information and perform timezone conversions using IANA timezone names, with automatic system timezone detection.",
        "web": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
        "config": {
            "mcpServers": {
                "time": {
                    "command": "uvx",
                    "args": [
                        "mcp-server-time",
                        "--local-timezone=America/New_York"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "time": {
                "server_name": "time",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_current_time",
                        "description": "Get current time in a specific timezones",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "timezone": {
                                    "type": "string",
                                    "description": "IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'America/New_York' as local timezone if no timezone provided by the user."
                                }
                            },
                            "required": [
                                "timezone"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "convert_time",
                        "description": "Convert time between timezones",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "source_timezone": {
                                    "type": "string",
                                    "description": "Source IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'America/New_York' as local timezone if no source timezone provided by the user."
                                },
                                "time": {
                                    "type": "string",
                                    "description": "Time to convert in 24-hour format (HH:MM)"
                                },
                                "target_timezone": {
                                    "type": "string",
                                    "description": "Target IANA timezone name (e.g., 'Asia/Tokyo', 'America/San_Francisco'). Use 'America/New_York' as local timezone if no target timezone provided by the user."
                                }
                            },
                            "required": [
                                "source_timezone",
                                "time",
                                "target_timezone"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "BioMCP: Biomedical Model Context Protocol",
        "organization": "genomoncology",
        "description": "BioMCP is an open source (MIT License) toolkit that empowers AI assistants and agents with specialized biomedical knowledge. Built following the Model Context Protocol (MCP), it connects AI systems to authoritative biomedical data sources, enabling them to answer questions about clinical trials, scientific literature, and genomic variants with precision and depth.",
        "web": "https://github.com/genomoncology/biomcp",
        "config": {
            "mcpServers": {
                "biomcp": {
                    "command": "uv",
                    "args": [
                        "run",
                        "--with",
                        "biomcp-python",
                        "biomcp",
                        "run"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "biomcp": {
                "server_name": "biomcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "search",
                        "description": "Search biomedical literature, clinical trials, genetic variants, genes, drugs, and diseases.\n\n    ⚠️ IMPORTANT: Have you used the 'think' tool first? If not, STOP and use it NOW!\n    The 'think' tool is REQUIRED for proper research planning and should be your FIRST step.\n\n    This tool provides access to biomedical data from PubMed/PubTator3, ClinicalTrials.gov,\n    MyVariant.info, and the BioThings suite (MyGene.info, MyChem.info, MyDisease.info).\n    It supports two search modes:\n\n    ## 1. UNIFIED QUERY LANGUAGE\n    Use the 'query' parameter with field-based syntax for precise cross-domain searches.\n\n    Syntax:\n    - Basic: \"gene:BRAF\"\n    - AND logic: \"gene:BRAF AND disease:melanoma\"\n    - OR logic: \"gene:PTEN AND (R173 OR Arg173 OR 'position 173')\"\n    - Domain-specific: \"trials.condition:melanoma AND trials.phase:3\"\n\n    Common fields:\n    - Cross-domain: gene, disease, variant, chemical/drug\n    - Articles: pmid, title, abstract, journal, author\n    - Trials: trials.condition, trials.intervention, trials.phase, trials.status\n    - Variants: variants.hgvs, variants.rsid, variants.significance\n\n    Example:\n    ```\n    await search(\n        query=\"gene:BRAF AND disease:melanoma AND trials.phase:3\",\n        max_results_per_domain=20\n    )\n    ```\n\n    ## 2. DOMAIN-SPECIFIC SEARCH\n    Use the 'domain' parameter with specific filters for targeted searches.\n\n    Domains:\n    - \"article\": Search PubMed/PubTator3 for research articles and preprints ABOUT genes, variants, diseases, or chemicals\n    - \"trial\": Search ClinicalTrials.gov for clinical studies\n    - \"variant\": Search MyVariant.info for genetic variant DATABASE RECORDS (population frequency, clinical significance, etc.) - NOT for articles about variants!\n    - \"gene\": Search MyGene.info for gene information (symbol, name, function, aliases)\n    - \"drug\": Search MyChem.info for drug/chemical information (names, formulas, indications)\n    - \"disease\": Search MyDisease.info for disease information (names, definitions, synonyms)\n    - \"nci_organization\": Search NCI database for cancer centers, hospitals, and research sponsors (requires API key)\n    - \"nci_intervention\": Search NCI database for drugs, devices, procedures used in cancer trials (requires API key)\n    - \"nci_biomarker\": Search NCI database for biomarkers used in trial eligibility criteria (requires API key)\n    - \"nci_disease\": Search NCI controlled vocabulary for cancer conditions and terms (requires API key)\n\n    Example:\n    ```\n    await search(\n        domain=\"article\",\n        genes=[\"BRAF\", \"NRAS\"],\n        diseases=[\"melanoma\"],\n        page_size=50\n    )\n    ```\n\n    ## DOMAIN SELECTION EXAMPLES:\n    - To find ARTICLES about BRAF V600E mutation: domain=\"article\", genes=[\"BRAF\"], variants=[\"V600E\"]\n    - To find VARIANT DATA for BRAF mutations: domain=\"variant\", gene=\"BRAF\"\n    - To find articles about ERBB2 p.D277Y: domain=\"article\", genes=[\"ERBB2\"], variants=[\"p.D277Y\"]\n    - Common mistake: Using domain=\"variant\" when you want articles about a variant\n\n    ## IMPORTANT NOTES:\n    - For complex research questions, use the separate 'think' tool for systematic analysis\n    - The tool returns results in OpenAI MCP format: {\"results\": [{\"id\", \"title\", \"text\", \"url\"}, ...]}\n    - Search results do NOT include metadata (per OpenAI MCP specification)\n    - Use the fetch tool to get detailed metadata for specific records\n    - Use get_schema=True to explore available search fields\n    - Use explain_query=True to understand query parsing (unified mode)\n    - Domain-specific searches use AND logic for multiple values\n    - For OR logic, use the unified query language\n    - NEW: Article search keywords support OR with pipe separator: \"R173|Arg173|p.R173\"\n    - Remember: domain=\"article\" finds LITERATURE, domain=\"variant\" finds DATABASE RECORDS\n\n    ## RETURN FORMAT:\n    All search modes return results in this format:\n    ```json\n    {\n        \"results\": [\n            {\n                \"id\": \"unique_identifier\",\n                \"title\": \"Human-readable title\",\n                \"text\": \"Summary or snippet of content\",\n                \"url\": \"Link to full resource\"\n            }\n        ]\n    }\n    ```\n    ",
                        "inputSchema": {
                            "properties": {
                                "query": {
                                    "title": "Query",
                                    "type": "string"
                                },
                                "call_benefit": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Brief explanation of why this search is being performed and expected benefit. Helps improve search accuracy and provides context for analytics. Highly recommended for better results.",
                                    "title": "Call Benefit"
                                },
                                "domain": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "article",
                                                "trial",
                                                "variant",
                                                "gene",
                                                "drug",
                                                "disease",
                                                "nci_organization",
                                                "nci_intervention",
                                                "nci_biomarker",
                                                "nci_disease",
                                                "fda_adverse",
                                                "fda_label",
                                                "fda_device",
                                                "fda_approval",
                                                "fda_recall",
                                                "fda_shortage"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Domain to search: 'article' for papers/literature ABOUT genes/variants/diseases, 'trial' for clinical studies, 'variant' for genetic variant DATABASE RECORDS, 'gene' for gene information from MyGene.info, 'drug' for drug/chemical information from MyChem.info, 'disease' for disease information from MyDisease.info, 'nci_organization' for NCI cancer centers/sponsors, 'nci_intervention' for NCI drugs/devices/procedures, 'nci_biomarker' for NCI trial eligibility biomarkers, 'nci_disease' for NCI cancer vocabulary, 'fda_adverse' for FDA adverse event reports, 'fda_label' for FDA drug labels, 'fda_device' for FDA device events, 'fda_approval' for FDA drug approvals, 'fda_recall' for FDA drug recalls, 'fda_shortage' for FDA drug shortages",
                                    "title": "Domain"
                                },
                                "genes": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Genes"
                                },
                                "diseases": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Diseases"
                                },
                                "variants": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Variants"
                                },
                                "chemicals": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Chemicals"
                                },
                                "keywords": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Keywords"
                                },
                                "conditions": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Conditions"
                                },
                                "interventions": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Interventions"
                                },
                                "recruiting_status": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Recruiting Status"
                                },
                                "phase": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Phase"
                                },
                                "significance": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Significance"
                                },
                                "lat": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Lat"
                                },
                                "long": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Long"
                                },
                                "distance": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Distance"
                                },
                                "page": {
                                    "default": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 10,
                                    "title": "Page Size",
                                    "type": "integer"
                                },
                                "max_results_per_domain": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Max Results Per Domain"
                                },
                                "explain_query": {
                                    "default": false,
                                    "title": "Explain Query",
                                    "type": "boolean"
                                },
                                "get_schema": {
                                    "default": false,
                                    "title": "Get Schema",
                                    "type": "boolean"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "NCI API key for searching NCI domains (nci_organization, nci_intervention, nci_biomarker, nci_disease). Required for NCI searches. Get a free key at: https://clinicaltrialsapi.cancer.gov/",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "query"
                            ],
                            "title": "searchArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "fetch",
                        "description": "Fetch comprehensive details for a specific biomedical record.\n\n    This tool retrieves full information for articles, clinical trials, genetic variants,\n    genes, drugs, or diseases using their unique identifiers. It returns data in a\n    standardized format suitable for detailed analysis and research.\n\n    ## IDENTIFIER FORMATS:\n    - Articles: PMID (PubMed ID) - e.g., \"35271234\" OR DOI - e.g., \"10.1101/2024.01.20.23288905\"\n    - Trials: NCT ID (ClinicalTrials.gov ID) - e.g., \"NCT04280705\"\n    - Variants: HGVS notation or dbSNP ID - e.g., \"chr7:g.140453136A>T\" or \"rs121913254\"\n    - Genes: Gene symbol or Entrez ID - e.g., \"BRAF\" or \"673\"\n    - Drugs: Drug name or ID - e.g., \"imatinib\" or \"DB00619\"\n    - Diseases: Disease name or ID - e.g., \"melanoma\" or \"MONDO:0005105\"\n    - NCI Organizations: NCI organization ID - e.g., \"NCI-2011-03337\"\n    - NCI Interventions: NCI intervention ID - e.g., \"INT123456\"\n    - NCI Diseases: NCI disease ID - e.g., \"C4872\"\n\n    The domain is automatically detected from the ID format if not provided:\n    - NCT* → trial\n    - Contains \"/\" with numeric prefix (DOI) → article\n    - Pure numeric → article (PMID)\n    - rs* or contains ':' or 'g.' → variant\n    - For genes, drugs, diseases: manual specification recommended\n\n    ## DOMAIN-SPECIFIC OPTIONS:\n\n    ### Articles (domain=\"article\"):\n    - Returns full article metadata, abstract, and full text when available\n    - Supports both PubMed articles (via PMID) and Europe PMC preprints (via DOI)\n    - Includes annotations for genes, diseases, chemicals, and variants (PubMed only)\n    - detail=\"full\" attempts to retrieve full text content (PubMed only)\n\n    ### Clinical Trials (domain=\"trial\"):\n    - detail=None or \"protocol\": Core study information\n    - detail=\"locations\": Study sites and contact information\n    - detail=\"outcomes\": Primary/secondary outcomes and results\n    - detail=\"references\": Related publications and citations\n    - detail=\"all\": Complete trial record with all sections\n\n    ### Variants (domain=\"variant\"):\n    - Returns comprehensive variant information including:\n      - Clinical significance and interpretations\n      - Population frequencies\n      - Gene/protein effects\n      - External database links\n    - detail parameter is ignored (always returns full data)\n\n    ### Genes (domain=\"gene\"):\n    - Returns gene information from MyGene.info including:\n      - Gene symbol, name, and type\n      - Entrez ID and Ensembl IDs\n      - Gene summary and aliases\n      - RefSeq information\n    - detail parameter is ignored (always returns full data)\n\n    ### Drugs (domain=\"drug\"):\n    - Returns drug/chemical information from MyChem.info including:\n      - Drug name and trade names\n      - Chemical formula and structure IDs\n      - Clinical indications\n      - Mechanism of action\n      - External database links (DrugBank, PubChem, ChEMBL)\n    - detail parameter is ignored (always returns full data)\n\n    ### Diseases (domain=\"disease\"):\n    - Returns disease information from MyDisease.info including:\n      - Disease name and definition\n      - MONDO ontology ID\n      - Disease synonyms\n      - Cross-references to other databases\n      - Associated phenotypes\n    - detail parameter is ignored (always returns full data)\n\n    ### NCI Organizations (domain=\"nci_organization\"):\n    - Returns organization information from NCI database including:\n      - Organization name and type\n      - Full address and contact information\n      - Research focus areas\n      - Associated clinical trials\n    - Requires NCI API key\n    - detail parameter is ignored (always returns full data)\n\n    ### NCI Interventions (domain=\"nci_intervention\"):\n    - Returns intervention information from NCI database including:\n      - Intervention name and type\n      - Synonyms and alternative names\n      - Mechanism of action (for drugs)\n      - FDA approval status\n      - Associated clinical trials\n    - Requires NCI API key\n    - detail parameter is ignored (always returns full data)\n\n    ### NCI Diseases (domain=\"nci_disease\"):\n    - Returns disease information from NCI controlled vocabulary including:\n      - Preferred disease name\n      - Disease category and classification\n      - All known synonyms\n      - Cross-reference codes (ICD, SNOMED)\n    - Requires NCI API key\n    - detail parameter is ignored (always returns full data)\n\n    ## RETURN FORMAT:\n    All fetch operations return a standardized format:\n    ```json\n    {\n        \"id\": \"unique_identifier\",\n        \"title\": \"Record title or name\",\n        \"text\": \"Full content or comprehensive description\",\n        \"url\": \"Link to original source\",\n        \"metadata\": {\n            // Domain-specific additional fields\n        }\n    }\n    ```\n\n    ## EXAMPLES:\n\n    Fetch article by PMID (domain auto-detected):\n    ```\n    await fetch(id=\"35271234\")\n    ```\n\n    Fetch article by DOI (domain auto-detected):\n    ```\n    await fetch(id=\"10.1101/2024.01.20.23288905\")\n    ```\n\n    Fetch complete trial information (domain auto-detected):\n    ```\n    await fetch(\n        id=\"NCT04280705\",\n        detail=\"all\"\n    )\n    ```\n\n    Fetch variant with clinical interpretations:\n    ```\n    await fetch(id=\"rs121913254\")\n    ```\n\n    Explicitly specify domain (optional):\n    ```\n    await fetch(\n        domain=\"variant\",\n        id=\"chr7:g.140453136A>T\"\n    )\n    ```\n    ",
                        "inputSchema": {
                            "properties": {
                                "id": {
                                    "title": "Id",
                                    "type": "string"
                                },
                                "domain": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "article",
                                                "trial",
                                                "variant",
                                                "gene",
                                                "drug",
                                                "disease",
                                                "nci_organization",
                                                "nci_intervention",
                                                "nci_biomarker",
                                                "nci_disease",
                                                "fda_adverse",
                                                "fda_label",
                                                "fda_device",
                                                "fda_approval",
                                                "fda_recall",
                                                "fda_shortage"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Domain of the record (auto-detected if not provided)",
                                    "title": "Domain"
                                },
                                "call_benefit": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Brief explanation of why this fetch is being performed and expected benefit. Helps provide context for analytics and improves result relevance.",
                                    "title": "Call Benefit"
                                },
                                "detail": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "protocol",
                                                "locations",
                                                "outcomes",
                                                "references",
                                                "all",
                                                "full"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Detail"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "NCI API key for fetching NCI records (nci_organization, nci_intervention, nci_disease). Required for NCI fetches. Get a free key at: https://clinicaltrialsapi.cancer.gov/",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "id"
                            ],
                            "title": "fetchArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "think",
                        "description": "REQUIRED FIRST STEP: Perform structured sequential thinking for ANY biomedical research task.\n\n    🚨 IMPORTANT: You MUST use this tool BEFORE any search or fetch operations when:\n    - Researching ANY biomedical topic (genes, diseases, variants, trials)\n    - Planning to use multiple BioMCP tools\n    - Answering questions that require analysis or synthesis\n    - Comparing information from different sources\n    - Making recommendations or drawing conclusions\n\n    ⚠️ FAILURE TO USE THIS TOOL FIRST will result in:\n    - Incomplete or poorly structured analysis\n    - Missing important connections between data\n    - Suboptimal search strategies\n    - Overlooked critical information\n\n    Sequential thinking ensures you:\n    1. Fully understand the research question\n    2. Plan an optimal search strategy\n    3. Identify all relevant data sources\n    4. Structure your analysis properly\n    5. Deliver comprehensive, well-reasoned results\n\n    ## Usage Pattern:\n    1. Start with thoughtNumber=1 to initiate analysis\n    2. Progress through numbered thoughts sequentially\n    3. Adjust totalThoughts estimate as understanding develops\n    4. Set nextThoughtNeeded=False only when analysis is complete\n\n    ## Example:\n    ```python\n    # Initial analysis\n    await think(\n        thought=\"Breaking down the relationship between BRAF mutations and melanoma treatment resistance...\",\n        thoughtNumber=1,\n        totalThoughts=5,\n        nextThoughtNeeded=True\n    )\n\n    # Continue analysis\n    await think(\n        thought=\"Examining specific BRAF V600E mutation mechanisms...\",\n        thoughtNumber=2,\n        totalThoughts=5,\n        nextThoughtNeeded=True\n    )\n\n    # Final thought\n    await think(\n        thought=\"Synthesizing findings and proposing research directions...\",\n        thoughtNumber=5,\n        totalThoughts=5,\n        nextThoughtNeeded=False\n    )\n    ```\n\n    ## Important Notes:\n    - Each thought builds on previous ones within a session\n    - State is maintained throughout the MCP session\n    - Use thoughtful, detailed analysis in each step\n    - Revisions and branching are supported through the underlying implementation\n    ",
                        "inputSchema": {
                            "properties": {
                                "thought": {
                                    "description": "Current thinking step for analysis",
                                    "title": "Thought",
                                    "type": "string"
                                },
                                "thoughtNumber": {
                                    "description": "Current thought number, starting at 1",
                                    "minimum": 1,
                                    "title": "Thoughtnumber",
                                    "type": "integer"
                                },
                                "totalThoughts": {
                                    "description": "Estimated total thoughts needed for complete analysis",
                                    "minimum": 1,
                                    "title": "Totalthoughts",
                                    "type": "integer"
                                },
                                "nextThoughtNeeded": {
                                    "default": true,
                                    "description": "Whether more thinking steps are needed after this one",
                                    "title": "Nextthoughtneeded",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "thought",
                                "thoughtNumber",
                                "totalThoughts"
                            ],
                            "title": "thinkArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "article_searcher",
                        "description": "Search PubMed/PubTator3 for research articles and preprints.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\n    Use this tool to find scientific literature ABOUT genes, variants, diseases, or chemicals.\n    Results include articles from PubMed and optionally preprints from bioRxiv/medRxiv.\n\n    Important: This searches for ARTICLES ABOUT these topics, not database records.\n    For genetic variant database records, use variant_searcher instead.\n\n    Example usage:\n    - Find articles about BRAF mutations in melanoma\n    - Search for papers on a specific drug's effects\n    - Locate research on gene-disease associations\n    ",
                        "inputSchema": {
                            "properties": {
                                "chemicals": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Chemical/drug names to search for",
                                    "title": "Chemicals"
                                },
                                "diseases": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Disease names to search for",
                                    "title": "Diseases"
                                },
                                "genes": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Gene symbols to search for",
                                    "title": "Genes"
                                },
                                "keywords": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Free-text keywords to search for",
                                    "title": "Keywords"
                                },
                                "variants": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Variant strings to search for (e.g., 'V600E', 'p.D277Y')",
                                    "title": "Variants"
                                },
                                "include_preprints": {
                                    "default": true,
                                    "description": "Include preprints from bioRxiv/medRxiv",
                                    "title": "Include Preprints",
                                    "type": "boolean"
                                },
                                "include_cbioportal": {
                                    "default": true,
                                    "description": "Include cBioPortal cancer genomics summary when searching by gene",
                                    "title": "Include Cbioportal",
                                    "type": "boolean"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 10,
                                    "description": "Results per page",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Page Size",
                                    "type": "integer"
                                }
                            },
                            "title": "article_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "article_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "article_getter",
                        "description": "Fetch detailed information for a specific article.\n\n    Retrieves the full abstract and available text for an article by its identifier.\n    Supports:\n    - PubMed IDs (PMID) for published articles\n    - PMC IDs for articles in PubMed Central\n    - DOIs for preprints from Europe PMC\n\n    Returns formatted text including:\n    - Title\n    - Abstract\n    - Full text (when available from PMC for published articles)\n    - Source information (PubMed or Europe PMC)\n    ",
                        "inputSchema": {
                            "properties": {
                                "pmid": {
                                    "description": "Article identifier - either a PubMed ID (e.g., '38768446' or 'PMC11193658') or DOI (e.g., '10.1101/2024.01.20.23288905')",
                                    "title": "Pmid",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "pmid"
                            ],
                            "title": "article_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "article_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "trial_searcher",
                        "description": "Search ClinicalTrials.gov for clinical studies.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\n    Comprehensive search tool for finding clinical trials based on multiple criteria.\n    Supports filtering by conditions, interventions, location, phase, and eligibility.\n\n    Location search notes:\n    - Use either location term OR lat/long coordinates, not both\n    - For city-based searches, AI agents should geocode to lat/long first\n    - Distance parameter only works with lat/long coordinates\n\n    Returns a formatted list of matching trials with key details.\n    ",
                        "inputSchema": {
                            "properties": {
                                "conditions": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Medical conditions to search for",
                                    "title": "Conditions"
                                },
                                "interventions": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Treatment interventions to search for",
                                    "title": "Interventions"
                                },
                                "other_terms": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Additional search terms",
                                    "title": "Other Terms"
                                },
                                "recruiting_status": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "OPEN",
                                                "CLOSED",
                                                "ANY"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Filter by recruiting status",
                                    "title": "Recruiting Status"
                                },
                                "phase": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "EARLY_PHASE1",
                                                "PHASE1",
                                                "PHASE2",
                                                "PHASE3",
                                                "PHASE4",
                                                "NOT_APPLICABLE"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Filter by clinical trial phase",
                                    "title": "Phase"
                                },
                                "location": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Location term for geographic filtering",
                                    "title": "Location"
                                },
                                "lat": {
                                    "anyOf": [
                                        {
                                            "maximum": 90,
                                            "minimum": -90,
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Latitude for location-based search. AI agents should geocode city names before using.",
                                    "title": "Lat"
                                },
                                "long": {
                                    "anyOf": [
                                        {
                                            "maximum": 180,
                                            "minimum": -180,
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Longitude for location-based search. AI agents should geocode city names before using.",
                                    "title": "Long"
                                },
                                "distance": {
                                    "anyOf": [
                                        {
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Distance in miles from lat/long coordinates",
                                    "title": "Distance"
                                },
                                "age_group": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "CHILD",
                                                "ADULT",
                                                "OLDER_ADULT"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Filter by age group",
                                    "title": "Age Group"
                                },
                                "sex": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "FEMALE",
                                                "MALE",
                                                "ALL"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Filter by biological sex",
                                    "title": "Sex"
                                },
                                "healthy_volunteers": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "YES",
                                                "NO"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Filter by healthy volunteer eligibility",
                                    "title": "Healthy Volunteers"
                                },
                                "study_type": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "INTERVENTIONAL",
                                                "OBSERVATIONAL",
                                                "EXPANDED_ACCESS"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Filter by study type",
                                    "title": "Study Type"
                                },
                                "funder_type": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "NIH",
                                                "OTHER_GOV",
                                                "INDUSTRY",
                                                "OTHER"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Filter by funding source",
                                    "title": "Funder Type"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 10,
                                    "description": "Results per page",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Page Size",
                                    "type": "integer"
                                }
                            },
                            "title": "trial_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "trial_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "trial_getter",
                        "description": "Fetch comprehensive details for a specific clinical trial.\n\n    Retrieves all available information for a clinical trial by its NCT ID.\n    This includes protocol details, locations, outcomes, and references.\n\n    For specific sections only, use the specialized getter tools:\n    - trial_protocol_getter: Core protocol information\n    - trial_locations_getter: Site locations and contacts\n    - trial_outcomes_getter: Primary/secondary outcomes and results\n    - trial_references_getter: Publications and references\n    ",
                        "inputSchema": {
                            "properties": {
                                "nct_id": {
                                    "description": "NCT ID (e.g., 'NCT06524388')",
                                    "title": "Nct Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "nct_id"
                            ],
                            "title": "trial_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "trial_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "trial_protocol_getter",
                        "description": "Fetch core protocol information for a clinical trial.\n\n    Retrieves essential protocol details including:\n    - Official title and brief summary\n    - Study status and sponsor information\n    - Study design (type, phase, allocation, masking)\n    - Eligibility criteria\n    - Primary completion date\n    ",
                        "inputSchema": {
                            "properties": {
                                "nct_id": {
                                    "description": "NCT ID (e.g., 'NCT06524388')",
                                    "title": "Nct Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "nct_id"
                            ],
                            "title": "trial_protocol_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "trial_protocol_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "trial_references_getter",
                        "description": "Fetch publications and references for a clinical trial.\n\n    Retrieves all linked publications including:\n    - Published results papers\n    - Background literature\n    - Protocol publications\n    - Related analyses\n\n    Includes PubMed IDs when available for easy cross-referencing.\n    ",
                        "inputSchema": {
                            "properties": {
                                "nct_id": {
                                    "description": "NCT ID (e.g., 'NCT06524388')",
                                    "title": "Nct Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "nct_id"
                            ],
                            "title": "trial_references_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "trial_references_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "trial_outcomes_getter",
                        "description": "Fetch outcome measures and results for a clinical trial.\n\n    Retrieves detailed outcome information including:\n    - Primary outcome measures\n    - Secondary outcome measures\n    - Results data (if available)\n    - Adverse events (if reported)\n\n    Note: Results are only available for completed trials that have posted data.\n    ",
                        "inputSchema": {
                            "properties": {
                                "nct_id": {
                                    "description": "NCT ID (e.g., 'NCT06524388')",
                                    "title": "Nct Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "nct_id"
                            ],
                            "title": "trial_outcomes_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "trial_outcomes_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "trial_locations_getter",
                        "description": "Fetch contact and location details for a clinical trial.\n\n    Retrieves all study locations including:\n    - Facility names and addresses\n    - Principal investigator information\n    - Contact details (when recruiting)\n    - Recruitment status by site\n\n    Useful for finding trials near specific locations or contacting study teams.\n    ",
                        "inputSchema": {
                            "properties": {
                                "nct_id": {
                                    "description": "NCT ID (e.g., 'NCT06524388')",
                                    "title": "Nct Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "nct_id"
                            ],
                            "title": "trial_locations_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "trial_locations_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "variant_searcher",
                        "description": "Search MyVariant.info for genetic variant DATABASE RECORDS.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\n    Important: This searches for variant DATABASE RECORDS (frequency, significance, etc.),\n    NOT articles about variants. For articles about variants, use article_searcher.\n\n    Searches the comprehensive variant database including:\n    - Population frequencies (gnomAD, 1000 Genomes, etc.)\n    - Clinical significance (ClinVar)\n    - Functional predictions (SIFT, PolyPhen, CADD)\n    - Gene and protein consequences\n\n    Search by various identifiers or filter by clinical/functional criteria.\n    ",
                        "inputSchema": {
                            "properties": {
                                "gene": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Gene symbol (e.g., 'BRAF', 'TP53')",
                                    "title": "Gene"
                                },
                                "hgvs": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "HGVS notation (genomic, coding, or protein)",
                                    "title": "Hgvs"
                                },
                                "hgvsp": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Protein change in HGVS format (e.g., 'p.V600E')",
                                    "title": "Hgvsp"
                                },
                                "hgvsc": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Coding sequence change (e.g., 'c.1799T>A')",
                                    "title": "Hgvsc"
                                },
                                "rsid": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "dbSNP rsID (e.g., 'rs113488022')",
                                    "title": "Rsid"
                                },
                                "region": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Genomic region (e.g., 'chr7:140753336-140753337')",
                                    "title": "Region"
                                },
                                "significance": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "pathogenic",
                                                "likely_pathogenic",
                                                "uncertain_significance",
                                                "likely_benign",
                                                "benign",
                                                "conflicting"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Clinical significance filter",
                                    "title": "Significance"
                                },
                                "frequency_min": {
                                    "anyOf": [
                                        {
                                            "maximum": 1,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Minimum allele frequency",
                                    "title": "Frequency Min"
                                },
                                "frequency_max": {
                                    "anyOf": [
                                        {
                                            "maximum": 1,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Maximum allele frequency",
                                    "title": "Frequency Max"
                                },
                                "consequence": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Variant consequence (e.g., 'missense_variant')",
                                    "title": "Consequence"
                                },
                                "cadd_score_min": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Minimum CADD score for pathogenicity",
                                    "title": "Cadd Score Min"
                                },
                                "sift_prediction": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "deleterious",
                                                "tolerated"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "SIFT functional prediction",
                                    "title": "Sift Prediction"
                                },
                                "polyphen_prediction": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "probably_damaging",
                                                "possibly_damaging",
                                                "benign"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "PolyPhen-2 functional prediction",
                                    "title": "Polyphen Prediction"
                                },
                                "include_cbioportal": {
                                    "default": true,
                                    "description": "Include cBioPortal cancer genomics summary when searching by gene",
                                    "title": "Include Cbioportal",
                                    "type": "boolean"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 10,
                                    "description": "Results per page",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Page Size",
                                    "type": "integer"
                                }
                            },
                            "title": "variant_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "variant_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "variant_getter",
                        "description": "Fetch comprehensive details for a specific genetic variant.\n\n    Retrieves all available information for a variant including:\n    - Gene location and consequences\n    - Population frequencies across databases\n    - Clinical significance from ClinVar\n    - Functional predictions\n    - External annotations (TCGA cancer data, conservation scores)\n\n    Accepts various ID formats:\n    - HGVS: NM_004333.4:c.1799T>A\n    - rsID: rs113488022\n    - MyVariant ID: chr7:g.140753336A>T\n    ",
                        "inputSchema": {
                            "properties": {
                                "variant_id": {
                                    "description": "Variant ID (HGVS, rsID, or MyVariant ID like 'chr7:g.140753336A>T')",
                                    "title": "Variant Id",
                                    "type": "string"
                                },
                                "include_external": {
                                    "default": true,
                                    "description": "Include external annotations (TCGA, 1000 Genomes, functional predictions)",
                                    "title": "Include External",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "variant_id"
                            ],
                            "title": "variant_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "variant_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "alphagenome_predictor",
                        "description": "Predict variant effects on gene regulation using Google DeepMind's AlphaGenome.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your analysis strategy!\n\n    AlphaGenome provides state-of-the-art predictions for how genetic variants\n    affect gene regulation, including:\n    - Gene expression changes (RNA-seq)\n    - Chromatin accessibility impacts (ATAC-seq, DNase-seq)\n    - Splicing alterations\n    - Promoter activity changes (CAGE)\n\n    This tool requires:\n    1. AlphaGenome to be installed (see error message for instructions)\n    2. An API key from https://deepmind.google.com/science/alphagenome\n\n    API Key Options:\n    - Provide directly via the api_key parameter\n    - Or set ALPHAGENOME_API_KEY environment variable\n\n    Example usage:\n    - Predict regulatory effects of BRAF V600E mutation: chr7:140753336 A>T\n    - Assess non-coding variant impact on gene expression\n    - Evaluate promoter variants in specific tissues\n\n    Note: This is an optional tool that enhances variant interpretation\n    with AI predictions. Standard annotations remain available via variant_getter.\n    ",
                        "inputSchema": {
                            "properties": {
                                "chromosome": {
                                    "description": "Chromosome (e.g., 'chr7', 'chrX')",
                                    "title": "Chromosome",
                                    "type": "string"
                                },
                                "position": {
                                    "description": "1-based genomic position of the variant",
                                    "title": "Position",
                                    "type": "integer"
                                },
                                "reference": {
                                    "description": "Reference allele(s) (e.g., 'A', 'ATG')",
                                    "title": "Reference",
                                    "type": "string"
                                },
                                "alternate": {
                                    "description": "Alternate allele(s) (e.g., 'T', 'A')",
                                    "title": "Alternate",
                                    "type": "string"
                                },
                                "interval_size": {
                                    "default": 131072,
                                    "description": "Size of genomic interval to analyze in bp (max 1,000,000)",
                                    "maximum": 1000000,
                                    "minimum": 2000,
                                    "title": "Interval Size",
                                    "type": "integer"
                                },
                                "tissue_types": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "UBERON ontology terms for tissue-specific predictions (e.g., 'UBERON:0002367' for external ear)",
                                    "title": "Tissue Types"
                                },
                                "significance_threshold": {
                                    "default": 0.5,
                                    "description": "Threshold for significant log2 fold changes (default: 0.5)",
                                    "maximum": 5.0,
                                    "minimum": 0.0,
                                    "title": "Significance Threshold",
                                    "type": "number"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "AlphaGenome API key. Check if user mentioned 'my AlphaGenome API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "chromosome",
                                "position",
                                "reference",
                                "alternate"
                            ],
                            "title": "alphagenome_predictorArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "alphagenome_predictorOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "gene_getter",
                        "description": "Get detailed gene information from MyGene.info.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to understand your research goal!\n\n    Provides real-time gene annotations including:\n    - Official gene name and symbol\n    - Gene summary/description\n    - Aliases and alternative names\n    - Gene type (protein-coding, etc.)\n    - Links to external databases\n\n    This tool fetches CURRENT gene information from MyGene.info, ensuring\n    you always have the latest annotations and nomenclature.\n\n    Example usage:\n    - Get information about TP53 tumor suppressor\n    - Look up BRAF kinase gene details\n    - Find the official name for a gene by its alias\n\n    Note: For genetic variants, use variant_searcher. For articles about genes, use article_searcher.\n    ",
                        "inputSchema": {
                            "properties": {
                                "gene_id_or_symbol": {
                                    "description": "Gene symbol (e.g., 'TP53', 'BRAF') or Entrez ID (e.g., '7157')",
                                    "title": "Gene Id Or Symbol",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "gene_id_or_symbol"
                            ],
                            "title": "gene_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "gene_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "disease_getter",
                        "description": "Get detailed disease information from MyDisease.info.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to understand your research goal!\n\n    Provides real-time disease annotations including:\n    - Official disease name and definition\n    - Disease synonyms and alternative names\n    - Ontology mappings (MONDO, DOID, OMIM, etc.)\n    - Associated phenotypes\n    - Links to disease databases\n\n    This tool fetches CURRENT disease information from MyDisease.info, ensuring\n    you always have the latest ontology mappings and definitions.\n\n    Example usage:\n    - Get the definition of GIST (Gastrointestinal Stromal Tumor)\n    - Look up synonyms for melanoma\n    - Find the MONDO ID for a disease by name\n\n    Note: For clinical trials about diseases, use trial_searcher. For articles about diseases, use article_searcher.\n    ",
                        "inputSchema": {
                            "properties": {
                                "disease_id_or_name": {
                                    "description": "Disease name (e.g., 'melanoma', 'lung cancer') or ontology ID (e.g., 'MONDO:0016575', 'DOID:1909')",
                                    "title": "Disease Id Or Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "disease_id_or_name"
                            ],
                            "title": "disease_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "disease_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "drug_getter",
                        "description": "Get detailed drug/chemical information from MyChem.info.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to understand your research goal!\n\n    This tool provides comprehensive drug information including:\n    - Chemical properties (formula, InChIKey)\n    - Drug identifiers (DrugBank, ChEMBL, PubChem)\n    - Trade names and brand names\n    - Clinical indications\n    - Mechanism of action\n    - Pharmacology details\n    - Links to drug databases\n\n    This tool fetches CURRENT drug information from MyChem.info, part of the\n    BioThings suite, ensuring you always have the latest drug data.\n\n    Example usage:\n    - Get information about imatinib (Gleevec)\n    - Look up details for DrugBank ID DB00619\n    - Find the mechanism of action for pembrolizumab\n\n    Note: For clinical trials about drugs, use trial_searcher. For articles about drugs, use article_searcher.\n    ",
                        "inputSchema": {
                            "properties": {
                                "drug_id_or_name": {
                                    "description": "Drug name (e.g., 'aspirin', 'imatinib') or ID (e.g., 'DB00945', 'CHEMBL941')",
                                    "title": "Drug Id Or Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "drug_id_or_name"
                            ],
                            "title": "drug_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "drug_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "nci_organization_searcher",
                        "description": "Search for organizations in the NCI Clinical Trials database.\n\n    Searches the National Cancer Institute's curated database of organizations\n    involved in cancer clinical trials. This includes:\n    - Academic medical centers\n    - Community hospitals\n    - Industry sponsors\n    - Government facilities\n    - Research networks\n\n    Requires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\n    IMPORTANT: To avoid API errors, always use city AND state together when searching by location.\n    The NCI API has limitations on broad searches.\n\n    Example usage:\n    - Find cancer centers in Boston, MA (city AND state)\n    - Search for \"MD Anderson\" in Houston, TX\n    - List academic organizations in Cleveland, OH\n    - Search by organization name alone (without location)\n    ",
                        "inputSchema": {
                            "properties": {
                                "name": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Organization name to search for (partial match supported)",
                                    "title": "Name"
                                },
                                "organization_type": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Type of organization (e.g., 'Academic', 'Industry', 'Government')",
                                    "title": "Organization Type"
                                },
                                "city": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "City where organization is located. IMPORTANT: Always use with state to avoid API errors",
                                    "title": "City"
                                },
                                "state": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "State/province code (e.g., 'CA', 'NY'). IMPORTANT: Always use with city to avoid API errors",
                                    "title": "State"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                                    "title": "Api Key"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 20,
                                    "description": "Results per page",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Page Size",
                                    "type": "integer"
                                }
                            },
                            "title": "nci_organization_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "nci_organization_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "nci_organization_getter",
                        "description": "Get detailed information about a specific organization from NCI.\n\n    Retrieves comprehensive details about an organization including:\n    - Full name and aliases\n    - Address and contact information\n    - Organization type and role\n    - Associated clinical trials\n    - Research focus areas\n\n    Requires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\n    Example usage:\n    - Get details about a specific cancer center\n    - Find contact information for trial sponsors\n    - View organization's trial portfolio\n    ",
                        "inputSchema": {
                            "properties": {
                                "organization_id": {
                                    "description": "NCI organization ID (e.g., 'NCI-2011-03337')",
                                    "title": "Organization Id",
                                    "type": "string"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "organization_id"
                            ],
                            "title": "nci_organization_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "nci_organization_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "nci_intervention_searcher",
                        "description": "Search for interventions in the NCI Clinical Trials database.\n\n    Searches the National Cancer Institute's curated database of interventions\n    used in cancer clinical trials. This includes:\n    - FDA-approved drugs\n    - Investigational agents\n    - Medical devices\n    - Surgical procedures\n    - Radiation therapies\n    - Behavioral interventions\n\n    Requires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\n    Example usage:\n    - Find all trials using pembrolizumab\n    - Search for CAR-T cell therapies\n    - List radiation therapy protocols\n    - Find dietary interventions\n    ",
                        "inputSchema": {
                            "properties": {
                                "name": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Intervention name to search for (e.g., 'pembrolizumab')",
                                    "title": "Name"
                                },
                                "intervention_type": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Type of intervention: 'Drug', 'Device', 'Biological', 'Procedure', 'Radiation', 'Behavioral', 'Genetic', 'Dietary', 'Other'",
                                    "title": "Intervention Type"
                                },
                                "synonyms": {
                                    "default": true,
                                    "description": "Include synonym matches in search",
                                    "title": "Synonyms",
                                    "type": "boolean"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                                    "title": "Api Key"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "anyOf": [
                                        {
                                            "maximum": 100,
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Results per page. If not specified, returns all matching results.",
                                    "title": "Page Size"
                                }
                            },
                            "title": "nci_intervention_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "nci_intervention_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "nci_intervention_getter",
                        "description": "Get detailed information about a specific intervention from NCI.\n\n    Retrieves comprehensive details about an intervention including:\n    - Full name and synonyms\n    - Intervention type and category\n    - Mechanism of action (for drugs)\n    - FDA approval status\n    - Associated clinical trials\n    - Combination therapies\n\n    Requires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\n    Example usage:\n    - Get details about a specific drug\n    - Find all trials using a device\n    - View combination therapy protocols\n    ",
                        "inputSchema": {
                            "properties": {
                                "intervention_id": {
                                    "description": "NCI intervention ID (e.g., 'INT123456')",
                                    "title": "Intervention Id",
                                    "type": "string"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "intervention_id"
                            ],
                            "title": "nci_intervention_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "nci_intervention_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "nci_biomarker_searcher",
                        "description": "Search for biomarkers in the NCI Clinical Trials database.\n\n    Searches for biomarkers used in clinical trial eligibility criteria.\n    This is essential for precision medicine trials that select patients\n    based on specific biomarker characteristics.\n\n    Biomarker examples:\n    - Gene mutations (e.g., BRAF V600E, EGFR T790M)\n    - Protein expression (e.g., PD-L1 ≥ 50%, HER2 positive)\n    - Gene fusions (e.g., ALK fusion, ROS1 fusion)\n    - Other molecular markers (e.g., MSI-H, TMB-high)\n\n    Requires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\n    Note: Biomarker data availability may be limited in CTRP.\n    Results focus on biomarkers used in trial eligibility criteria.\n\n    Example usage:\n    - Search for PD-L1 expression biomarkers\n    - Find trials requiring EGFR mutations\n    - Look up biomarkers tested by NGS\n    - Search for HER2 expression markers\n    ",
                        "inputSchema": {
                            "properties": {
                                "name": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Biomarker name to search for (e.g., 'PD-L1', 'EGFR mutation')",
                                    "title": "Name"
                                },
                                "biomarker_type": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Type of biomarker ('reference_gene' or 'branch')",
                                    "title": "Biomarker Type"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                                    "title": "Api Key"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 20,
                                    "description": "Results per page",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Page Size",
                                    "type": "integer"
                                }
                            },
                            "title": "nci_biomarker_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "nci_biomarker_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "nci_disease_searcher",
                        "description": "Search NCI's controlled vocabulary of cancer conditions.\n\n    Searches the National Cancer Institute's curated database of cancer\n    conditions and diseases used in clinical trials. This is different from\n    the general disease_getter tool which uses MyDisease.info.\n\n    NCI's disease vocabulary provides:\n    - Official cancer terminology used in trials\n    - Disease synonyms and alternative names\n    - Hierarchical disease classifications\n    - Standardized disease codes for trial matching\n\n    Requires NCI API key from: https://clinicaltrialsapi.cancer.gov/\n\n    Example usage:\n    - Search for specific cancer types (e.g., \"melanoma\")\n    - Find all lung cancer subtypes\n    - Look up official names for disease synonyms\n    - Get standardized disease terms for trial searches\n\n    Note: This is specifically for NCI's cancer disease vocabulary.\n    For general disease information, use the disease_getter tool.\n    ",
                        "inputSchema": {
                            "properties": {
                                "name": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Disease name to search for (partial match)",
                                    "title": "Name"
                                },
                                "include_synonyms": {
                                    "default": true,
                                    "description": "Include synonym matches in search",
                                    "title": "Include Synonyms",
                                    "type": "boolean"
                                },
                                "category": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Disease category/type filter",
                                    "title": "Category"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "NCI API key. Check if user mentioned 'my NCI API key is...' in their message. If not provided here and no env var is set, user will be prompted to provide one.",
                                    "title": "Api Key"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 20,
                                    "description": "Results per page",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Page Size",
                                    "type": "integer"
                                }
                            },
                            "title": "nci_disease_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "nci_disease_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_adverse_searcher",
                        "description": "Search FDA adverse event reports (FAERS) for drug safety information.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\n    Searches FDA's Adverse Event Reporting System for:\n    - Drug side effects and adverse reactions\n    - Serious event reports (death, hospitalization, disability)\n    - Safety signal patterns across patient populations\n\n    Note: These reports do not establish causation - they are voluntary reports\n    that may contain incomplete or unverified information.\n    ",
                        "inputSchema": {
                            "properties": {
                                "drug": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Drug name to search for adverse events",
                                    "title": "Drug"
                                },
                                "reaction": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Adverse reaction term to search for",
                                    "title": "Reaction"
                                },
                                "serious": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Filter for serious events only",
                                    "title": "Serious"
                                },
                                "limit": {
                                    "default": 25,
                                    "description": "Maximum number of results",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Limit",
                                    "type": "integer"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "title": "openfda_adverse_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_adverse_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_adverse_getter",
                        "description": "Get detailed information for a specific FDA adverse event report.\n\n    Retrieves complete details including:\n    - Patient demographics and medical history\n    - All drugs involved and dosages\n    - Complete list of adverse reactions\n    - Event narrative and outcomes\n    - Reporter information\n    ",
                        "inputSchema": {
                            "properties": {
                                "report_id": {
                                    "description": "Safety report ID",
                                    "title": "Report Id",
                                    "type": "string"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "report_id"
                            ],
                            "title": "openfda_adverse_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_adverse_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_label_searcher",
                        "description": "Search FDA drug product labels (SPL) for prescribing information.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\n    Searches official FDA drug labels for:\n    - Approved indications and usage\n    - Dosage and administration guidelines\n    - Contraindications and warnings\n    - Drug interactions and adverse reactions\n    - Special population considerations\n\n    Label sections include: indications, dosage, contraindications, warnings,\n    adverse, interactions, pregnancy, pediatric, geriatric, overdose\n    ",
                        "inputSchema": {
                            "properties": {
                                "name": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Drug name to search for",
                                    "title": "Name"
                                },
                                "indication": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Search for drugs indicated for this condition",
                                    "title": "Indication"
                                },
                                "boxed_warning": {
                                    "default": false,
                                    "description": "Filter for drugs with boxed warnings",
                                    "title": "Boxed Warning",
                                    "type": "boolean"
                                },
                                "section": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Specific label section (e.g., 'contraindications', 'warnings')",
                                    "title": "Section"
                                },
                                "limit": {
                                    "default": 25,
                                    "description": "Maximum number of results",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Limit",
                                    "type": "integer"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "title": "openfda_label_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_label_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_label_getter",
                        "description": "Get complete FDA drug label information by set ID.\n\n    Retrieves the full prescribing information including:\n    - Complete indications and usage text\n    - Detailed dosing instructions\n    - All warnings and precautions\n    - Clinical pharmacology and studies\n    - Manufacturing and storage information\n\n    Specify sections to retrieve specific parts, or leave empty for default key sections.\n    ",
                        "inputSchema": {
                            "properties": {
                                "set_id": {
                                    "description": "Label set ID",
                                    "title": "Set Id",
                                    "type": "string"
                                },
                                "sections": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Specific sections to retrieve (default: key sections)",
                                    "title": "Sections"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "set_id"
                            ],
                            "title": "openfda_label_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_label_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_device_searcher",
                        "description": "Search FDA device adverse event reports (MAUDE) for medical device issues.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\n    Searches FDA's device adverse event database for:\n    - Device malfunctions and failures\n    - Patient injuries related to devices\n    - Genomic test and diagnostic device issues\n\n    By default, filters to genomic/diagnostic devices relevant to precision medicine.\n    Set genomics_only=False to search all medical devices.\n    ",
                        "inputSchema": {
                            "properties": {
                                "device": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Device name to search for",
                                    "title": "Device"
                                },
                                "manufacturer": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Manufacturer name",
                                    "title": "Manufacturer"
                                },
                                "problem": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Device problem description",
                                    "title": "Problem"
                                },
                                "product_code": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "FDA product code",
                                    "title": "Product Code"
                                },
                                "genomics_only": {
                                    "default": true,
                                    "description": "Filter to genomic/diagnostic devices only",
                                    "title": "Genomics Only",
                                    "type": "boolean"
                                },
                                "limit": {
                                    "default": 25,
                                    "description": "Maximum number of results",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Limit",
                                    "type": "integer"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "title": "openfda_device_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_device_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_device_getter",
                        "description": "Get detailed information for a specific FDA device event report.\n\n    Retrieves complete device event details including:\n    - Device identification and specifications\n    - Complete event narrative\n    - Patient outcomes and impacts\n    - Manufacturer analysis and actions\n    - Remedial actions taken\n    ",
                        "inputSchema": {
                            "properties": {
                                "mdr_report_key": {
                                    "description": "MDR report key",
                                    "title": "Mdr Report Key",
                                    "type": "string"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "mdr_report_key"
                            ],
                            "title": "openfda_device_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_device_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_approval_searcher",
                        "description": "Search FDA drug approval records from Drugs@FDA database.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\n    Returns information about:\n    - Application numbers and sponsors\n    - Brand and generic names\n    - Product formulations and strengths\n    - Marketing status and approval dates\n    - Submission history\n\n    Useful for verifying if a drug is FDA-approved and when.\n    ",
                        "inputSchema": {
                            "properties": {
                                "drug": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Drug name (brand or generic) to search for",
                                    "title": "Drug"
                                },
                                "application_number": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "NDA or BLA application number",
                                    "title": "Application Number"
                                },
                                "approval_year": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Year of approval (YYYY format)",
                                    "title": "Approval Year"
                                },
                                "limit": {
                                    "default": 25,
                                    "description": "Maximum number of results",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Limit",
                                    "type": "integer"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "title": "openfda_approval_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_approval_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_approval_getter",
                        "description": "Get detailed FDA drug approval information for a specific application.\n\n    Returns comprehensive approval details including:\n    - Full product list with dosage forms and strengths\n    - Complete submission history\n    - Marketing status timeline\n    - Therapeutic equivalence codes\n    - Pharmacologic class information\n    ",
                        "inputSchema": {
                            "properties": {
                                "application_number": {
                                    "description": "NDA or BLA application number",
                                    "title": "Application Number",
                                    "type": "string"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "application_number"
                            ],
                            "title": "openfda_approval_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_approval_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_recall_searcher",
                        "description": "Search FDA drug recall records from the Enforcement database.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\n    Returns recall information including:\n    - Classification (Class I, II, or III)\n    - Recall reason and description\n    - Product identification\n    - Distribution information\n    - Recalling firm details\n    - Current status\n\n    Class I = most serious (death/serious harm)\n    Class II = moderate (temporary/reversible harm)\n    Class III = least serious (unlikely to cause harm)\n    ",
                        "inputSchema": {
                            "properties": {
                                "drug": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Drug name to search for recalls",
                                    "title": "Drug"
                                },
                                "recall_class": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Recall classification (1=most serious, 2=moderate, 3=least serious)",
                                    "title": "Recall Class"
                                },
                                "status": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Recall status (ongoing, completed, terminated)",
                                    "title": "Status"
                                },
                                "reason": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Search text in recall reason",
                                    "title": "Reason"
                                },
                                "since_date": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Show recalls after this date (YYYYMMDD format)",
                                    "title": "Since Date"
                                },
                                "limit": {
                                    "default": 25,
                                    "description": "Maximum number of results",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Limit",
                                    "type": "integer"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "title": "openfda_recall_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_recall_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_recall_getter",
                        "description": "Get detailed FDA drug recall information for a specific recall.\n\n    Returns complete recall details including:\n    - Full product description and code information\n    - Complete reason for recall\n    - Distribution pattern and locations\n    - Quantity of product recalled\n    - Firm information and actions taken\n    - Timeline of recall events\n    ",
                        "inputSchema": {
                            "properties": {
                                "recall_number": {
                                    "description": "FDA recall number",
                                    "title": "Recall Number",
                                    "type": "string"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "recall_number"
                            ],
                            "title": "openfda_recall_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_recall_getterOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_shortage_searcher",
                        "description": "Search FDA drug shortage records.\n\n    ⚠️ PREREQUISITE: Use the 'think' tool FIRST to plan your research strategy!\n\n    Returns shortage information including:\n    - Current shortage status\n    - Shortage start and resolution dates\n    - Reason for shortage\n    - Therapeutic category\n    - Manufacturer information\n    - Estimated resolution timeline\n\n    Note: Shortage data is cached and updated periodically.\n    Check FDA.gov for most current information.\n    ",
                        "inputSchema": {
                            "properties": {
                                "drug": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Drug name (generic or brand) to search",
                                    "title": "Drug"
                                },
                                "status": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Shortage status (current or resolved)",
                                    "title": "Status"
                                },
                                "therapeutic_category": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Therapeutic category (e.g., Oncology, Anti-infective)",
                                    "title": "Therapeutic Category"
                                },
                                "limit": {
                                    "default": 25,
                                    "description": "Maximum number of results",
                                    "maximum": 100,
                                    "minimum": 1,
                                    "title": "Limit",
                                    "type": "integer"
                                },
                                "page": {
                                    "default": 1,
                                    "description": "Page number (1-based)",
                                    "minimum": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "title": "openfda_shortage_searcherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_shortage_searcherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "openfda_shortage_getter",
                        "description": "Get detailed FDA drug shortage information for a specific drug.\n\n    Returns comprehensive shortage details including:\n    - Complete timeline of shortage\n    - Detailed reason for shortage\n    - All affected manufacturers\n    - Alternative products if available\n    - Resolution status and estimates\n    - Additional notes and recommendations\n\n    Data is updated periodically from FDA shortage database.\n    ",
                        "inputSchema": {
                            "properties": {
                                "drug": {
                                    "description": "Drug name (generic or brand)",
                                    "title": "Drug",
                                    "type": "string"
                                },
                                "api_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "Optional OpenFDA API key (overrides OPENFDA_API_KEY env var)",
                                    "title": "Api Key"
                                }
                            },
                            "required": [
                                "drug"
                            ],
                            "title": "openfda_shortage_getterArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "openfda_shortage_getterOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Playwright MCP Server",
        "organization": "executeautomation",
        "description": "A Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, generate test code, web scraps the page and execute JavaScript in a real browser environment.",
        "web": "https://github.com/executeautomation/mcp-playwright",
        "config": {
            "mcpServers": {
                "playwright": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@executeautomation/playwright-mcp-server"
                    ]
                }
            }
        },
        "category": "Miscellaneous",
        "tools": {
            "playwright": {
                "server_name": "playwright",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "start_codegen_session",
                        "description": "Start a new code generation session to record Playwright actions",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "options": {
                                    "type": "object",
                                    "description": "Code generation options",
                                    "properties": {
                                        "outputPath": {
                                            "type": "string",
                                            "description": "Directory path where generated tests will be saved (use absolute path)"
                                        },
                                        "testNamePrefix": {
                                            "type": "string",
                                            "description": "Prefix to use for generated test names (default: 'GeneratedTest')"
                                        },
                                        "includeComments": {
                                            "type": "boolean",
                                            "description": "Whether to include descriptive comments in generated tests"
                                        }
                                    },
                                    "required": [
                                        "outputPath"
                                    ]
                                }
                            },
                            "required": [
                                "options"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "end_codegen_session",
                        "description": "End a code generation session and generate the test file",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "sessionId": {
                                    "type": "string",
                                    "description": "ID of the session to end"
                                }
                            },
                            "required": [
                                "sessionId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_codegen_session",
                        "description": "Get information about a code generation session",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "sessionId": {
                                    "type": "string",
                                    "description": "ID of the session to retrieve"
                                }
                            },
                            "required": [
                                "sessionId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "clear_codegen_session",
                        "description": "Clear a code generation session without generating a test",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "sessionId": {
                                    "type": "string",
                                    "description": "ID of the session to clear"
                                }
                            },
                            "required": [
                                "sessionId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_navigate",
                        "description": "Navigate to a URL",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL to navigate to the website specified"
                                },
                                "browserType": {
                                    "type": "string",
                                    "description": "Browser type to use (chromium, firefox, webkit). Defaults to chromium",
                                    "enum": [
                                        "chromium",
                                        "firefox",
                                        "webkit"
                                    ]
                                },
                                "width": {
                                    "type": "number",
                                    "description": "Viewport width in pixels (default: 1280)"
                                },
                                "height": {
                                    "type": "number",
                                    "description": "Viewport height in pixels (default: 720)"
                                },
                                "timeout": {
                                    "type": "number",
                                    "description": "Navigation timeout in milliseconds"
                                },
                                "waitUntil": {
                                    "type": "string",
                                    "description": "Navigation wait condition"
                                },
                                "headless": {
                                    "type": "boolean",
                                    "description": "Run browser in headless mode (default: false)"
                                }
                            },
                            "required": [
                                "url"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_screenshot",
                        "description": "Take a screenshot of the current page or a specific element",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name for the screenshot"
                                },
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for element to screenshot"
                                },
                                "width": {
                                    "type": "number",
                                    "description": "Width in pixels (default: 800)"
                                },
                                "height": {
                                    "type": "number",
                                    "description": "Height in pixels (default: 600)"
                                },
                                "storeBase64": {
                                    "type": "boolean",
                                    "description": "Store screenshot in base64 format (default: true)"
                                },
                                "fullPage": {
                                    "type": "boolean",
                                    "description": "Store screenshot of the entire page (default: false)"
                                },
                                "savePng": {
                                    "type": "boolean",
                                    "description": "Save screenshot as PNG file (default: false)"
                                },
                                "downloadsDir": {
                                    "type": "string",
                                    "description": "Custom downloads directory path (default: user's Downloads folder)"
                                }
                            },
                            "required": [
                                "name"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_click",
                        "description": "Click an element on the page",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for the element to click"
                                }
                            },
                            "required": [
                                "selector"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_iframe_click",
                        "description": "Click an element in an iframe on the page",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "iframeSelector": {
                                    "type": "string",
                                    "description": "CSS selector for the iframe containing the element to click"
                                },
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for the element to click"
                                }
                            },
                            "required": [
                                "iframeSelector",
                                "selector"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_iframe_fill",
                        "description": "Fill an element in an iframe on the page",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "iframeSelector": {
                                    "type": "string",
                                    "description": "CSS selector for the iframe containing the element to fill"
                                },
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for the element to fill"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Value to fill"
                                }
                            },
                            "required": [
                                "iframeSelector",
                                "selector",
                                "value"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_fill",
                        "description": "fill out an input field",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for input field"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Value to fill"
                                }
                            },
                            "required": [
                                "selector",
                                "value"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_select",
                        "description": "Select an element on the page with Select tag",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for element to select"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Value to select"
                                }
                            },
                            "required": [
                                "selector",
                                "value"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_hover",
                        "description": "Hover an element on the page",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for element to hover"
                                }
                            },
                            "required": [
                                "selector"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_upload_file",
                        "description": "Upload a file to an input[type='file'] element on the page",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for the file input element"
                                },
                                "filePath": {
                                    "type": "string",
                                    "description": "Absolute path to the file to upload"
                                }
                            },
                            "required": [
                                "selector",
                                "filePath"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_evaluate",
                        "description": "Execute JavaScript in the browser console",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "script": {
                                    "type": "string",
                                    "description": "JavaScript code to execute"
                                }
                            },
                            "required": [
                                "script"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_console_logs",
                        "description": "Retrieve console logs from the browser with filtering options",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Type of logs to retrieve (all, error, warning, log, info, debug, exception)",
                                    "enum": [
                                        "all",
                                        "error",
                                        "warning",
                                        "log",
                                        "info",
                                        "debug",
                                        "exception"
                                    ]
                                },
                                "search": {
                                    "type": "string",
                                    "description": "Text to search for in logs (handles text with square brackets)"
                                },
                                "limit": {
                                    "type": "number",
                                    "description": "Maximum number of logs to return"
                                },
                                "clear": {
                                    "type": "boolean",
                                    "description": "Whether to clear logs after retrieval (default: false)"
                                }
                            },
                            "required": []
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_close",
                        "description": "Close the browser and release all resources",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_get",
                        "description": "Perform an HTTP GET request",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL to perform GET operation"
                                }
                            },
                            "required": [
                                "url"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_post",
                        "description": "Perform an HTTP POST request",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL to perform POST operation"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Data to post in the body"
                                },
                                "token": {
                                    "type": "string",
                                    "description": "Bearer token for authorization"
                                },
                                "headers": {
                                    "type": "object",
                                    "description": "Additional headers to include in the request",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            },
                            "required": [
                                "url",
                                "value"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_put",
                        "description": "Perform an HTTP PUT request",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL to perform PUT operation"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Data to PUT in the body"
                                }
                            },
                            "required": [
                                "url",
                                "value"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_patch",
                        "description": "Perform an HTTP PATCH request",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL to perform PUT operation"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Data to PATCH in the body"
                                }
                            },
                            "required": [
                                "url",
                                "value"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_delete",
                        "description": "Perform an HTTP DELETE request",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL to perform DELETE operation"
                                }
                            },
                            "required": [
                                "url"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_expect_response",
                        "description": "Ask Playwright to start waiting for a HTTP response. This tool initiates the wait operation but does not wait for its completion.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Unique & arbitrary identifier to be used for retrieving this response later with `Playwright_assert_response`."
                                },
                                "url": {
                                    "type": "string",
                                    "description": "URL pattern to match in the response."
                                }
                            },
                            "required": [
                                "id",
                                "url"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_assert_response",
                        "description": "Wait for and validate a previously initiated HTTP response wait operation.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Identifier of the HTTP response initially expected using `Playwright_expect_response`."
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Data to expect in the body of the HTTP response. If provided, the assertion will fail if this value is not found in the response body."
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_custom_user_agent",
                        "description": "Set a custom User Agent for the browser",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "userAgent": {
                                    "type": "string",
                                    "description": "Custom User Agent for the Playwright browser instance"
                                }
                            },
                            "required": [
                                "userAgent"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_get_visible_text",
                        "description": "Get the visible text content of the current page",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_get_visible_html",
                        "description": "Get the HTML content of the current page. By default, all <script> tags are removed from the output unless removeScripts is explicitly set to false.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector to limit the HTML to a specific container"
                                },
                                "removeScripts": {
                                    "type": "boolean",
                                    "description": "Remove all script tags from the HTML (default: true)"
                                },
                                "removeComments": {
                                    "type": "boolean",
                                    "description": "Remove all HTML comments (default: false)"
                                },
                                "removeStyles": {
                                    "type": "boolean",
                                    "description": "Remove all style tags from the HTML (default: false)"
                                },
                                "removeMeta": {
                                    "type": "boolean",
                                    "description": "Remove all meta tags from the HTML (default: false)"
                                },
                                "cleanHtml": {
                                    "type": "boolean",
                                    "description": "Perform comprehensive HTML cleaning (default: false)"
                                },
                                "minify": {
                                    "type": "boolean",
                                    "description": "Minify the HTML output (default: false)"
                                },
                                "maxLength": {
                                    "type": "number",
                                    "description": "Maximum number of characters to return (default: 20000)"
                                }
                            },
                            "required": []
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_go_back",
                        "description": "Navigate back in browser history",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_go_forward",
                        "description": "Navigate forward in browser history",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_drag",
                        "description": "Drag an element to a target location",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "sourceSelector": {
                                    "type": "string",
                                    "description": "CSS selector for the element to drag"
                                },
                                "targetSelector": {
                                    "type": "string",
                                    "description": "CSS selector for the target location"
                                }
                            },
                            "required": [
                                "sourceSelector",
                                "targetSelector"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_press_key",
                        "description": "Press a keyboard key",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string",
                                    "description": "Key to press (e.g. 'Enter', 'ArrowDown', 'a')"
                                },
                                "selector": {
                                    "type": "string",
                                    "description": "Optional CSS selector to focus before pressing key"
                                }
                            },
                            "required": [
                                "key"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_save_as_pdf",
                        "description": "Save the current page as a PDF file",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "outputPath": {
                                    "type": "string",
                                    "description": "Directory path where PDF will be saved"
                                },
                                "filename": {
                                    "type": "string",
                                    "description": "Name of the PDF file (default: page.pdf)"
                                },
                                "format": {
                                    "type": "string",
                                    "description": "Page format (e.g. 'A4', 'Letter')"
                                },
                                "printBackground": {
                                    "type": "boolean",
                                    "description": "Whether to print background graphics"
                                },
                                "margin": {
                                    "type": "object",
                                    "description": "Page margins",
                                    "properties": {
                                        "top": {
                                            "type": "string"
                                        },
                                        "right": {
                                            "type": "string"
                                        },
                                        "bottom": {
                                            "type": "string"
                                        },
                                        "left": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "required": [
                                "outputPath"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "playwright_click_and_switch_tab",
                        "description": "Click a link and switch to the newly opened tab",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for the link to click"
                                }
                            },
                            "required": [
                                "selector"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Office-PowerPoint-MCP-Server",
        "description": "A comprehensive MCP (Model Context Protocol) server for PowerPoint manipulation using python-pptx. Version 2.0 provides 32 powerful tools organized into 11 specialized modules, offering complete PowerPoint creation, management, and professional design capabilities. The server features a modular architecture with enhanced parameter handling, intelligent operation selection, and comprehensive error handling.",
        "web": "https://github.com/GongRzhe/Office-PowerPoint-MCP-Server",
        "config": {
            "mcpServers": {
                "ppt": {
                    "command": "uvx",
                    "args": [
                        "--from",
                        "office-powerpoint-mcp-server",
                        "ppt_mcp_server"
                    ]
                }
            }
        },
        "category": "Visualization",
        "tools": {
            "ppt": {
                "server_name": "ppt",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "create_presentation",
                        "description": "Create a new PowerPoint presentation.",
                        "inputSchema": {
                            "properties": {
                                "id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Id"
                                }
                            },
                            "title": "create_presentationArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "create_presentationOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "create_presentation_from_template",
                        "description": "Create a new PowerPoint presentation from a template file.",
                        "inputSchema": {
                            "properties": {
                                "template_path": {
                                    "title": "Template Path",
                                    "type": "string"
                                },
                                "id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Id"
                                }
                            },
                            "required": [
                                "template_path"
                            ],
                            "title": "create_presentation_from_templateArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "create_presentation_from_templateOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "open_presentation",
                        "description": "Open an existing PowerPoint presentation from a file.",
                        "inputSchema": {
                            "properties": {
                                "file_path": {
                                    "title": "File Path",
                                    "type": "string"
                                },
                                "id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Id"
                                }
                            },
                            "required": [
                                "file_path"
                            ],
                            "title": "open_presentationArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "open_presentationOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "save_presentation",
                        "description": "Save a presentation to a file.",
                        "inputSchema": {
                            "properties": {
                                "file_path": {
                                    "title": "File Path",
                                    "type": "string"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "file_path"
                            ],
                            "title": "save_presentationArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "save_presentationOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_presentation_info",
                        "description": "Get information about a presentation.",
                        "inputSchema": {
                            "properties": {
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "title": "get_presentation_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_presentation_infoOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_template_file_info",
                        "description": "Get information about a template file including layouts and properties.",
                        "inputSchema": {
                            "properties": {
                                "template_path": {
                                    "title": "Template Path",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "template_path"
                            ],
                            "title": "get_template_file_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_template_file_infoOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "set_core_properties",
                        "description": "Set core document properties.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Title"
                                },
                                "subject": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Subject"
                                },
                                "author": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Author"
                                },
                                "keywords": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Keywords"
                                },
                                "comments": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Comments"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "title": "set_core_propertiesArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "set_core_propertiesOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "add_slide",
                        "description": "Add a new slide to the presentation with optional background styling.",
                        "inputSchema": {
                            "properties": {
                                "layout_index": {
                                    "default": 1,
                                    "title": "Layout Index",
                                    "type": "integer"
                                },
                                "title": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Title"
                                },
                                "background_type": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Background Type"
                                },
                                "background_colors": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "items": {
                                                    "type": "integer"
                                                },
                                                "type": "array"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Background Colors"
                                },
                                "gradient_direction": {
                                    "default": "horizontal",
                                    "title": "Gradient Direction",
                                    "type": "string"
                                },
                                "color_scheme": {
                                    "default": "modern_blue",
                                    "title": "Color Scheme",
                                    "type": "string"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "title": "add_slideArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "add_slideOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_slide_info",
                        "description": "Get information about a specific slide.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index"
                            ],
                            "title": "get_slide_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_slide_infoOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "extract_slide_text",
                        "description": "Extract all text content from a specific slide.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index"
                            ],
                            "title": "extract_slide_textArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "extract_slide_textOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "extract_presentation_text",
                        "description": "Extract all text content from all slides in the presentation.",
                        "inputSchema": {
                            "properties": {
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                },
                                "include_slide_info": {
                                    "default": true,
                                    "title": "Include Slide Info",
                                    "type": "boolean"
                                }
                            },
                            "title": "extract_presentation_textArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "extract_presentation_textOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "populate_placeholder",
                        "description": "Populate a placeholder with text.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "placeholder_idx": {
                                    "title": "Placeholder Idx",
                                    "type": "integer"
                                },
                                "text": {
                                    "title": "Text",
                                    "type": "string"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "placeholder_idx",
                                "text"
                            ],
                            "title": "populate_placeholderArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "populate_placeholderOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "add_bullet_points",
                        "description": "Add bullet points to a placeholder.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "placeholder_idx": {
                                    "title": "Placeholder Idx",
                                    "type": "integer"
                                },
                                "bullet_points": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Bullet Points",
                                    "type": "array"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "placeholder_idx",
                                "bullet_points"
                            ],
                            "title": "add_bullet_pointsArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "add_bullet_pointsOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "manage_text",
                        "description": "Unified text management tool for adding, formatting, validating text, and formatting multiple text runs.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "operation": {
                                    "title": "Operation",
                                    "type": "string"
                                },
                                "left": {
                                    "default": 1.0,
                                    "title": "Left",
                                    "type": "number"
                                },
                                "top": {
                                    "default": 1.0,
                                    "title": "Top",
                                    "type": "number"
                                },
                                "width": {
                                    "default": 4.0,
                                    "title": "Width",
                                    "type": "number"
                                },
                                "height": {
                                    "default": 2.0,
                                    "title": "Height",
                                    "type": "number"
                                },
                                "text": {
                                    "default": "",
                                    "title": "Text",
                                    "type": "string"
                                },
                                "shape_index": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Shape Index"
                                },
                                "text_runs": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "additionalProperties": true,
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Text Runs"
                                },
                                "font_size": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Font Size"
                                },
                                "font_name": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Font Name"
                                },
                                "bold": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Bold"
                                },
                                "italic": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Italic"
                                },
                                "underline": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Underline"
                                },
                                "color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Color"
                                },
                                "bg_color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Bg Color"
                                },
                                "alignment": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Alignment"
                                },
                                "vertical_alignment": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Vertical Alignment"
                                },
                                "auto_fit": {
                                    "default": true,
                                    "title": "Auto Fit",
                                    "type": "boolean"
                                },
                                "validation_only": {
                                    "default": false,
                                    "title": "Validation Only",
                                    "type": "boolean"
                                },
                                "min_font_size": {
                                    "default": 8,
                                    "title": "Min Font Size",
                                    "type": "integer"
                                },
                                "max_font_size": {
                                    "default": 72,
                                    "title": "Max Font Size",
                                    "type": "integer"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "operation"
                            ],
                            "title": "manage_textArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "manage_textOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "manage_image",
                        "description": "Unified image management tool for adding and enhancing images.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "operation": {
                                    "title": "Operation",
                                    "type": "string"
                                },
                                "image_source": {
                                    "title": "Image Source",
                                    "type": "string"
                                },
                                "source_type": {
                                    "default": "file",
                                    "title": "Source Type",
                                    "type": "string"
                                },
                                "left": {
                                    "default": 1.0,
                                    "title": "Left",
                                    "type": "number"
                                },
                                "top": {
                                    "default": 1.0,
                                    "title": "Top",
                                    "type": "number"
                                },
                                "width": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Width"
                                },
                                "height": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Height"
                                },
                                "enhancement_style": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Enhancement Style"
                                },
                                "brightness": {
                                    "default": 1.0,
                                    "title": "Brightness",
                                    "type": "number"
                                },
                                "contrast": {
                                    "default": 1.0,
                                    "title": "Contrast",
                                    "type": "number"
                                },
                                "saturation": {
                                    "default": 1.0,
                                    "title": "Saturation",
                                    "type": "number"
                                },
                                "sharpness": {
                                    "default": 1.0,
                                    "title": "Sharpness",
                                    "type": "number"
                                },
                                "blur_radius": {
                                    "default": 0,
                                    "title": "Blur Radius",
                                    "type": "number"
                                },
                                "filter_type": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Filter Type"
                                },
                                "output_path": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Output Path"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "operation",
                                "image_source"
                            ],
                            "title": "manage_imageArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "manage_imageOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "add_table",
                        "description": "Add a table to a slide with enhanced formatting options.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "rows": {
                                    "title": "Rows",
                                    "type": "integer"
                                },
                                "cols": {
                                    "title": "Cols",
                                    "type": "integer"
                                },
                                "left": {
                                    "title": "Left",
                                    "type": "number"
                                },
                                "top": {
                                    "title": "Top",
                                    "type": "number"
                                },
                                "width": {
                                    "title": "Width",
                                    "type": "number"
                                },
                                "height": {
                                    "title": "Height",
                                    "type": "number"
                                },
                                "data": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Data"
                                },
                                "header_row": {
                                    "default": true,
                                    "title": "Header Row",
                                    "type": "boolean"
                                },
                                "header_font_size": {
                                    "default": 12,
                                    "title": "Header Font Size",
                                    "type": "integer"
                                },
                                "body_font_size": {
                                    "default": 10,
                                    "title": "Body Font Size",
                                    "type": "integer"
                                },
                                "header_bg_color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Header Bg Color"
                                },
                                "body_bg_color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Body Bg Color"
                                },
                                "border_color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Border Color"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "rows",
                                "cols",
                                "left",
                                "top",
                                "width",
                                "height"
                            ],
                            "title": "add_tableArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "add_tableOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "format_table_cell",
                        "description": "Format a specific table cell.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "shape_index": {
                                    "title": "Shape Index",
                                    "type": "integer"
                                },
                                "row": {
                                    "title": "Row",
                                    "type": "integer"
                                },
                                "col": {
                                    "title": "Col",
                                    "type": "integer"
                                },
                                "font_size": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Font Size"
                                },
                                "font_name": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Font Name"
                                },
                                "bold": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Bold"
                                },
                                "italic": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Italic"
                                },
                                "color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Color"
                                },
                                "bg_color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Bg Color"
                                },
                                "alignment": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Alignment"
                                },
                                "vertical_alignment": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Vertical Alignment"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "shape_index",
                                "row",
                                "col"
                            ],
                            "title": "format_table_cellArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "format_table_cellOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "add_shape",
                        "description": "Add an auto shape to a slide with enhanced options.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "shape_type": {
                                    "title": "Shape Type",
                                    "type": "string"
                                },
                                "left": {
                                    "title": "Left",
                                    "type": "number"
                                },
                                "top": {
                                    "title": "Top",
                                    "type": "number"
                                },
                                "width": {
                                    "title": "Width",
                                    "type": "number"
                                },
                                "height": {
                                    "title": "Height",
                                    "type": "number"
                                },
                                "fill_color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Fill Color"
                                },
                                "line_color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Line Color"
                                },
                                "line_width": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Line Width"
                                },
                                "text": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Text"
                                },
                                "font_size": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Font Size"
                                },
                                "font_color": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Font Color"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "shape_type",
                                "left",
                                "top",
                                "width",
                                "height"
                            ],
                            "title": "add_shapeArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "add_shapeOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "add_chart",
                        "description": "Add a chart to a slide with comprehensive formatting options.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "chart_type": {
                                    "title": "Chart Type",
                                    "type": "string"
                                },
                                "left": {
                                    "title": "Left",
                                    "type": "number"
                                },
                                "top": {
                                    "title": "Top",
                                    "type": "number"
                                },
                                "width": {
                                    "title": "Width",
                                    "type": "number"
                                },
                                "height": {
                                    "title": "Height",
                                    "type": "number"
                                },
                                "categories": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Categories",
                                    "type": "array"
                                },
                                "series_names": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Series Names",
                                    "type": "array"
                                },
                                "series_values": {
                                    "items": {
                                        "items": {
                                            "type": "number"
                                        },
                                        "type": "array"
                                    },
                                    "title": "Series Values",
                                    "type": "array"
                                },
                                "has_legend": {
                                    "default": true,
                                    "title": "Has Legend",
                                    "type": "boolean"
                                },
                                "legend_position": {
                                    "default": "right",
                                    "title": "Legend Position",
                                    "type": "string"
                                },
                                "has_data_labels": {
                                    "default": false,
                                    "title": "Has Data Labels",
                                    "type": "boolean"
                                },
                                "title": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Title"
                                },
                                "x_axis_title": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "X Axis Title"
                                },
                                "y_axis_title": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Y Axis Title"
                                },
                                "color_scheme": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Color Scheme"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "chart_type",
                                "left",
                                "top",
                                "width",
                                "height",
                                "categories",
                                "series_names",
                                "series_values"
                            ],
                            "title": "add_chartArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "add_chartOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "apply_professional_design",
                        "description": "Unified professional design tool for themes, slides, and visual enhancements.\nThis applies professional styling and themes rather than structural layout changes.",
                        "inputSchema": {
                            "properties": {
                                "operation": {
                                    "title": "Operation",
                                    "type": "string"
                                },
                                "slide_index": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Slide Index"
                                },
                                "slide_type": {
                                    "default": "title_content",
                                    "title": "Slide Type",
                                    "type": "string"
                                },
                                "color_scheme": {
                                    "default": "modern_blue",
                                    "title": "Color Scheme",
                                    "type": "string"
                                },
                                "title": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Title"
                                },
                                "content": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Content"
                                },
                                "apply_to_existing": {
                                    "default": true,
                                    "title": "Apply To Existing",
                                    "type": "boolean"
                                },
                                "enhance_title": {
                                    "default": true,
                                    "title": "Enhance Title",
                                    "type": "boolean"
                                },
                                "enhance_content": {
                                    "default": true,
                                    "title": "Enhance Content",
                                    "type": "boolean"
                                },
                                "enhance_shapes": {
                                    "default": true,
                                    "title": "Enhance Shapes",
                                    "type": "boolean"
                                },
                                "enhance_charts": {
                                    "default": true,
                                    "title": "Enhance Charts",
                                    "type": "boolean"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "operation"
                            ],
                            "title": "apply_professional_designArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "apply_professional_designOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "apply_picture_effects",
                        "description": "Apply multiple picture effects in combination.",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "shape_index": {
                                    "title": "Shape Index",
                                    "type": "integer"
                                },
                                "effects": {
                                    "additionalProperties": {
                                        "additionalProperties": true,
                                        "type": "object"
                                    },
                                    "title": "Effects",
                                    "type": "object"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "shape_index",
                                "effects"
                            ],
                            "title": "apply_picture_effectsArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "apply_picture_effectsOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "manage_fonts",
                        "description": "Unified font management tool for analysis, optimization, and recommendations.",
                        "inputSchema": {
                            "properties": {
                                "operation": {
                                    "title": "Operation",
                                    "type": "string"
                                },
                                "font_path": {
                                    "title": "Font Path",
                                    "type": "string"
                                },
                                "output_path": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Output Path"
                                },
                                "presentation_type": {
                                    "default": "business",
                                    "title": "Presentation Type",
                                    "type": "string"
                                },
                                "text_content": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Text Content"
                                }
                            },
                            "required": [
                                "operation",
                                "font_path"
                            ],
                            "title": "manage_fontsArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "manage_fontsOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "list_slide_templates",
                        "description": "List all available slide layout templates.",
                        "inputSchema": {
                            "properties": {},
                            "title": "list_slide_templatesArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "list_slide_templatesOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "apply_slide_template",
                        "description": "\nApply a structured layout template to an existing slide.\nThis modifies slide layout and content structure using predefined templates.\n\nArgs:\n    slide_index: Index of the slide to apply template to\n    template_id: ID of the template to apply (e.g., 'title_slide', 'text_with_image')\n    color_scheme: Color scheme to use ('modern_blue', 'corporate_gray', 'elegant_green', 'warm_red')\n    content_mapping: Dictionary mapping element roles to custom content\n    image_paths: Dictionary mapping image element roles to file paths\n    presentation_id: Presentation ID (uses current if None)\n",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "template_id": {
                                    "title": "Template Id",
                                    "type": "string"
                                },
                                "color_scheme": {
                                    "default": "modern_blue",
                                    "title": "Color Scheme",
                                    "type": "string"
                                },
                                "content_mapping": {
                                    "anyOf": [
                                        {
                                            "additionalProperties": {
                                                "type": "string"
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Content Mapping"
                                },
                                "image_paths": {
                                    "anyOf": [
                                        {
                                            "additionalProperties": {
                                                "type": "string"
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Image Paths"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index",
                                "template_id"
                            ],
                            "title": "apply_slide_templateArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "apply_slide_templateOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "create_slide_from_template",
                        "description": "\nCreate a new slide using a layout template.\n\nArgs:\n    template_id: ID of the template to use (e.g., 'title_slide', 'text_with_image')\n    color_scheme: Color scheme to use ('modern_blue', 'corporate_gray', 'elegant_green', 'warm_red')\n    content_mapping: Dictionary mapping element roles to custom content\n    image_paths: Dictionary mapping image element roles to file paths\n    layout_index: PowerPoint layout index to use as base (default: 1)\n    presentation_id: Presentation ID (uses current if None)\n",
                        "inputSchema": {
                            "properties": {
                                "template_id": {
                                    "title": "Template Id",
                                    "type": "string"
                                },
                                "color_scheme": {
                                    "default": "modern_blue",
                                    "title": "Color Scheme",
                                    "type": "string"
                                },
                                "content_mapping": {
                                    "anyOf": [
                                        {
                                            "additionalProperties": {
                                                "type": "string"
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Content Mapping"
                                },
                                "image_paths": {
                                    "anyOf": [
                                        {
                                            "additionalProperties": {
                                                "type": "string"
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Image Paths"
                                },
                                "layout_index": {
                                    "default": 1,
                                    "title": "Layout Index",
                                    "type": "integer"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "template_id"
                            ],
                            "title": "create_slide_from_templateArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "create_slide_from_templateOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "create_presentation_from_templates",
                        "description": "\nCreate a complete presentation from a sequence of templates.\n\nArgs:\n    template_sequence: List of template configurations, each containing:\n        - template_id: Template to use\n        - content: Content mapping for the template\n        - images: Image path mapping for the template\n    color_scheme: Color scheme to apply to all slides\n    presentation_title: Optional title for the presentation\n    presentation_id: Presentation ID (uses current if None)\n\nExample template_sequence:\n[\n    {\n        \"template_id\": \"title_slide\",\n        \"content\": {\n            \"title\": \"My Presentation\",\n            \"subtitle\": \"Annual Report 2024\",\n            \"author\": \"John Doe\"\n        }\n    },\n    {\n        \"template_id\": \"text_with_image\",\n        \"content\": {\n            \"title\": \"Key Results\",\n            \"content\": \"• Achievement 1\\n• Achievement 2\"\n        },\n        \"images\": {\n            \"supporting\": \"/path/to/image.jpg\"\n        }\n    }\n]\n",
                        "inputSchema": {
                            "properties": {
                                "template_sequence": {
                                    "items": {
                                        "additionalProperties": true,
                                        "type": "object"
                                    },
                                    "title": "Template Sequence",
                                    "type": "array"
                                },
                                "color_scheme": {
                                    "default": "modern_blue",
                                    "title": "Color Scheme",
                                    "type": "string"
                                },
                                "presentation_title": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Title"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "template_sequence"
                            ],
                            "title": "create_presentation_from_templatesArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "create_presentation_from_templatesOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_template_info",
                        "description": "\nGet detailed information about a specific template.\n\nArgs:\n    template_id: ID of the template to get information about\n",
                        "inputSchema": {
                            "properties": {
                                "template_id": {
                                    "title": "Template Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "template_id"
                            ],
                            "title": "get_template_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_template_infoOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "auto_generate_presentation",
                        "description": "\nAutomatically generate a presentation based on topic and preferences.\n\nArgs:\n    topic: Main topic/theme for the presentation\n    slide_count: Number of slides to generate (3-20)\n    presentation_type: Type of presentation ('business', 'academic', 'creative')\n    color_scheme: Color scheme to use\n    include_charts: Whether to include chart slides\n    include_images: Whether to include image placeholders\n    presentation_id: Presentation ID (uses current if None)\n",
                        "inputSchema": {
                            "properties": {
                                "topic": {
                                    "title": "Topic",
                                    "type": "string"
                                },
                                "slide_count": {
                                    "default": 5,
                                    "title": "Slide Count",
                                    "type": "integer"
                                },
                                "presentation_type": {
                                    "default": "business",
                                    "title": "Presentation Type",
                                    "type": "string"
                                },
                                "color_scheme": {
                                    "default": "modern_blue",
                                    "title": "Color Scheme",
                                    "type": "string"
                                },
                                "include_charts": {
                                    "default": true,
                                    "title": "Include Charts",
                                    "type": "boolean"
                                },
                                "include_images": {
                                    "default": false,
                                    "title": "Include Images",
                                    "type": "boolean"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "topic"
                            ],
                            "title": "auto_generate_presentationArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "auto_generate_presentationOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "optimize_slide_text",
                        "description": "\nOptimize text elements on a slide for better readability and fit.\n\nArgs:\n    slide_index: Index of the slide to optimize\n    auto_resize: Whether to automatically resize fonts to fit containers\n    auto_wrap: Whether to apply intelligent text wrapping\n    optimize_spacing: Whether to optimize line spacing\n    min_font_size: Minimum allowed font size\n    max_font_size: Maximum allowed font size\n    presentation_id: Presentation ID (uses current if None)\n",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "auto_resize": {
                                    "default": true,
                                    "title": "Auto Resize",
                                    "type": "boolean"
                                },
                                "auto_wrap": {
                                    "default": true,
                                    "title": "Auto Wrap",
                                    "type": "boolean"
                                },
                                "optimize_spacing": {
                                    "default": true,
                                    "title": "Optimize Spacing",
                                    "type": "boolean"
                                },
                                "min_font_size": {
                                    "default": 8,
                                    "title": "Min Font Size",
                                    "type": "integer"
                                },
                                "max_font_size": {
                                    "default": 36,
                                    "title": "Max Font Size",
                                    "type": "integer"
                                },
                                "presentation_id": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Presentation Id"
                                }
                            },
                            "required": [
                                "slide_index"
                            ],
                            "title": "optimize_slide_textArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "optimize_slide_textOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "manage_hyperlinks",
                        "description": "\nManage hyperlinks in text shapes and runs.\n\nArgs:\n    operation: Operation type (\"add\", \"remove\", \"list\", \"update\")\n    slide_index: Index of the slide (0-based)\n    shape_index: Index of the shape on the slide (0-based)\n    text: Text to make into hyperlink (for \"add\" operation)\n    url: URL for the hyperlink\n    run_index: Index of text run within the shape (0-based)\n    presentation_id: Optional presentation ID (uses current if not provided)\n    \nReturns:\n    Dictionary with operation results\n",
                        "inputSchema": {
                            "properties": {
                                "operation": {
                                    "title": "Operation",
                                    "type": "string"
                                },
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "shape_index": {
                                    "default": null,
                                    "title": "Shape Index",
                                    "type": "integer"
                                },
                                "text": {
                                    "default": null,
                                    "title": "Text",
                                    "type": "string"
                                },
                                "url": {
                                    "default": null,
                                    "title": "Url",
                                    "type": "string"
                                },
                                "run_index": {
                                    "default": 0,
                                    "title": "Run Index",
                                    "type": "integer"
                                },
                                "presentation_id": {
                                    "default": null,
                                    "title": "Presentation Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "operation",
                                "slide_index"
                            ],
                            "title": "manage_hyperlinksArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "manage_hyperlinksOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "update_chart_data",
                        "description": "\nReplace existing chart data with new categories and series.\n\nArgs:\n    slide_index: Index of the slide (0-based)\n    shape_index: Index of the chart shape (0-based)\n    categories: List of category names\n    series_data: List of dictionaries with 'name' and 'values' keys\n    presentation_id: Optional presentation ID (uses current if not provided)\n    \nReturns:\n    Dictionary with operation results\n",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "shape_index": {
                                    "title": "Shape Index",
                                    "type": "integer"
                                },
                                "categories": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Categories",
                                    "type": "array"
                                },
                                "series_data": {
                                    "items": {
                                        "additionalProperties": true,
                                        "type": "object"
                                    },
                                    "title": "Series Data",
                                    "type": "array"
                                },
                                "presentation_id": {
                                    "default": null,
                                    "title": "Presentation Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "slide_index",
                                "shape_index",
                                "categories",
                                "series_data"
                            ],
                            "title": "update_chart_dataArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "update_chart_dataOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "add_connector",
                        "description": "\nAdd connector lines/arrows between points on a slide.\n\nArgs:\n    slide_index: Index of the slide (0-based)\n    connector_type: Type of connector (\"straight\", \"elbow\", \"curved\")\n    start_x: Starting X coordinate in inches\n    start_y: Starting Y coordinate in inches\n    end_x: Ending X coordinate in inches  \n    end_y: Ending Y coordinate in inches\n    line_width: Width of the connector line in points\n    color: RGB color as [r, g, b] list\n    presentation_id: Optional presentation ID (uses current if not provided)\n    \nReturns:\n    Dictionary with operation results\n",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "connector_type": {
                                    "title": "Connector Type",
                                    "type": "string"
                                },
                                "start_x": {
                                    "title": "Start X",
                                    "type": "number"
                                },
                                "start_y": {
                                    "title": "Start Y",
                                    "type": "number"
                                },
                                "end_x": {
                                    "title": "End X",
                                    "type": "number"
                                },
                                "end_y": {
                                    "title": "End Y",
                                    "type": "number"
                                },
                                "line_width": {
                                    "default": 1.0,
                                    "title": "Line Width",
                                    "type": "number"
                                },
                                "color": {
                                    "default": null,
                                    "items": {
                                        "type": "integer"
                                    },
                                    "title": "Color",
                                    "type": "array"
                                },
                                "presentation_id": {
                                    "default": null,
                                    "title": "Presentation Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "slide_index",
                                "connector_type",
                                "start_x",
                                "start_y",
                                "end_x",
                                "end_y"
                            ],
                            "title": "add_connectorArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "add_connectorOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "manage_slide_masters",
                        "description": "\nAccess and manage slide master properties and layouts.\n\nArgs:\n    operation: Operation type (\"list\", \"get_layouts\", \"get_info\")\n    master_index: Index of the slide master (0-based)\n    layout_index: Index of specific layout within master (0-based)\n    presentation_id: Optional presentation ID (uses current if not provided)\n    \nReturns:\n    Dictionary with slide master information\n",
                        "inputSchema": {
                            "properties": {
                                "operation": {
                                    "title": "Operation",
                                    "type": "string"
                                },
                                "master_index": {
                                    "default": 0,
                                    "title": "Master Index",
                                    "type": "integer"
                                },
                                "layout_index": {
                                    "default": null,
                                    "title": "Layout Index",
                                    "type": "integer"
                                },
                                "presentation_id": {
                                    "default": null,
                                    "title": "Presentation Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "operation"
                            ],
                            "title": "manage_slide_mastersArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "manage_slide_mastersOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "manage_slide_transitions",
                        "description": "\nManage slide transitions and timing.\n\nArgs:\n    slide_index: Index of the slide (0-based)\n    operation: Operation type (\"set\", \"remove\", \"get\")\n    transition_type: Type of transition (basic support)\n    duration: Duration of transition in seconds\n    presentation_id: Optional presentation ID (uses current if not provided)\n    \nReturns:\n    Dictionary with transition information\n",
                        "inputSchema": {
                            "properties": {
                                "slide_index": {
                                    "title": "Slide Index",
                                    "type": "integer"
                                },
                                "operation": {
                                    "title": "Operation",
                                    "type": "string"
                                },
                                "transition_type": {
                                    "default": null,
                                    "title": "Transition Type",
                                    "type": "string"
                                },
                                "duration": {
                                    "default": 1.0,
                                    "title": "Duration",
                                    "type": "number"
                                },
                                "presentation_id": {
                                    "default": null,
                                    "title": "Presentation Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "slide_index",
                                "operation"
                            ],
                            "title": "manage_slide_transitionsArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "manage_slide_transitionsOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "list_presentations",
                        "description": "List all loaded presentations.",
                        "inputSchema": {
                            "properties": {},
                            "title": "list_presentationsArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "list_presentationsOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "switch_presentation",
                        "description": "Switch to a different loaded presentation.",
                        "inputSchema": {
                            "properties": {
                                "presentation_id": {
                                    "title": "Presentation Id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "presentation_id"
                            ],
                            "title": "switch_presentationArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "switch_presentationOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_server_info",
                        "description": "Get information about the MCP server.",
                        "inputSchema": {
                            "properties": {},
                            "title": "get_server_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_server_infoOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "investor-agent: A Financial Analysis MCP Server",
        "description": "The investor-agent is a Model Context Protocol (MCP) server that provides comprehensive financial insights and analysis to Large Language Models. It leverages real-time market data, fundamental and technical analysis to deliver.",
        "web": "https://github.com/ferdousbhai/investor-agent",
        "config": {
            "mcpServers": {
                "investor": {
                    "command": "uvx",
                    "args": [
                        "investor-agent"
                    ]
                }
            }
        },
        "category": "Finance",
        "tools": {
            "investor": {
                "server_name": "investor",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_market_movers",
                        "description": "\nGet market movers: top gainers, losers, or most active stocks.\nSupports different market sessions for most-active category.\n\nArgs:\n    category: Type of movers to fetch\n    count: Number of stocks to return (max 100)\n    market_session: Market session (only applies to most-active category)\n\nReturns:\n    Dictionary with market mover data\n",
                        "inputSchema": {
                            "properties": {
                                "category": {
                                    "default": "most-active",
                                    "enum": [
                                        "gainers",
                                        "losers",
                                        "most-active"
                                    ],
                                    "title": "Category",
                                    "type": "string"
                                },
                                "count": {
                                    "default": 25,
                                    "title": "Count",
                                    "type": "integer"
                                },
                                "market_session": {
                                    "default": "regular",
                                    "enum": [
                                        "regular",
                                        "pre-market",
                                        "after-hours"
                                    ],
                                    "title": "Market Session",
                                    "type": "string"
                                }
                            },
                            "title": "get_market_moversArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_cnn_fear_greed_index",
                        "description": "Max 30 days of historical data.",
                        "inputSchema": {
                            "properties": {
                                "days": {
                                    "default": 0,
                                    "title": "Days",
                                    "type": "integer"
                                },
                                "indicators": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "enum": [
                                                    "fear_and_greed",
                                                    "fear_and_greed_historical",
                                                    "put_call_options",
                                                    "market_volatility_vix",
                                                    "market_volatility_vix_50",
                                                    "junk_bond_demand",
                                                    "safe_haven_demand"
                                                ],
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Indicators"
                                }
                            },
                            "title": "get_cnn_fear_greed_indexArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_crypto_fear_greed_index",
                        "description": "Get historical Crypto Fear & Greed Index data.",
                        "inputSchema": {
                            "properties": {
                                "days": {
                                    "default": 7,
                                    "title": "Days",
                                    "type": "integer"
                                }
                            },
                            "title": "get_crypto_fear_greed_indexArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_google_trends",
                        "description": "Get Google Trends relative search interest for specified keywords.",
                        "inputSchema": {
                            "properties": {
                                "keywords": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Keywords",
                                    "type": "array"
                                },
                                "period_days": {
                                    "default": 7,
                                    "title": "Period Days",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "keywords"
                            ],
                            "title": "get_google_trendsArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_ticker_data",
                        "description": "\nReturns:\n- info: Core financial metrics (P/E ratios, margins, growth rates, debt ratios, market cap, EPS, etc.)\n- calendar: Upcoming earnings dates and dividend dates\n- news: Recent news articles (headlines, dates, sources)\n- recommendations: Latest analyst recommendations (buy/sell/hold ratings)\n- upgrades_downgrades: Recent analyst rating changes\n",
                        "inputSchema": {
                            "properties": {
                                "ticker": {
                                    "title": "Ticker",
                                    "type": "string"
                                },
                                "max_news": {
                                    "default": 5,
                                    "title": "Max News",
                                    "type": "integer"
                                },
                                "max_recommendations": {
                                    "default": 5,
                                    "title": "Max Recommendations",
                                    "type": "integer"
                                },
                                "max_upgrades": {
                                    "default": 5,
                                    "title": "Max Upgrades",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "ticker"
                            ],
                            "title": "get_ticker_dataArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_options",
                        "description": "Get options data. Dates: YYYY-MM-DD. Type: C=calls, P=puts.",
                        "inputSchema": {
                            "properties": {
                                "ticker_symbol": {
                                    "title": "Ticker Symbol",
                                    "type": "string"
                                },
                                "num_options": {
                                    "default": 10,
                                    "title": "Num Options",
                                    "type": "integer"
                                },
                                "start_date": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Start Date"
                                },
                                "end_date": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "End Date"
                                },
                                "strike_lower": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Strike Lower"
                                },
                                "strike_upper": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Strike Upper"
                                },
                                "option_type": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "C",
                                                "P"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Option Type"
                                }
                            },
                            "required": [
                                "ticker_symbol"
                            ],
                            "title": "get_optionsArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_price_history",
                        "description": "Get historical OHLCV data: daily intervals for ≤1y periods, monthly intervals for ≥2y periods.",
                        "inputSchema": {
                            "properties": {
                                "ticker": {
                                    "title": "Ticker",
                                    "type": "string"
                                },
                                "period": {
                                    "default": "1mo",
                                    "enum": [
                                        "1d",
                                        "5d",
                                        "1mo",
                                        "3mo",
                                        "6mo",
                                        "1y",
                                        "2y",
                                        "5y",
                                        "10y",
                                        "ytd",
                                        "max"
                                    ],
                                    "title": "Period",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ticker"
                            ],
                            "title": "get_price_historyArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_financial_statements",
                        "description": "",
                        "inputSchema": {
                            "properties": {
                                "ticker": {
                                    "title": "Ticker",
                                    "type": "string"
                                },
                                "statement_type": {
                                    "default": "income",
                                    "enum": [
                                        "income",
                                        "balance",
                                        "cash"
                                    ],
                                    "title": "Statement Type",
                                    "type": "string"
                                },
                                "frequency": {
                                    "default": "quarterly",
                                    "enum": [
                                        "quarterly",
                                        "annual"
                                    ],
                                    "title": "Frequency",
                                    "type": "string"
                                },
                                "max_periods": {
                                    "default": 8,
                                    "title": "Max Periods",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "ticker"
                            ],
                            "title": "get_financial_statementsArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_institutional_holders",
                        "description": "Get major institutional and mutual fund holders.",
                        "inputSchema": {
                            "properties": {
                                "ticker": {
                                    "title": "Ticker",
                                    "type": "string"
                                },
                                "top_n": {
                                    "default": 20,
                                    "title": "Top N",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "ticker"
                            ],
                            "title": "get_institutional_holdersArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_earnings_history",
                        "description": "",
                        "inputSchema": {
                            "properties": {
                                "ticker": {
                                    "title": "Ticker",
                                    "type": "string"
                                },
                                "max_entries": {
                                    "default": 8,
                                    "title": "Max Entries",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "ticker"
                            ],
                            "title": "get_earnings_historyArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_insider_trades",
                        "description": "",
                        "inputSchema": {
                            "properties": {
                                "ticker": {
                                    "title": "Ticker",
                                    "type": "string"
                                },
                                "max_trades": {
                                    "default": 20,
                                    "title": "Max Trades",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "ticker"
                            ],
                            "title": "get_insider_tradesArguments",
                            "type": "object"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP OKPPT Server",
        "organization": "NeekChaw",
        "description": "一个基于Model Context Protocol (MCP)的服务器工具，专门用于将SVG图像插入到PowerPoint演示文稿中。它能够保留SVG的矢量特性，确保在PowerPoint中显示的图像保持高品质和可缩放性。",
        "web": "https://github.com/NeekChaw/mcp-server-okppt",
        "config": {
            "mcpServers": {
                "okppt": {
                    "command": "uvx",
                    "args": [
                        "mcp-server-okppt"
                    ]
                }
            }
        },
        "category": "Visualization",
        "tools": {
            "okppt": {
                "server_name": "okppt",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "insert_svg",
                        "description": "\n将SVG图像插入到PPTX文件的指定位置。(如果需要替换已有的幻灯片，请组合使用`delete_slide`和`insert_blank_slide`功能)\n如果未提供PPTX路径，将自动创建一个临时文件，位于服务器同级目录的tmp目录。\n如果未提供输出路径，将使用标准输出目录，位于服务器同级目录的output目录。\n如果未提供坐标，默认对齐幻灯片左上角。\n如果未提供宽度和高度，默认覆盖整个幻灯片（16:9）。\n\n支持批量处理：\n- 如果svg_path是单个字符串数组，则将SVG添加到slide_number指定的页面\n- 如果svg_path是列表，则从slide_number开始顺序添加每个SVG，即第一个SVG添加到\n  slide_number页，第二个添加到slide_number+1页，依此类推\n\nArgs:\n    pptx_path: PPTX文件路径，如果未提供则自动创建一个临时文件，最好使用英文路径\n    svg_path: SVG文件路径或SVG文件路径列表，最好使用英文路径\n    slide_number: 起始幻灯片编号（从1开始）\n    x_inches: X坐标（英寸），如果未指定则默认为0\n    y_inches: Y坐标（英寸），如果未指定则默认为0\n    width_inches: 宽度（英寸），如果未指定则使用幻灯片宽度\n    height_inches: 高度（英寸），如果未指定则根据宽度计算或使用幻灯片高度\n    output_path: 输出文件路径，如果未指定则使用标准输出目录\n    create_if_not_exists: 如果为True且PPTX文件不存在，将自动创建一个新文件\n    \nReturns:\n    操作结果消息，包含详细的错误信息（如果有）\n",
                        "inputSchema": {
                            "properties": {
                                "pptx_path": {
                                    "title": "Pptx Path",
                                    "type": "string"
                                },
                                "svg_path": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Svg Path",
                                    "type": "array"
                                },
                                "slide_number": {
                                    "default": 1,
                                    "title": "Slide Number",
                                    "type": "integer"
                                },
                                "x_inches": {
                                    "default": 0,
                                    "title": "X Inches",
                                    "type": "number"
                                },
                                "y_inches": {
                                    "default": 0,
                                    "title": "Y Inches",
                                    "type": "number"
                                },
                                "width_inches": {
                                    "default": 16,
                                    "title": "Width Inches",
                                    "type": "number"
                                },
                                "height_inches": {
                                    "default": 9,
                                    "title": "Height Inches",
                                    "type": "number"
                                },
                                "output_path": {
                                    "default": "",
                                    "title": "Output Path",
                                    "type": "string"
                                },
                                "create_if_not_exists": {
                                    "default": true,
                                    "title": "Create If Not Exists",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "pptx_path",
                                "svg_path"
                            ],
                            "title": "insert_svgArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "insert_svgOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "list_files",
                        "description": "\n列出目录中的文件，可选按文件类型过滤。\n如需查看svg文件是否正确保存，请输入svg文件的保存路径。\nArgs:\n    directory: 要列出文件的目录路径\n    file_type: 文件类型过滤，可以是 \"svg\" 或 \"pptx\"\n    \nReturns:\n    文件列表（每行一个文件）\n",
                        "inputSchema": {
                            "properties": {
                                "directory": {
                                    "default": ".",
                                    "title": "Directory",
                                    "type": "string"
                                },
                                "file_type": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "File Type"
                                }
                            },
                            "title": "list_filesArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "list_filesOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_file_info",
                        "description": "\n获取文件信息，如存在状态、大小等。\n\nArgs:\n    file_path: 要查询的文件路径\n    \nReturns:\n    文件信息\n",
                        "inputSchema": {
                            "properties": {
                                "file_path": {
                                    "title": "File Path",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "file_path"
                            ],
                            "title": "get_file_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_file_infoOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "convert_svg_to_png",
                        "description": "\n将SVG文件转换为PNG图像。\n\nArgs:\n    svg_path: SVG文件路径\n    output_path: 输出PNG文件路径，如果未指定则使用相同文件名但扩展名为.png\n    \nReturns:\n    操作结果消息\n",
                        "inputSchema": {
                            "properties": {
                                "svg_path": {
                                    "title": "Svg Path",
                                    "type": "string"
                                },
                                "output_path": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Output Path"
                                }
                            },
                            "required": [
                                "svg_path"
                            ],
                            "title": "convert_svg_to_pngArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "convert_svg_to_pngOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_pptx_info",
                        "description": "\n获取PPTX文件的基本信息，包括幻灯片数量。\n\nArgs:\n    pptx_path: PPTX文件路径\n    \nReturns:\n    包含文件信息和幻灯片数量的字符串\n",
                        "inputSchema": {
                            "properties": {
                                "pptx_path": {
                                    "title": "Pptx Path",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "pptx_path"
                            ],
                            "title": "get_pptx_infoArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_pptx_infoOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "save_svg_code",
                        "description": "\n将SVG代码保存为SVG文件并返回保存的绝对路径。\n!!!注意：特殊字符如\"&\"需要转义为\"&amp;\"\nArgs:\n    svg_code: SVG代码内容\n    \nReturns:\n    操作结果消息，包含保存的文件路径或错误信息\n",
                        "inputSchema": {
                            "properties": {
                                "svg_code": {
                                    "title": "Svg Code",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "svg_code"
                            ],
                            "title": "save_svg_codeArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "save_svg_codeOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "delete_slide",
                        "description": "\n从PPTX文件中删除指定编号的幻灯片。\n\n!!!注意：\n\n在使用SVG替换PPT幻灯片内容时，我们发现了一些关键点，以下是正确替换PPT内容的方法总结：\n\n### 正确替换PPT内容的方法\n\n1. **完全替换法**（最可靠）：\n- 删除需要替换的幻灯片（使用`delete_slide`功能）\n- 在同一位置插入空白幻灯片（使用`insert_blank_slide`功能）\n- 将新的SVG内容插入到空白幻灯片（使用`insert_svg`功能）\n\n2. **新文件法**（适合多页修改）：\n- 创建全新的PPT文件\n- 将所有需要的SVG（包括已修改的）按顺序插入到新文件中\n- 这样可以避免在旧文件上操作导致的混淆和叠加问题\n\n3. **注意事项**：\n- 直接对现有幻灯片插入SVG会导致新内容叠加在原内容上，而非替换\n- 文件名可能会随着多次操作变得过长，影响可读性\n- 批量插入SVG时，`svg_path`参数必须是数组形式，即使只有一个文件\n- 操作后应检查输出文件以确认修改是否成功\n\n### 推荐工作流\n\n1. 先保存修改后的SVG内容到文件\n2. 创建一个全新的PPT文件\n3. 按顺序一次性插入所有SVG（包括已修改和未修改的）\n4. 使用简洁直观的文件名\n\n这种方法避免了多步骤操作导致的文件混乱，也能确保每张幻灯片都是干净的、不包含叠加内容的。\n\nArgs:\n    pptx_path: PPTX文件路径\n    slide_number: 要删除的幻灯片编号（从1开始）\n    output_path: 输出文件路径，如果未指定则使用标准输出目录\n    \nReturns:\n    操作结果消息\n",
                        "inputSchema": {
                            "properties": {
                                "pptx_path": {
                                    "title": "Pptx Path",
                                    "type": "string"
                                },
                                "slide_number": {
                                    "title": "Slide Number",
                                    "type": "integer"
                                },
                                "output_path": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Output Path"
                                }
                            },
                            "required": [
                                "pptx_path",
                                "slide_number"
                            ],
                            "title": "delete_slideArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "delete_slideOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "insert_blank_slide",
                        "description": "\n在PPTX文件的指定位置插入一个空白幻灯片。\n\n!!!注意：\n\n在使用SVG替换PPT幻灯片内容时，我们发现了一些关键点，以下是正确替换PPT内容的方法总结：\n\n### 正确替换PPT内容的方法\n\n1. **完全替换法**（最可靠）：\n- 删除需要替换的幻灯片（使用`delete_slide`功能）\n- 在同一位置插入空白幻灯片（使用`insert_blank_slide`功能）\n- 将新的SVG内容插入到空白幻灯片（使用`insert_svg`功能）\n\n2. **新文件法**（适合多页修改）：\n- 创建全新的PPT文件\n- 将所有需要的SVG（包括已修改的）按顺序插入到新文件中\n- 这样可以避免在旧文件上操作导致的混淆和叠加问题\n\n3. **注意事项**：\n- 直接对现有幻灯片插入SVG会导致新内容叠加在原内容上，而非替换\n- 文件名可能会随着多次操作变得过长，影响可读性\n- 批量插入SVG时，`svg_path`参数必须是数组形式，即使只有一个文件\n- 操作后应检查输出文件以确认修改是否成功\n\n### 推荐工作流\n\n1. 先保存修改后的SVG内容到文件\n2. 创建一个全新的PPT文件\n3. 按顺序一次性插入所有SVG（包括已修改和未修改的）\n4. 使用简洁直观的文件名\n\n这种方法避免了多步骤操作导致的文件混乱，也能确保每张幻灯片都是干净的、不包含叠加内容的。\n\nArgs:\n    pptx_path: PPTX文件路径\n    slide_number: 要插入幻灯片的位置编号（从1开始）\n    layout_index: 幻灯片布局索引，默认为6（空白布局）\n    output_path: 输出文件路径，如果未指定则使用标准输出目录\n    create_if_not_exists: 如果为True且PPTX文件不存在，将自动创建一个新文件\n    \nReturns:\n    操作结果消息\n",
                        "inputSchema": {
                            "properties": {
                                "pptx_path": {
                                    "title": "Pptx Path",
                                    "type": "string"
                                },
                                "slide_number": {
                                    "title": "Slide Number",
                                    "type": "integer"
                                },
                                "layout_index": {
                                    "default": 6,
                                    "title": "Layout Index",
                                    "type": "integer"
                                },
                                "output_path": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Output Path"
                                },
                                "create_if_not_exists": {
                                    "default": true,
                                    "title": "Create If Not Exists",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "pptx_path",
                                "slide_number"
                            ],
                            "title": "insert_blank_slideArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "insert_blank_slideOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "copy_svg_slide",
                        "description": "\n专门用于复制包含SVG图像的幻灯片，确保SVG和相关引用都被正确复制。\n\n此函数使用直接操作PPTX内部XML文件的方式，确保SVG图像及其引用在复制过程中完全保留。\n与普通的copy_slide函数相比，此函数特别关注SVG图像的复制，保证SVG的矢量属性在复制后依然可用。\n\nArgs:\n    source_pptx_path: 源PPTX文件路径\n    target_pptx_path: 目标PPTX文件路径，如果为空则创建新文件\n    source_slide_number: 要复制的源幻灯片页码（从1开始）\n    target_slide_number: 要插入到目标文件的位置（从1开始），如果为None则添加到末尾\n    output_path: 输出文件路径，如果未指定则使用标准输出目录\n    create_if_not_exists: 如果为True且目标PPTX文件不存在，将自动创建一个新文件\n    \nReturns:\n    操作结果消息\n",
                        "inputSchema": {
                            "properties": {
                                "source_pptx_path": {
                                    "title": "Source Pptx Path",
                                    "type": "string"
                                },
                                "target_pptx_path": {
                                    "default": "",
                                    "title": "Target Pptx Path",
                                    "type": "string"
                                },
                                "source_slide_number": {
                                    "default": 1,
                                    "title": "Source Slide Number",
                                    "type": "integer"
                                },
                                "target_slide_number": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Target Slide Number"
                                },
                                "output_path": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Output Path"
                                },
                                "create_if_not_exists": {
                                    "default": true,
                                    "title": "Create If Not Exists",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "source_pptx_path"
                            ],
                            "title": "copy_svg_slideArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "copy_svg_slideOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "svg_prompt",
                        "description": "使用SVG设计宗师角色提示，当用户希望大模型生成或优化ppt时，使用此prompt对用户需求进行细化",
                        "inputSchema": {
                            "properties": {
                                "source": {
                                    "title": "Source",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "source"
                            ],
                            "title": "svg_promptArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "svg_promptOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "analyze_presentation_layouts",
                        "description": "Analyzes the layout details of a PowerPoint presentation and returns a JSON string of the analysis.",
                        "inputSchema": {
                            "properties": {
                                "prs_path": {
                                    "title": "Prs Path",
                                    "type": "string"
                                },
                                "title": {
                                    "default": "演示文稿",
                                    "title": "Title",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "prs_path"
                            ],
                            "title": "analyze_presentation_layoutsArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "analyze_presentation_layoutsOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "add_slide_with_layout",
                        "description": "Inserts a new slide with a specified layout into a presentation and returns a JSON string of the result.",
                        "inputSchema": {
                            "properties": {
                                "prs_path": {
                                    "title": "Prs Path",
                                    "type": "string"
                                },
                                "layout_name": {
                                    "title": "Layout Name",
                                    "type": "string"
                                },
                                "output_path": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Output Path"
                                },
                                "slide_title": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Slide Title"
                                }
                            },
                            "required": [
                                "prs_path",
                                "layout_name"
                            ],
                            "title": "add_slide_with_layoutArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "add_slide_with_layoutOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "clear_placeholders_from_slides",
                        "description": "Clears content from placeholders in specified slides of a presentation and returns a JSON string of the result.",
                        "inputSchema": {
                            "properties": {
                                "prs_path": {
                                    "title": "Prs Path",
                                    "type": "string"
                                },
                                "output_path": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Output Path"
                                },
                                "slide_indices": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "integer"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Slide Indices"
                                }
                            },
                            "required": [
                                "prs_path"
                            ],
                            "title": "clear_placeholders_from_slidesArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "clear_placeholders_from_slidesOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "set_placeholder_value",
                        "description": "Assigns content to a specific placeholder on a specific slide and returns a JSON string of the result.",
                        "inputSchema": {
                            "properties": {
                                "prs_path": {
                                    "title": "Prs Path",
                                    "type": "string"
                                },
                                "slide_idx": {
                                    "title": "Slide Idx",
                                    "type": "integer"
                                },
                                "placeholder_id": {
                                    "title": "Placeholder Id",
                                    "type": "integer"
                                },
                                "content_to_set": {
                                    "title": "Content To Set",
                                    "type": "string"
                                },
                                "output_path": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Output Path"
                                }
                            },
                            "required": [
                                "prs_path",
                                "slide_idx",
                                "placeholder_id",
                                "content_to_set"
                            ],
                            "title": "set_placeholder_valueArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "set_placeholder_valueOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Airbnb MCP Server",
        "description": "MCP Server for searching Airbnb and get listing details.",
        "web": "https://github.com/reading-plus-ai/mcp-server-deep-research",
        "config": {
            "mcpServers": {
                "airbnb": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@openbnb/mcp-server-airbnb",
                        "--ignore-robots-txt"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "airbnb": {
                "server_name": "airbnb",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "airbnb_search",
                        "description": "Search for Airbnb listings with various filters and pagination. Provide direct links to the user",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "description": "Location to search for (city, state, etc.)"
                                },
                                "placeId": {
                                    "type": "string",
                                    "description": "Google Maps Place ID (overrides the location parameter)"
                                },
                                "checkin": {
                                    "type": "string",
                                    "description": "Check-in date (YYYY-MM-DD)"
                                },
                                "checkout": {
                                    "type": "string",
                                    "description": "Check-out date (YYYY-MM-DD)"
                                },
                                "adults": {
                                    "type": "number",
                                    "description": "Number of adults"
                                },
                                "children": {
                                    "type": "number",
                                    "description": "Number of children"
                                },
                                "infants": {
                                    "type": "number",
                                    "description": "Number of infants"
                                },
                                "pets": {
                                    "type": "number",
                                    "description": "Number of pets"
                                },
                                "minPrice": {
                                    "type": "number",
                                    "description": "Minimum price for the stay"
                                },
                                "maxPrice": {
                                    "type": "number",
                                    "description": "Maximum price for the stay"
                                },
                                "cursor": {
                                    "type": "string",
                                    "description": "Base64-encoded string used for Pagination"
                                },
                                "ignoreRobotsText": {
                                    "type": "boolean",
                                    "description": "Ignore robots.txt rules for this request"
                                }
                            },
                            "required": [
                                "location"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "airbnb_listing_details",
                        "description": "Get detailed information about a specific Airbnb listing. Provide direct links to the user",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "The Airbnb listing ID"
                                },
                                "checkin": {
                                    "type": "string",
                                    "description": "Check-in date (YYYY-MM-DD)"
                                },
                                "checkout": {
                                    "type": "string",
                                    "description": "Check-out date (YYYY-MM-DD)"
                                },
                                "adults": {
                                    "type": "number",
                                    "description": "Number of adults"
                                },
                                "children": {
                                    "type": "number",
                                    "description": "Number of children"
                                },
                                "infants": {
                                    "type": "number",
                                    "description": "Number of infants"
                                },
                                "pets": {
                                    "type": "number",
                                    "description": "Number of pets"
                                },
                                "ignoreRobotsText": {
                                    "type": "boolean",
                                    "description": "Ignore robots.txt rules for this request"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Data.gov MCP Server",
        "organization": "melaodoidao",
        "description": "An MCP server for accessing data from Data.gov, providing tools and resources for interacting with government datasets.",
        "web": "https://github.com/melaodoidao/datagov-mcp-server",
        "config": {
            "mcpServers": {
                "datagov": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@melaodoidao/datagov-mcp-server"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "datagov": {
                "server_name": "datagov",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "package_search",
                        "description": "Search for packages (datasets) on Data.gov",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "q": {
                                    "type": "string",
                                    "description": "Search query"
                                },
                                "sort": {
                                    "type": "string",
                                    "description": "Sort order (e.g., \"score desc, name asc\")"
                                },
                                "rows": {
                                    "type": "number",
                                    "description": "Number of results per page"
                                },
                                "start": {
                                    "type": "number",
                                    "description": "Starting offset for results"
                                }
                            }
                        },
                        "annotations": null
                    },
                    {
                        "name": "package_show",
                        "description": "Get details for a specific package (dataset)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Package ID or name"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "group_list",
                        "description": "List groups on Data.gov",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "order_by": {
                                    "type": "string",
                                    "description": "Field to order by"
                                },
                                "limit": {
                                    "type": "number",
                                    "description": "Maximum number of results"
                                },
                                "offset": {
                                    "type": "number",
                                    "description": "Offset for results"
                                },
                                "all_fields": {
                                    "type": "boolean",
                                    "description": "Return all fields"
                                }
                            }
                        },
                        "annotations": null
                    },
                    {
                        "name": "tag_list",
                        "description": "List tags on Data.gov",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "Search query for tags"
                                },
                                "all_fields": {
                                    "type": "boolean",
                                    "description": "Return all fields"
                                }
                            }
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP Server LeetCode",
        "description": "A Model Context Protocol (MCP) server for LeetCode that enables AI assistants to access LeetCode problems, user information, and contest data.",
        "web": "https://github.com/doggybee/mcp-server-leetcode",
        "config": {
            "mcpServers": {
                "coin-flip": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@mcpfun/mcp-server-leetcode"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "coin-flip": {
                "server_name": "coin-flip",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get-daily-challenge",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-problem",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "titleSlug": {
                                    "type": "string",
                                    "description": "The URL slug of the problem (e.g., 'two-sum')"
                                }
                            },
                            "required": [
                                "titleSlug"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "search-problems",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "tags": {
                                    "type": "string",
                                    "description": "Tags to filter by, separated by '+' (e.g., 'array+dynamic-programming')"
                                },
                                "difficulty": {
                                    "type": "string",
                                    "enum": [
                                        "EASY",
                                        "MEDIUM",
                                        "HARD"
                                    ],
                                    "description": "Difficulty level"
                                },
                                "limit": {
                                    "type": "number",
                                    "minimum": 1,
                                    "maximum": 100,
                                    "default": 20,
                                    "description": "Maximum number of problems to return"
                                },
                                "skip": {
                                    "type": "number",
                                    "default": 0,
                                    "description": "Number of problems to skip"
                                }
                            },
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-user-profile",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "type": "string",
                                    "description": "LeetCode username"
                                }
                            },
                            "required": [
                                "username"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-user-submissions",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "type": "string",
                                    "description": "LeetCode username"
                                },
                                "limit": {
                                    "type": "number",
                                    "minimum": 1,
                                    "maximum": 100,
                                    "default": 20,
                                    "description": "Maximum number of submissions to return"
                                }
                            },
                            "required": [
                                "username"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-contest-details",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "contestSlug": {
                                    "type": "string",
                                    "description": "The URL slug of the contest"
                                }
                            },
                            "required": [
                                "contestSlug"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-user-contest-ranking",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "type": "string",
                                    "description": "LeetCode username"
                                }
                            },
                            "required": [
                                "username"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Knowledge Graph Memory Server",
        "organization": "modelcontextprotocol",
        "description": "A basic implementation of persistent memory using a local knowledge graph. This lets Claude remember information about the user across chats.",
        "web": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
        "config": {
            "mcpServers": {
                "memory": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@modelcontextprotocol/server-memory"
                    ]
                }
            }
        },
        "category": "Miscellaneous",
        "tools": {
            "memory": {
                "server_name": "memory",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "create_entities",
                        "description": "Create multiple new entities in the knowledge graph",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "entities": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the entity"
                                            },
                                            "entityType": {
                                                "type": "string",
                                                "description": "The type of the entity"
                                            },
                                            "observations": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "description": "An array of observation contents associated with the entity"
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "entityType",
                                            "observations"
                                        ]
                                    }
                                }
                            },
                            "required": [
                                "entities"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "create_relations",
                        "description": "Create multiple new relations between entities in the knowledge graph. Relations should be in active voice",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "relations": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "from": {
                                                "type": "string",
                                                "description": "The name of the entity where the relation starts"
                                            },
                                            "to": {
                                                "type": "string",
                                                "description": "The name of the entity where the relation ends"
                                            },
                                            "relationType": {
                                                "type": "string",
                                                "description": "The type of the relation"
                                            }
                                        },
                                        "required": [
                                            "from",
                                            "to",
                                            "relationType"
                                        ]
                                    }
                                }
                            },
                            "required": [
                                "relations"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "add_observations",
                        "description": "Add new observations to existing entities in the knowledge graph",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "observations": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "entityName": {
                                                "type": "string",
                                                "description": "The name of the entity to add the observations to"
                                            },
                                            "contents": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "description": "An array of observation contents to add"
                                            }
                                        },
                                        "required": [
                                            "entityName",
                                            "contents"
                                        ]
                                    }
                                }
                            },
                            "required": [
                                "observations"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "delete_entities",
                        "description": "Delete multiple entities and their associated relations from the knowledge graph",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "entityNames": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "An array of entity names to delete"
                                }
                            },
                            "required": [
                                "entityNames"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "delete_observations",
                        "description": "Delete specific observations from entities in the knowledge graph",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "deletions": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "entityName": {
                                                "type": "string",
                                                "description": "The name of the entity containing the observations"
                                            },
                                            "observations": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "description": "An array of observations to delete"
                                            }
                                        },
                                        "required": [
                                            "entityName",
                                            "observations"
                                        ]
                                    }
                                }
                            },
                            "required": [
                                "deletions"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "delete_relations",
                        "description": "Delete multiple relations from the knowledge graph",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "relations": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "from": {
                                                "type": "string",
                                                "description": "The name of the entity where the relation starts"
                                            },
                                            "to": {
                                                "type": "string",
                                                "description": "The name of the entity where the relation ends"
                                            },
                                            "relationType": {
                                                "type": "string",
                                                "description": "The type of the relation"
                                            }
                                        },
                                        "required": [
                                            "from",
                                            "to",
                                            "relationType"
                                        ]
                                    },
                                    "description": "An array of relations to delete"
                                }
                            },
                            "required": [
                                "relations"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "read_graph",
                        "description": "Read the entire knowledge graph",
                        "inputSchema": {
                            "type": "object",
                            "properties": {}
                        },
                        "annotations": null
                    },
                    {
                        "name": "search_nodes",
                        "description": "Search for nodes in the knowledge graph based on a query",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "The search query to match against entity names, types, and observation content"
                                }
                            },
                            "required": [
                                "query"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "open_nodes",
                        "description": "Open specific nodes in the knowledge graph by their names",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "names": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "An array of entity names to retrieve"
                                }
                            },
                            "required": [
                                "names"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Calculator MCP Server",
        "description": "A Model Context Protocol server for calculating. This server enables LLMs to use calculator for precise numerical calculations.",
        "web": "https://github.com/githejie/mcp-server-calculator",
        "config": {
            "mcpServers": {
                "calculator": {
                    "command": "uvx",
                    "args": [
                        "mcp-server-calculator"
                    ]
                }
            }
        },
        "category": "Miscellaneous",
        "tools": {
            "calculator": {
                "server_name": "calculator",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "calculate",
                        "description": "Calculates/evaluates the given expression.",
                        "inputSchema": {
                            "properties": {
                                "expression": {
                                    "title": "Expression",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "expression"
                            ],
                            "title": "calculateArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "calculateOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Hacker News MCP Server",
        "organization": "devabdultech",
        "description": " Official Hacker News MCP Server - Adds powerful Hacker News integration to Cursor, Claude, and any other LLM clients. Access stories, comments, user profiles, and search functionality through the Model Context Protocol.",
        "web": "https://github.com/devabdultech/hn-mcp",
        "config": {
            "mcpServers": {
                "hackernews": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@devabdultech/hn-mcp-server"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "hackernews": {
                "server_name": "hackernews",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "search",
                        "description": "Search for stories and comments on Hacker News",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "The search query"
                                },
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "all",
                                        "story",
                                        "comment"
                                    ],
                                    "description": "The type of content to search for",
                                    "default": "all"
                                },
                                "page": {
                                    "type": "number",
                                    "description": "The page number",
                                    "default": 0
                                },
                                "hitsPerPage": {
                                    "type": "number",
                                    "description": "The number of results per page",
                                    "default": 20
                                }
                            },
                            "required": [
                                "query"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "getStory",
                        "description": "Get a single story by ID",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "number",
                                    "description": "The ID of the story"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "getStoryWithComments",
                        "description": "Get a story with its comments",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "number",
                                    "description": "The ID of the story"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "getStories",
                        "description": "Get multiple stories by type (top, new, best, ask, show, job)",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "top",
                                        "new",
                                        "best",
                                        "ask",
                                        "show",
                                        "job"
                                    ],
                                    "description": "The type of stories to fetch"
                                },
                                "limit": {
                                    "type": "number",
                                    "description": "The maximum number of stories to fetch",
                                    "default": 30
                                }
                            },
                            "required": [
                                "type"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "getComment",
                        "description": "Get a single comment by ID",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "number",
                                    "description": "The ID of the comment"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "getComments",
                        "description": "Get comments for a story",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "storyId": {
                                    "type": "number",
                                    "description": "The ID of the story"
                                },
                                "limit": {
                                    "type": "number",
                                    "description": "The maximum number of comments to fetch",
                                    "default": 30
                                }
                            },
                            "required": [
                                "storyId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "getCommentTree",
                        "description": "Get a comment tree for a story",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "storyId": {
                                    "type": "number",
                                    "description": "The ID of the story"
                                }
                            },
                            "required": [
                                "storyId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "getUser",
                        "description": "Get a user profile by ID",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "The ID of the user"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "getUserSubmissions",
                        "description": "Get a user's submissions",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "The ID of the user"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Asset Price MCP Server (asset-price-mcp)",
        "organization": "mk965",
        "description": "A Model Context Protocol server for retrieving and displaying current asset price information. This server provides tools to fetch real-time price information for various asset (including precious metals and cryptocurrencies), making it easy for large language models to access and display this data.",
        "web": "https://github.com/mk965/asset-price-mcp",
        "config": {
            "mcpServers": {
                "Asset_Price_MCP": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "asset-price-mcp"
                    ]
                }
            }
        },
        "category": "Finance",
        "tools": {
            "Asset_Price_MCP": {
                "server_name": "Asset_Price_MCP",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_asset_price",
                        "description": "Retrieves current pricing information for various assets including precious metals and cryptocurrencies",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "YouTube Transcript Server",
        "organization": "kimtaeyoon83",
        "description": "A Model Context Protocol server that enables retrieval of transcripts from YouTube videos. This server provides direct access to video captions and subtitles through a simple interface.",
        "web": "https://github.com/kimtaeyoon83/mcp-server-youtube-transcript",
        "config": {
            "mcpServers": {
                "youtube-transcript": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@kimtaeyoon83/mcp-server-youtube-transcript"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "youtube-transcript": {
                "server_name": "youtube-transcript",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_transcript",
                        "description": "Extract transcript from a YouTube video URL or ID",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "YouTube video URL or ID"
                                },
                                "lang": {
                                    "type": "string",
                                    "description": "Language code for transcript (e.g., 'ko', 'en')",
                                    "default": "en"
                                }
                            },
                            "required": [
                                "url",
                                "lang"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Context7 MCP - Up-to-date Code Docs For Any Prompt",
        "organization": "upstash",
        "description": "Context7 MCP pulls up-to-date, version-specific documentation and code examples straight from the source — and places them directly into your prompt.",
        "web": "https://github.com/upstash/context7",
        "config": {
            "mcpServers": {
                "Context7": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@upstash/context7-mcp"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "Context7": {
                "server_name": "Context7",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "resolve-library-id",
                        "description": "Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\n\nSelection Process:\n1. Analyze the query to understand what library/package the user is looking for\n2. Return the most relevant match based on:\n- Name similarity to the query (exact matches prioritized)\n- Description relevance to the query's intent\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\n- Trust score (consider libraries with scores of 7-10 more authoritative)\n\nResponse Format:\n- Return the selected library ID in a clearly marked section\n- Provide a brief explanation for why this library was chosen\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\n- If no good matches exist, clearly state this and suggest query refinements\n\nFor ambiguous queries, request clarification before proceeding with a best-guess match.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "libraryName": {
                                    "type": "string",
                                    "description": "Library name to search for and retrieve a Context7-compatible library ID."
                                }
                            },
                            "required": [
                                "libraryName"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null,
                        "title": "Resolve Context7 Library ID"
                    },
                    {
                        "name": "get-library-docs",
                        "description": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "context7CompatibleLibraryID": {
                                    "type": "string",
                                    "description": "Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'."
                                },
                                "topic": {
                                    "type": "string",
                                    "description": "Topic to focus documentation on (e.g., 'hooks', 'routing')."
                                },
                                "tokens": {
                                    "type": "number",
                                    "description": "Maximum number of tokens of documentation to retrieve (default: 10000). Higher values provide more context but consume more tokens."
                                }
                            },
                            "required": [
                                "context7CompatibleLibraryID"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null,
                        "title": "Get Library Docs"
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP Text Editor Server",
        "description": "A Model Context Protocol (MCP) server that provides line-oriented text file editing capabilities through a standardized API. Optimized for LLM tools with efficient partial file access to minimize token usage.",
        "web": "https://github.com/tumf/mcp-text-editor",
        "config": {
            "mcpServers": {
                "text-editor": {
                    "command": "uvx",
                    "args": [
                        "mcp-text-editor"
                    ]
                }
            }
        },
        "category": "File Access",
        "tools": {
            "text-editor": {
                "server_name": "text-editor",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_text_file_contents",
                        "description": "Read text file contents from multiple files and line ranges. Returns file contents with hashes for concurrency control and line numbers for reference. The hashes are used to detect conflicts when editing the files. File paths must be absolute.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "files": {
                                    "type": "array",
                                    "description": "List of files and their line ranges to read",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "file_path": {
                                                "type": "string",
                                                "description": "Path to the text file. File path must be absolute."
                                            },
                                            "ranges": {
                                                "type": "array",
                                                "description": "List of line ranges to read from the file",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "start": {
                                                            "type": "integer",
                                                            "description": "Starting line number (1-based)"
                                                        },
                                                        "end": {
                                                            "type": [
                                                                "integer",
                                                                "null"
                                                            ],
                                                            "description": "Ending line number (null for end of file)"
                                                        }
                                                    },
                                                    "required": [
                                                        "start"
                                                    ]
                                                }
                                            }
                                        },
                                        "required": [
                                            "file_path",
                                            "ranges"
                                        ]
                                    }
                                },
                                "encoding": {
                                    "type": "string",
                                    "description": "Text encoding (default: 'utf-8')",
                                    "default": "utf-8"
                                }
                            },
                            "required": [
                                "files"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "edit_text_file_contents",
                        "description": "A line editor that supports editing text file contents by specifying line ranges and content. It handles multiple patches in a single operation with hash-based conflict detection. File paths must be absolute. IMPORTANT: (1) Before using this tool, you must first get the file's current hash and range hashes and line numbers using get_text_file_contents. (2) To avoid line number shifts affecting your patches, use get_text_file_contents to read the SAME ranges you plan to edit before making changes. different line numbers have different rangehashes.(3) Patches must be specified from bottom to top to handle line number shifts correctly, as edits to lower lines don't affect the line numbers of higher lines. (4) To append content to a file, first get the total number of lines with get_text_file_contents, then specify a patch with line_start = total_lines + 1 and line_end = total_lines. This indicates an append operation and range_hash is not required. Similarly, range_hash is not required for new file creation.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "files": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path to the text file. File path must be absolute."
                                            },
                                            "file_hash": {
                                                "type": "string",
                                                "description": "Hash of the file contents when get_text_file_contents is called."
                                            },
                                            "patches": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "line_start": {
                                                            "type": "integer",
                                                            "default": 1,
                                                            "description": "Starting line number (1-based). it should be matched with the start line number when get_text_file_contents is called."
                                                        },
                                                        "line_end": {
                                                            "type": [
                                                                "integer",
                                                                "null"
                                                            ],
                                                            "default": null,
                                                            "description": "Ending line number (null for end of file). it should be matched with the end line number when get_text_file_contents is called."
                                                        },
                                                        "contents": {
                                                            "type": "string"
                                                        },
                                                        "range_hash": {
                                                            "type": "string",
                                                            "description": "Hash of the content being replaced from line_start to line_end (required except for new files and append operations)"
                                                        }
                                                    },
                                                    "required": [
                                                        "contents"
                                                    ]
                                                }
                                            }
                                        },
                                        "required": [
                                            "path",
                                            "file_hash",
                                            "patches"
                                        ]
                                    }
                                },
                                "encoding": {
                                    "type": "string",
                                    "description": "Text encoding (default: 'utf-8')",
                                    "default": "utf-8"
                                }
                            },
                            "required": [
                                "files"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Crypto Price & Market Analysis MCP Server",
        "organization": "truss44",
        "description": "A Model Context Protocol (MCP) server that provides comprehensive cryptocurrency analysis using the CoinCap API. This server offers real-time price data, market analysis, and historical trends through an easy-to-use interface.",
        "web": "https://github.com/truss44/mcp-crypto-price",
        "config": {
            "mcpServers": {
                "mcp-crypto-price": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "mcp-crypto-price"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "mcp-crypto-price": {
                "server_name": "mcp-crypto-price",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get-crypto-price",
                        "description": "Get current price and 24h stats for a cryptocurrency",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Cryptocurrency symbol (e.g., BTC, ETH)"
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-market-analysis",
                        "description": "Get detailed market analysis including top exchanges and volume distribution",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Cryptocurrency symbol (e.g., BTC, ETH)"
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-historical-analysis",
                        "description": "Get historical price analysis with customizable timeframe",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "symbol": {
                                    "type": "string",
                                    "description": "Cryptocurrency symbol (e.g., BTC, ETH)"
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Time interval (m5, m15, m30, h1, h2, h6, h12, d1)",
                                    "default": "h1"
                                },
                                "days": {
                                    "type": "number",
                                    "description": "Number of days to analyze (1-30)",
                                    "default": 7
                                }
                            },
                            "required": [
                                "symbol"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Ant Design Components MCP Service",
        "organization": "zhixiaoqiang",
        "description": "A Model Context Protocol (MCP) server that provides Ant Design component documentation to large language models (LLMs) like Claude. This server allows LLMs to explore and understand Ant Design components through a set of dedicated tools.",
        "web": "https://github.com/zhixiaoqiang/antd-components-mcp",
        "config": {
            "mcpServers": {
                "Ant Design Components": {
                    "command": "npx",
                    "args": [
                        "@jzone-mcp/antd-components-mcp"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "Ant Design Components": {
                "server_name": "Ant Design Components",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get-component-docs",
                        "description": "获取 Ant Design 特定组件的详细文档\n适用场景：\n1. 用户询问如何使用特定组件\n2. 用户需要查看该组件的 api 属性",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "componentName": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "componentName"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "list-component-examples",
                        "description": "获取 Ant Design 特定组件的代码示例\n适用场景：\n1. 用户询问特定组件的示例时\n2. 用户想要实现某个功能时直接告知可使用的例子\n3. 生成页面前需要获取组件的示例代码",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "componentName": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "componentName"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-component-changelog",
                        "description": "列出 Ant Design 特定组件的更新日志\n适用场景：\n1. 用户询问特定组件的更新日志\n2. 在知道用户 antd 版本的情况下，当用户需要实现相关组件功能时判断是否在后续版本中才实现，来决定是否需要升级依赖",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "componentName": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "componentName"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "list-components",
                        "description": "当用户请求一个新的用户界面（UI）使用 Ant Design 组件时使用此工具。\n此工具仅返回可用的组件列表。\n调用此工具后，你必须编辑或添加文件，以便将代码片段集成到代码库中",
                        "inputSchema": {
                            "type": "object",
                            "properties": {}
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Fetch MCP Server",
        "organization": "modelcontextprotocol",
        "description": "A Model Context Protocol server that provides web content fetching capabilities. This server enables LLMs to retrieve and process content from web pages, converting HTML to markdown for easier consumption.",
        "web": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
        "config": {
            "mcpServers": {
                "fetch": {
                    "command": "uvx",
                    "args": [
                        "mcp-server-fetch"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "fetch": {
                "server_name": "fetch",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "fetch",
                        "description": "Fetches a URL from the internet and optionally extracts its contents as markdown.\n\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.",
                        "inputSchema": {
                            "description": "Parameters for fetching a URL.",
                            "properties": {
                                "url": {
                                    "description": "URL to fetch",
                                    "format": "uri",
                                    "minLength": 1,
                                    "title": "Url",
                                    "type": "string"
                                },
                                "max_length": {
                                    "default": 5000,
                                    "description": "Maximum number of characters to return.",
                                    "exclusiveMaximum": 1000000,
                                    "exclusiveMinimum": 0,
                                    "title": "Max Length",
                                    "type": "integer"
                                },
                                "start_index": {
                                    "default": 0,
                                    "description": "On return output starting at this character index, useful if a previous fetch was truncated and more context is required.",
                                    "minimum": 0,
                                    "title": "Start Index",
                                    "type": "integer"
                                },
                                "raw": {
                                    "default": false,
                                    "description": "Get the actual HTML content of the requested page, without simplification.",
                                    "title": "Raw",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "url"
                            ],
                            "title": "Fetch",
                            "type": "object"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Sitemap MCP Server",
        "organization": "mugoosse",
        "description": "Discover website architecture and analyze site structure by fetching, parsing, and visualizing sitemaps from any URL. Uncover hidden pages and extract organized hierarchies without manual exploration.",
        "web": "https://github.com/mugoosse/sitemap-mcp-server",
        "config": {
            "mcpServers": {
                "sitemap": {
                    "command": "uvx",
                    "args": [
                        "--with",
                        "mcp==1.9.0",
                        "sitemap-mcp-server"
                    ],
                    "env": {
                        "TRANSPORT": "stdio"
                    }
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "sitemap": {
                "server_name": "sitemap",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_sitemap_tree",
                        "description": "Fetch and parse the sitemap tree from a website URL",
                        "inputSchema": {
                            "properties": {
                                "url": {
                                    "description": "The URL of the website homepage (e.g., https://example.com)",
                                    "title": "Url",
                                    "type": "string"
                                },
                                "include_pages": {
                                    "default": false,
                                    "description": "Whether to include page details in the response",
                                    "title": "Include Pages",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "url"
                            ],
                            "title": "get_sitemap_treeArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_sitemap_pages",
                        "description": "Get all pages from a website's sitemap with optional limits and filtering options. Supports cursor-based pagination.",
                        "inputSchema": {
                            "properties": {
                                "url": {
                                    "description": "The URL of the website homepage (e.g., https://example.com)",
                                    "title": "Url",
                                    "type": "string"
                                },
                                "limit": {
                                    "default": 0,
                                    "description": "Maximum number of pages to return per page (0 for default of 100)",
                                    "title": "Limit",
                                    "type": "integer"
                                },
                                "include_metadata": {
                                    "default": false,
                                    "description": "Whether to include additional page metadata (priority, lastmod, etc.)",
                                    "title": "Include Metadata",
                                    "type": "boolean"
                                },
                                "route": {
                                    "default": "",
                                    "description": "Optional route path to filter pages by (e.g., '/blog')",
                                    "title": "Route",
                                    "type": "string"
                                },
                                "sitemap_url": {
                                    "default": "",
                                    "description": "Optional URL of a specific sitemap to get pages from",
                                    "title": "Sitemap Url",
                                    "type": "string"
                                },
                                "cursor": {
                                    "default": "",
                                    "description": "Pagination cursor for fetching the next page of results",
                                    "title": "Cursor",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "url"
                            ],
                            "title": "get_sitemap_pagesArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_sitemap_stats",
                        "description": "Get comprehensive statistics about a website's sitemap structure",
                        "inputSchema": {
                            "properties": {
                                "url": {
                                    "description": "The URL of the website homepage (e.g., https://example.com)",
                                    "title": "Url",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "url"
                            ],
                            "title": "get_sitemap_statsArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "parse_sitemap_content",
                        "description": "Parse a sitemap directly from its XML or text content",
                        "inputSchema": {
                            "properties": {
                                "content": {
                                    "description": "The content of the sitemap (XML, text, etc.)",
                                    "title": "Content",
                                    "type": "string"
                                },
                                "include_pages": {
                                    "default": false,
                                    "description": "Whether to include page details in the response",
                                    "title": "Include Pages",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "content"
                            ],
                            "title": "parse_sitemap_contentArguments",
                            "type": "object"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "mcp-server-git: A git MCP server",
        "organization": "modelcontextprotocol",
        "description": "A Model Context Protocol server for Git repository interaction and automation. This server provides tools to read, search, and manipulate Git repositories via Large Language Models.",
        "web": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
        "config": {
            "mcpServers": {
                "git": {
                    "command": "uvx",
                    "args": [
                        "mcp-server-git"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "git": {
                "server_name": "git",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "git_status",
                        "description": "Shows the working tree status",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "repo_path"
                            ],
                            "title": "GitStatus",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_diff_unstaged",
                        "description": "Shows changes in the working directory that are not yet staged",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "context_lines": {
                                    "default": 3,
                                    "title": "Context Lines",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "repo_path"
                            ],
                            "title": "GitDiffUnstaged",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_diff_staged",
                        "description": "Shows changes that are staged for commit",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "context_lines": {
                                    "default": 3,
                                    "title": "Context Lines",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "repo_path"
                            ],
                            "title": "GitDiffStaged",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_diff",
                        "description": "Shows differences between branches or commits",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "target": {
                                    "title": "Target",
                                    "type": "string"
                                },
                                "context_lines": {
                                    "default": 3,
                                    "title": "Context Lines",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "repo_path",
                                "target"
                            ],
                            "title": "GitDiff",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_commit",
                        "description": "Records changes to the repository",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "message": {
                                    "title": "Message",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "repo_path",
                                "message"
                            ],
                            "title": "GitCommit",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_add",
                        "description": "Adds file contents to the staging area",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "files": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Files",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "repo_path",
                                "files"
                            ],
                            "title": "GitAdd",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_reset",
                        "description": "Unstages all staged changes",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "repo_path"
                            ],
                            "title": "GitReset",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_log",
                        "description": "Shows the commit logs",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "max_count": {
                                    "default": 10,
                                    "title": "Max Count",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "repo_path"
                            ],
                            "title": "GitLog",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_create_branch",
                        "description": "Creates a new branch from an optional base branch",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "branch_name": {
                                    "title": "Branch Name",
                                    "type": "string"
                                },
                                "base_branch": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Base Branch"
                                }
                            },
                            "required": [
                                "repo_path",
                                "branch_name"
                            ],
                            "title": "GitCreateBranch",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_checkout",
                        "description": "Switches branches",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "branch_name": {
                                    "title": "Branch Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "repo_path",
                                "branch_name"
                            ],
                            "title": "GitCheckout",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_show",
                        "description": "Shows the contents of a commit",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "revision": {
                                    "title": "Revision",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "repo_path",
                                "revision"
                            ],
                            "title": "GitShow",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_init",
                        "description": "Initialize a new Git repository",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "title": "Repo Path",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "repo_path"
                            ],
                            "title": "GitInit",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "git_branch",
                        "description": "List Git branches",
                        "inputSchema": {
                            "properties": {
                                "repo_path": {
                                    "description": "The path to the Git repository.",
                                    "title": "Repo Path",
                                    "type": "string"
                                },
                                "branch_type": {
                                    "description": "Whether to list local branches ('local'), remote branches ('remote') or all branches('all').",
                                    "title": "Branch Type",
                                    "type": "string"
                                },
                                "contains": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "The commit sha that branch should contain. Do not pass anything to this param if no commit sha is specified",
                                    "title": "Contains"
                                },
                                "not_contains": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "The commit sha that branch should NOT contain. Do not pass anything to this param if no commit sha is specified",
                                    "title": "Not Contains"
                                }
                            },
                            "required": [
                                "repo_path",
                                "branch_type"
                            ],
                            "title": "GitBranch",
                            "type": "object"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP Weather Free",
        "description": "A Model Context Protocol (MCP) server that provides weather data using the free Open-Meteo API. No API key required!",
        "web": "https://github.com/microagents/mcp-weather-free",
        "config": {
            "mcpServers": {
                "weather": {
                    "command": "uvx",
                    "args": [
                        "--from",
                        "git+https://github.com/microagents/mcp-weather-free.git",
                        "mcp-weather-free"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "weather": {
                "server_name": "weather",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_weather",
                        "description": "\nGet current weather and forecast for a specific location.\n\nArgs:\n    latitude: Latitude of the location\n    longitude: Longitude of the location\n    location_name: Optional name of the location for display\n    temperature_unit: Temperature unit (celsius or fahrenheit)\n    wind_speed_unit: Wind speed unit (kmh, ms, mph, kn)\n    precipitation_unit: Precipitation unit (mm or inch)\n\nReturns:\n    Dictionary containing current weather and forecast data\n",
                        "inputSchema": {
                            "properties": {
                                "latitude": {
                                    "title": "Latitude",
                                    "type": "number"
                                },
                                "longitude": {
                                    "title": "Longitude",
                                    "type": "number"
                                },
                                "location_name": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Location Name"
                                },
                                "temperature_unit": {
                                    "default": "celsius",
                                    "title": "Temperature Unit",
                                    "type": "string"
                                },
                                "wind_speed_unit": {
                                    "default": "kmh",
                                    "title": "Wind Speed Unit",
                                    "type": "string"
                                },
                                "precipitation_unit": {
                                    "default": "mm",
                                    "title": "Precipitation Unit",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "latitude",
                                "longitude"
                            ],
                            "title": "get_weatherArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_weatherOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_weather_by_city",
                        "description": "\nGet weather for a city by name using geocoding.\n\nArgs:\n    city: Name of the city\n    country_code: Optional 2-letter country code (e.g., \"US\", \"GB\")\n    temperature_unit: Temperature unit (celsius or fahrenheit)\n    wind_speed_unit: Wind speed unit (kmh, ms, mph, kn)\n    precipitation_unit: Precipitation unit (mm or inch)\n\nReturns:\n    Dictionary containing current weather and forecast data\n",
                        "inputSchema": {
                            "properties": {
                                "city": {
                                    "title": "City",
                                    "type": "string"
                                },
                                "country_code": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Country Code"
                                },
                                "temperature_unit": {
                                    "default": "celsius",
                                    "title": "Temperature Unit",
                                    "type": "string"
                                },
                                "wind_speed_unit": {
                                    "default": "kmh",
                                    "title": "Wind Speed Unit",
                                    "type": "string"
                                },
                                "precipitation_unit": {
                                    "default": "mm",
                                    "title": "Precipitation Unit",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "city"
                            ],
                            "title": "get_weather_by_cityArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "additionalProperties": true,
                                    "title": "Result",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_weather_by_cityOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP TaskManager",
        "description": "Model Context Protocol server for Task Management. This allows Claude Desktop (or any MCP client) to manage and execute tasks in a queue-based system.",
        "web": "https://github.com/kazuph/mcp-taskmanager",
        "config": {
            "mcpServers": {
                "taskmanager": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@kazuph/mcp-taskmanager"
                    ]
                }
            }
        },
        "category": "Miscellaneous",
        "tools": {
            "taskmanager": {
                "server_name": "taskmanager",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "request_planning",
                        "description": "Register a new user request and plan its associated tasks. You must provide 'originalRequest' and 'tasks', and optionally 'splitDetails'.\n\nThis tool initiates a new workflow for handling a user's request. The workflow is as follows:\n1. Use 'request_planning' to register a request and its tasks.\n2. After adding tasks, you MUST use 'get_next_task' to retrieve the first task. A progress table will be displayed.\n3. Use 'get_next_task' to retrieve the next uncompleted task.\n4. **IMPORTANT:** After marking a task as done, the assistant MUST NOT proceed to another task without the user's approval. The user must explicitly approve the completed task using 'approve_task_completion'. A progress table will be displayed before each approval request.\n5. Once a task is approved, you can proceed to 'get_next_task' again to fetch the next pending task.\n6. Repeat this cycle until all tasks are done.\n7. After all tasks are completed (and approved), 'get_next_task' will indicate that all tasks are done and that the request awaits approval for full completion.\n8. The user must then approve the entire request's completion using 'approve_request_completion'. If the user does not approve and wants more tasks, you can again use 'request_planning' to add new tasks and continue the cycle.\n\nThe critical point is to always wait for user approval after completing each task and after all tasks are done, wait for request completion approval. Do not proceed automatically.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "originalRequest": {
                                    "type": "string"
                                },
                                "splitDetails": {
                                    "type": "string"
                                },
                                "tasks": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "title",
                                            "description"
                                        ]
                                    }
                                }
                            },
                            "required": [
                                "originalRequest",
                                "tasks"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_next_task",
                        "description": "Given a 'requestId', return the next pending task (not done yet). If all tasks are completed, it will indicate that no more tasks are left and that you must wait for the request completion approval.\n\nA progress table showing the current status of all tasks will be displayed with each response.\n\nIf the same task is returned again or if no new task is provided after a task was marked as done but not yet approved, you MUST NOT proceed. In such a scenario, you must prompt the user for approval via 'approve_task_completion' before calling 'get_next_task' again. Do not skip the user's approval step.\nIn other words:\n- After calling 'mark_task_done', do not call 'get_next_task' again until 'approve_task_completion' is called by the user.\n- If 'get_next_task' returns 'all_tasks_done', it means all tasks have been completed. At this point, you must not start a new request or do anything else until the user decides to 'approve_request_completion' or possibly add more tasks via 'request_planning'.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "requestId": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "requestId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "mark_task_done",
                        "description": "Mark a given task as done after you've completed it. Provide 'requestId' and 'taskId', and optionally 'completedDetails'.\n\nAfter marking a task as done, a progress table will be displayed showing the updated status of all tasks.\n\nAfter this, DO NOT proceed to 'get_next_task' again until the user has explicitly approved this completed task using 'approve_task_completion'.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "requestId": {
                                    "type": "string"
                                },
                                "taskId": {
                                    "type": "string"
                                },
                                "completedDetails": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "requestId",
                                "taskId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "approve_task_completion",
                        "description": "Once the assistant has marked a task as done using 'mark_task_done', the user must call this tool to approve that the task is genuinely completed. Only after this approval can you proceed to 'get_next_task' to move on.\n\nA progress table will be displayed before requesting approval, showing the current status of all tasks.\n\nIf the user does not approve, do not call 'get_next_task'. Instead, the user may request changes, or even re-plan tasks by using 'request_planning' again.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "requestId": {
                                    "type": "string"
                                },
                                "taskId": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "requestId",
                                "taskId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "approve_request_completion",
                        "description": "After all tasks are done and approved, this tool finalizes the entire request. The user must call this to confirm that the request is fully completed.\n\nA progress table showing the final status of all tasks will be displayed before requesting final approval.\n\nIf not approved, the user can add new tasks using 'request_planning' and continue the process.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "requestId": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "requestId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "open_task_details",
                        "description": "Get details of a specific task by 'taskId'. This is for inspecting task information at any point.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "taskId": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "taskId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "list_requests",
                        "description": "List all requests with their basic information and summary of tasks. This provides a quick overview of all requests in the system.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {}
                        },
                        "annotations": null
                    },
                    {
                        "name": "add_tasks_to_request",
                        "description": "Add new tasks to an existing request. This allows extending a request with additional tasks.\n\nA progress table will be displayed showing all tasks including the newly added ones.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "requestId": {
                                    "type": "string"
                                },
                                "tasks": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "title",
                                            "description"
                                        ]
                                    }
                                }
                            },
                            "required": [
                                "requestId",
                                "tasks"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "update_task",
                        "description": "Update an existing task's title and/or description. Only uncompleted tasks can be updated.\n\nA progress table will be displayed showing the updated task information.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "requestId": {
                                    "type": "string"
                                },
                                "taskId": {
                                    "type": "string"
                                },
                                "title": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "requestId",
                                "taskId"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "delete_task",
                        "description": "Delete a specific task from a request. Only uncompleted tasks can be deleted.\n\nA progress table will be displayed showing the remaining tasks after deletion.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "requestId": {
                                    "type": "string"
                                },
                                "taskId": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "requestId",
                                "taskId"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Random Number MCP",
        "description": "Essential random number generation utilities from the Python standard library, including pseudorandom and cryptographically secure operations for integers, floats, weighted selections, list shuffling, and secure token generation.",
        "web": "https://github.com/zazencodes/random-number-mcp",
        "config": {
            "mcpServers": {
                "random-number": {
                    "command": "uvx",
                    "args": [
                        "random-number-mcp"
                    ]
                }
            }
        },
        "category": "Entertainment",
        "tools": {
            "random-number": {
                "server_name": "random-number",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "random_int",
                        "description": "Generate a random integer between low and high (inclusive).\n\nArgs:\n    low: Lower bound (inclusive)\n    high: Upper bound (inclusive)\n\nReturns:\n    Random integer between low and high",
                        "inputSchema": {
                            "properties": {
                                "low": {
                                    "title": "Low",
                                    "type": "integer"
                                },
                                "high": {
                                    "title": "High",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "low",
                                "high"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "random_float",
                        "description": "Generate a random float between low and high.\n\nArgs:\n    low: Lower bound (default 0.0)\n    high: Upper bound (default 1.0)\n\nReturns:\n    Random float between low and high",
                        "inputSchema": {
                            "properties": {
                                "low": {
                                    "default": 0.0,
                                    "title": "Low",
                                    "type": "number"
                                },
                                "high": {
                                    "default": 1.0,
                                    "title": "High",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "number"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "random_choices",
                        "description": "Choose k items from population with replacement, optionally weighted.\n\nArgs:\n    population: List of items to choose from\n    k: Number of items to choose (default 1)\n    weights: Optional weights for each item (default None for equal weights)\n\nReturns:\n    List of k chosen items",
                        "inputSchema": {
                            "properties": {
                                "population": {
                                    "items": {},
                                    "title": "Population",
                                    "type": "array"
                                },
                                "k": {
                                    "default": 1,
                                    "title": "K",
                                    "type": "integer"
                                },
                                "weights": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "type": "integer"
                                                    },
                                                    {
                                                        "type": "number"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Weights"
                                }
                            },
                            "required": [
                                "population"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "items": {},
                                    "title": "Result",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "random_shuffle",
                        "description": "Return a new list with items in random order.\n\nArgs:\n    items: List of items to shuffle\n\nReturns:\n    New list with items in random order",
                        "inputSchema": {
                            "properties": {
                                "items": {
                                    "items": {},
                                    "title": "Items",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "items"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "items": {},
                                    "title": "Result",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "random_sample",
                        "description": "Choose k unique items from population without replacement.\n\nArgs:\n    population: List of items to choose from\n    k: Number of items to choose\n\nReturns:\n    List of k unique chosen items",
                        "inputSchema": {
                            "properties": {
                                "population": {
                                    "items": {},
                                    "title": "Population",
                                    "type": "array"
                                },
                                "k": {
                                    "title": "K",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "population",
                                "k"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "items": {},
                                    "title": "Result",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "secure_token_hex",
                        "description": "Generate a secure random hex token.\n\nArgs:\n    nbytes: Number of random bytes to generate (default 32)\n\nReturns:\n    Hex string containing 2*nbytes characters",
                        "inputSchema": {
                            "properties": {
                                "nbytes": {
                                    "default": 32,
                                    "title": "Nbytes",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "secure_random_int",
                        "description": "Generate a secure random integer below upper_bound.\n\nArgs:\n    upper_bound: Upper bound (exclusive)\n\nReturns:\n    Random integer in range [0, upper_bound)",
                        "inputSchema": {
                            "properties": {
                                "upper_bound": {
                                    "title": "Upper Bound",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "upper_bound"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        },
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Office-Word-MCP-Server",
        "organization": "GongRzhe",
        "description": "A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Word documents. This server enables AI assistants to work with Word documents through a standardized interface, providing rich document editing capabilities.",
        "web": "https://github.com/gongrzhe/office-word-mcp-server",
        "config": {
            "mcpServers": {
                "word-document-server": {
                    "command": "uvx",
                    "args": [
                        "--from",
                        "office-word-mcp-server",
                        "word_mcp_server"
                    ]
                }
            }
        },
        "category": "File Access",
        "tools": {
            "word-document-server": {
                "server_name": "word-document-server",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "create_document",
                        "description": "Create a new Word document with optional metadata.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "title": {
                                    "default": null,
                                    "title": "Title",
                                    "type": "string"
                                },
                                "author": {
                                    "default": null,
                                    "title": "Author",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "copy_document",
                        "description": "Create a copy of a Word document.",
                        "inputSchema": {
                            "properties": {
                                "source_filename": {
                                    "title": "Source Filename",
                                    "type": "string"
                                },
                                "destination_filename": {
                                    "default": null,
                                    "title": "Destination Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "source_filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_document_info",
                        "description": "Get information about a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_document_text",
                        "description": "Extract all text from a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_document_outline",
                        "description": "Get the structure of a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "list_available_documents",
                        "description": "List all .docx files in the specified directory.",
                        "inputSchema": {
                            "properties": {
                                "directory": {
                                    "default": ".",
                                    "title": "Directory",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_document_xml",
                        "description": "Get the raw XML structure of a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "insert_header_near_text",
                        "description": "Insert a header (with specified style) before or after the target paragraph. Specify by text or paragraph index. Args: filename (str), target_text (str, optional), header_title (str), position ('before' or 'after'), header_style (str, default 'Heading 1'), target_paragraph_index (int, optional).",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "target_text": {
                                    "default": null,
                                    "title": "Target Text",
                                    "type": "string"
                                },
                                "header_title": {
                                    "default": null,
                                    "title": "Header Title",
                                    "type": "string"
                                },
                                "position": {
                                    "default": "after",
                                    "title": "Position",
                                    "type": "string"
                                },
                                "header_style": {
                                    "default": "Heading 1",
                                    "title": "Header Style",
                                    "type": "string"
                                },
                                "target_paragraph_index": {
                                    "default": null,
                                    "title": "Target Paragraph Index",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "insert_line_or_paragraph_near_text",
                        "description": "Insert a new line or paragraph (with specified or matched style) before or after the target paragraph. Specify by text or paragraph index. Args: filename (str), target_text (str, optional), line_text (str), position ('before' or 'after'), line_style (str, optional), target_paragraph_index (int, optional).",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "target_text": {
                                    "default": null,
                                    "title": "Target Text",
                                    "type": "string"
                                },
                                "line_text": {
                                    "default": null,
                                    "title": "Line Text",
                                    "type": "string"
                                },
                                "position": {
                                    "default": "after",
                                    "title": "Position",
                                    "type": "string"
                                },
                                "line_style": {
                                    "default": null,
                                    "title": "Line Style",
                                    "type": "string"
                                },
                                "target_paragraph_index": {
                                    "default": null,
                                    "title": "Target Paragraph Index",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "insert_numbered_list_near_text",
                        "description": "Insert a numbered list before or after the target paragraph. Specify by text or paragraph index. Args: filename (str), target_text (str, optional), list_items (list of str), position ('before' or 'after'), target_paragraph_index (int, optional).",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "target_text": {
                                    "default": null,
                                    "title": "Target Text",
                                    "type": "string"
                                },
                                "list_items": {
                                    "default": null,
                                    "items": {},
                                    "title": "List Items",
                                    "type": "array"
                                },
                                "position": {
                                    "default": "after",
                                    "title": "Position",
                                    "type": "string"
                                },
                                "target_paragraph_index": {
                                    "default": null,
                                    "title": "Target Paragraph Index",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_paragraph",
                        "description": "Add a paragraph to a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "text": {
                                    "title": "Text",
                                    "type": "string"
                                },
                                "style": {
                                    "default": null,
                                    "title": "Style",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "text"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_heading",
                        "description": "Add a heading to a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "text": {
                                    "title": "Text",
                                    "type": "string"
                                },
                                "level": {
                                    "default": 1,
                                    "title": "Level",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename",
                                "text"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_picture",
                        "description": "Add an image to a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "image_path": {
                                    "title": "Image Path",
                                    "type": "string"
                                },
                                "width": {
                                    "default": null,
                                    "title": "Width",
                                    "type": "number"
                                }
                            },
                            "required": [
                                "filename",
                                "image_path"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_table",
                        "description": "Add a table to a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "rows": {
                                    "title": "Rows",
                                    "type": "integer"
                                },
                                "cols": {
                                    "title": "Cols",
                                    "type": "integer"
                                },
                                "data": {
                                    "default": null,
                                    "items": {},
                                    "title": "Data",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "filename",
                                "rows",
                                "cols"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_page_break",
                        "description": "Add a page break to the document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "delete_paragraph",
                        "description": "Delete a paragraph from a document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "paragraph_index": {
                                    "title": "Paragraph Index",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename",
                                "paragraph_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "search_and_replace",
                        "description": "Search for text and replace all occurrences.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "find_text": {
                                    "title": "Find Text",
                                    "type": "string"
                                },
                                "replace_text": {
                                    "title": "Replace Text",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "find_text",
                                "replace_text"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "create_custom_style",
                        "description": "Create a custom style in the document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "style_name": {
                                    "title": "Style Name",
                                    "type": "string"
                                },
                                "bold": {
                                    "default": null,
                                    "title": "Bold",
                                    "type": "boolean"
                                },
                                "italic": {
                                    "default": null,
                                    "title": "Italic",
                                    "type": "boolean"
                                },
                                "font_size": {
                                    "default": null,
                                    "title": "Font Size",
                                    "type": "integer"
                                },
                                "font_name": {
                                    "default": null,
                                    "title": "Font Name",
                                    "type": "string"
                                },
                                "color": {
                                    "default": null,
                                    "title": "Color",
                                    "type": "string"
                                },
                                "base_style": {
                                    "default": null,
                                    "title": "Base Style",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "style_name"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "format_text",
                        "description": "Format a specific range of text within a paragraph.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "paragraph_index": {
                                    "title": "Paragraph Index",
                                    "type": "integer"
                                },
                                "start_pos": {
                                    "title": "Start Pos",
                                    "type": "integer"
                                },
                                "end_pos": {
                                    "title": "End Pos",
                                    "type": "integer"
                                },
                                "bold": {
                                    "default": null,
                                    "title": "Bold",
                                    "type": "boolean"
                                },
                                "italic": {
                                    "default": null,
                                    "title": "Italic",
                                    "type": "boolean"
                                },
                                "underline": {
                                    "default": null,
                                    "title": "Underline",
                                    "type": "boolean"
                                },
                                "color": {
                                    "default": null,
                                    "title": "Color",
                                    "type": "string"
                                },
                                "font_size": {
                                    "default": null,
                                    "title": "Font Size",
                                    "type": "integer"
                                },
                                "font_name": {
                                    "default": null,
                                    "title": "Font Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "paragraph_index",
                                "start_pos",
                                "end_pos"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "format_table",
                        "description": "Format a table with borders, shading, and structure.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "has_header_row": {
                                    "default": null,
                                    "title": "Has Header Row",
                                    "type": "boolean"
                                },
                                "border_style": {
                                    "default": null,
                                    "title": "Border Style",
                                    "type": "string"
                                },
                                "shading": {
                                    "default": null,
                                    "items": {},
                                    "title": "Shading",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "set_table_cell_shading",
                        "description": "Apply shading/filling to a specific table cell.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "row_index": {
                                    "title": "Row Index",
                                    "type": "integer"
                                },
                                "col_index": {
                                    "title": "Col Index",
                                    "type": "integer"
                                },
                                "fill_color": {
                                    "title": "Fill Color",
                                    "type": "string"
                                },
                                "pattern": {
                                    "default": "clear",
                                    "title": "Pattern",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "row_index",
                                "col_index",
                                "fill_color"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "apply_table_alternating_rows",
                        "description": "Apply alternating row colors to a table for better readability.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "color1": {
                                    "default": "FFFFFF",
                                    "title": "Color1",
                                    "type": "string"
                                },
                                "color2": {
                                    "default": "F2F2F2",
                                    "title": "Color2",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "highlight_table_header",
                        "description": "Apply special highlighting to table header row.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "header_color": {
                                    "default": "4472C4",
                                    "title": "Header Color",
                                    "type": "string"
                                },
                                "text_color": {
                                    "default": "FFFFFF",
                                    "title": "Text Color",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "merge_table_cells",
                        "description": "Merge cells in a rectangular area of a table.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "start_row": {
                                    "title": "Start Row",
                                    "type": "integer"
                                },
                                "start_col": {
                                    "title": "Start Col",
                                    "type": "integer"
                                },
                                "end_row": {
                                    "title": "End Row",
                                    "type": "integer"
                                },
                                "end_col": {
                                    "title": "End Col",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "start_row",
                                "start_col",
                                "end_row",
                                "end_col"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "merge_table_cells_horizontal",
                        "description": "Merge cells horizontally in a single row.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "row_index": {
                                    "title": "Row Index",
                                    "type": "integer"
                                },
                                "start_col": {
                                    "title": "Start Col",
                                    "type": "integer"
                                },
                                "end_col": {
                                    "title": "End Col",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "row_index",
                                "start_col",
                                "end_col"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "merge_table_cells_vertical",
                        "description": "Merge cells vertically in a single column.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "col_index": {
                                    "title": "Col Index",
                                    "type": "integer"
                                },
                                "start_row": {
                                    "title": "Start Row",
                                    "type": "integer"
                                },
                                "end_row": {
                                    "title": "End Row",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "col_index",
                                "start_row",
                                "end_row"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "set_table_cell_alignment",
                        "description": "Set text alignment for a specific table cell.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "row_index": {
                                    "title": "Row Index",
                                    "type": "integer"
                                },
                                "col_index": {
                                    "title": "Col Index",
                                    "type": "integer"
                                },
                                "horizontal": {
                                    "default": "left",
                                    "title": "Horizontal",
                                    "type": "string"
                                },
                                "vertical": {
                                    "default": "top",
                                    "title": "Vertical",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "row_index",
                                "col_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "set_table_alignment_all",
                        "description": "Set text alignment for all cells in a table.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "horizontal": {
                                    "default": "left",
                                    "title": "Horizontal",
                                    "type": "string"
                                },
                                "vertical": {
                                    "default": "top",
                                    "title": "Vertical",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "protect_document",
                        "description": "Add password protection to a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "password": {
                                    "title": "Password",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "password"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "unprotect_document",
                        "description": "Remove password protection from a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "password": {
                                    "title": "Password",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "password"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_footnote_to_document",
                        "description": "Add a footnote to a specific paragraph in a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "paragraph_index": {
                                    "title": "Paragraph Index",
                                    "type": "integer"
                                },
                                "footnote_text": {
                                    "title": "Footnote Text",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "paragraph_index",
                                "footnote_text"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_footnote_after_text",
                        "description": "Add a footnote after specific text with proper superscript formatting.\nThis enhanced function ensures footnotes display correctly as superscript.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "search_text": {
                                    "title": "Search Text",
                                    "type": "string"
                                },
                                "footnote_text": {
                                    "title": "Footnote Text",
                                    "type": "string"
                                },
                                "output_filename": {
                                    "default": null,
                                    "title": "Output Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "search_text",
                                "footnote_text"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_footnote_before_text",
                        "description": "Add a footnote before specific text with proper superscript formatting.\nThis enhanced function ensures footnotes display correctly as superscript.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "search_text": {
                                    "title": "Search Text",
                                    "type": "string"
                                },
                                "footnote_text": {
                                    "title": "Footnote Text",
                                    "type": "string"
                                },
                                "output_filename": {
                                    "default": null,
                                    "title": "Output Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "search_text",
                                "footnote_text"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_footnote_enhanced",
                        "description": "Enhanced footnote addition with guaranteed superscript formatting.\nAdds footnote at the end of a specific paragraph with proper style handling.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "paragraph_index": {
                                    "title": "Paragraph Index",
                                    "type": "integer"
                                },
                                "footnote_text": {
                                    "title": "Footnote Text",
                                    "type": "string"
                                },
                                "output_filename": {
                                    "default": null,
                                    "title": "Output Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "paragraph_index",
                                "footnote_text"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_endnote_to_document",
                        "description": "Add an endnote to a specific paragraph in a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "paragraph_index": {
                                    "title": "Paragraph Index",
                                    "type": "integer"
                                },
                                "endnote_text": {
                                    "title": "Endnote Text",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "paragraph_index",
                                "endnote_text"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "customize_footnote_style",
                        "description": "Customize footnote numbering and formatting in a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "numbering_format": {
                                    "default": "1, 2, 3",
                                    "title": "Numbering Format",
                                    "type": "string"
                                },
                                "start_number": {
                                    "default": 1,
                                    "title": "Start Number",
                                    "type": "integer"
                                },
                                "font_name": {
                                    "default": null,
                                    "title": "Font Name",
                                    "type": "string"
                                },
                                "font_size": {
                                    "default": null,
                                    "title": "Font Size",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "delete_footnote_from_document",
                        "description": "Delete a footnote from a Word document.\nIdentify the footnote either by ID (1, 2, 3, etc.) or by searching for text near it.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "footnote_id": {
                                    "default": null,
                                    "title": "Footnote Id",
                                    "type": "integer"
                                },
                                "search_text": {
                                    "default": null,
                                    "title": "Search Text",
                                    "type": "string"
                                },
                                "output_filename": {
                                    "default": null,
                                    "title": "Output Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "add_footnote_robust",
                        "description": "Add footnote with robust validation and Word compliance.\nThis is the production-ready version with comprehensive error handling.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "search_text": {
                                    "default": null,
                                    "title": "Search Text",
                                    "type": "string"
                                },
                                "paragraph_index": {
                                    "default": null,
                                    "title": "Paragraph Index",
                                    "type": "integer"
                                },
                                "footnote_text": {
                                    "default": "",
                                    "title": "Footnote Text",
                                    "type": "string"
                                },
                                "validate_location": {
                                    "default": true,
                                    "title": "Validate Location",
                                    "type": "boolean"
                                },
                                "auto_repair": {
                                    "default": false,
                                    "title": "Auto Repair",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "validate_document_footnotes",
                        "description": "Validate all footnotes in document for coherence and compliance.\nReturns detailed report on ID conflicts, orphaned content, missing styles, etc.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "delete_footnote_robust",
                        "description": "Delete footnote with comprehensive cleanup and orphan removal.\nEnsures complete removal from document.xml, footnotes.xml, and relationships.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "footnote_id": {
                                    "default": null,
                                    "title": "Footnote Id",
                                    "type": "integer"
                                },
                                "search_text": {
                                    "default": null,
                                    "title": "Search Text",
                                    "type": "string"
                                },
                                "clean_orphans": {
                                    "default": true,
                                    "title": "Clean Orphans",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_paragraph_text_from_document",
                        "description": "Get text from a specific paragraph in a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "paragraph_index": {
                                    "title": "Paragraph Index",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename",
                                "paragraph_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "find_text_in_document",
                        "description": "Find occurrences of specific text in a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "text_to_find": {
                                    "title": "Text To Find",
                                    "type": "string"
                                },
                                "match_case": {
                                    "default": true,
                                    "title": "Match Case",
                                    "type": "boolean"
                                },
                                "whole_word": {
                                    "default": false,
                                    "title": "Whole Word",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "filename",
                                "text_to_find"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "convert_to_pdf",
                        "description": "Convert a Word document to PDF format.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "output_filename": {
                                    "default": null,
                                    "title": "Output Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "replace_paragraph_block_below_header",
                        "description": "Reemplaza el bloque de párrafos debajo de un encabezado, evitando modificar TOC.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "header_text": {
                                    "title": "Header Text",
                                    "type": "string"
                                },
                                "new_paragraphs": {
                                    "items": {},
                                    "title": "New Paragraphs",
                                    "type": "array"
                                },
                                "detect_block_end_fn": {
                                    "default": null,
                                    "title": "Detect Block End Fn"
                                }
                            },
                            "required": [
                                "filename",
                                "header_text",
                                "new_paragraphs"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "replace_block_between_manual_anchors",
                        "description": "Replace all content between start_anchor_text and end_anchor_text (or next logical header if not provided).",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "start_anchor_text": {
                                    "title": "Start Anchor Text",
                                    "type": "string"
                                },
                                "new_paragraphs": {
                                    "items": {},
                                    "title": "New Paragraphs",
                                    "type": "array"
                                },
                                "end_anchor_text": {
                                    "default": null,
                                    "title": "End Anchor Text",
                                    "type": "string"
                                },
                                "match_fn": {
                                    "default": null,
                                    "title": "Match Fn"
                                },
                                "new_paragraph_style": {
                                    "default": null,
                                    "title": "New Paragraph Style",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "start_anchor_text",
                                "new_paragraphs"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_all_comments",
                        "description": "Extract all comments from a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_comments_by_author",
                        "description": "Extract comments from a specific author in a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "author": {
                                    "title": "Author",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "author"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "get_comments_for_paragraph",
                        "description": "Extract comments for a specific paragraph in a Word document.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "paragraph_index": {
                                    "title": "Paragraph Index",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename",
                                "paragraph_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "set_table_column_width",
                        "description": "Set the width of a specific table column.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "col_index": {
                                    "title": "Col Index",
                                    "type": "integer"
                                },
                                "width": {
                                    "title": "Width",
                                    "type": "number"
                                },
                                "width_type": {
                                    "default": "points",
                                    "title": "Width Type",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "col_index",
                                "width"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "set_table_column_widths",
                        "description": "Set the widths of multiple table columns.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "widths": {
                                    "items": {},
                                    "title": "Widths",
                                    "type": "array"
                                },
                                "width_type": {
                                    "default": "points",
                                    "title": "Width Type",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "widths"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "set_table_width",
                        "description": "Set the overall width of a table.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "width": {
                                    "title": "Width",
                                    "type": "number"
                                },
                                "width_type": {
                                    "default": "points",
                                    "title": "Width Type",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "width"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "auto_fit_table_columns",
                        "description": "Set table columns to auto-fit based on content.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "format_table_cell_text",
                        "description": "Format text within a specific table cell.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "row_index": {
                                    "title": "Row Index",
                                    "type": "integer"
                                },
                                "col_index": {
                                    "title": "Col Index",
                                    "type": "integer"
                                },
                                "text_content": {
                                    "default": null,
                                    "title": "Text Content",
                                    "type": "string"
                                },
                                "bold": {
                                    "default": null,
                                    "title": "Bold",
                                    "type": "boolean"
                                },
                                "italic": {
                                    "default": null,
                                    "title": "Italic",
                                    "type": "boolean"
                                },
                                "underline": {
                                    "default": null,
                                    "title": "Underline",
                                    "type": "boolean"
                                },
                                "color": {
                                    "default": null,
                                    "title": "Color",
                                    "type": "string"
                                },
                                "font_size": {
                                    "default": null,
                                    "title": "Font Size",
                                    "type": "integer"
                                },
                                "font_name": {
                                    "default": null,
                                    "title": "Font Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "row_index",
                                "col_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    },
                    {
                        "name": "set_table_cell_padding",
                        "description": "Set padding/margins for a specific table cell.",
                        "inputSchema": {
                            "properties": {
                                "filename": {
                                    "title": "Filename",
                                    "type": "string"
                                },
                                "table_index": {
                                    "title": "Table Index",
                                    "type": "integer"
                                },
                                "row_index": {
                                    "title": "Row Index",
                                    "type": "integer"
                                },
                                "col_index": {
                                    "title": "Col Index",
                                    "type": "integer"
                                },
                                "top": {
                                    "default": null,
                                    "title": "Top",
                                    "type": "number"
                                },
                                "bottom": {
                                    "default": null,
                                    "title": "Bottom",
                                    "type": "number"
                                },
                                "left": {
                                    "default": null,
                                    "title": "Left",
                                    "type": "number"
                                },
                                "right": {
                                    "default": null,
                                    "title": "Right",
                                    "type": "number"
                                },
                                "unit": {
                                    "default": "points",
                                    "title": "Unit",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "filename",
                                "table_index",
                                "row_index",
                                "col_index"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "_meta": {
                            "_fastmcp": {
                                "tags": []
                            }
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "magicuidesign_mcp",
        "description": "Official ModelContextProtocol (MCP) server for Magic UI.",
        "web": "https://github.com/magicuidesign/mcp",
        "config": {
            "mcpServers": {
                "magicuidesign_mcp": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@magicuidesign/mcp@latest"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "magicuidesign_mcp": {
                "server_name": "magicuidesign_mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "getUIComponents",
                        "description": "Provides a comprehensive list of all Magic UI components.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "getComponents",
                        "description": "Provides implementation details for marquee, terminal, hero-video-dialog, bento-grid, animated-list, dock, globe, tweet-card, client-tweet-card, orbiting-circles, avatar-circles, icon-cloud, animated-circular-progress-bar, file-tree, code-comparison, script-copy-btn, scroll-progress, lens, pointer components.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "getDeviceMocks",
                        "description": "Provides implementation details for safari, iphone-15-pro, android components.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "getSpecialEffects",
                        "description": "Provides implementation details for animated-beam, border-beam, shine-border, magic-card, meteors, neon-gradient-card, confetti, particles, cool-mode, scratch-to-reveal components.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "getAnimations",
                        "description": "Provides implementation details for blur-fade components.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "getTextAnimations",
                        "description": "Provides implementation details for text-animate, line-shadow-text, aurora-text, number-ticker, animated-shiny-text, animated-gradient-text, text-reveal, hyper-text, word-rotate, typing-animation, scroll-based-velocity, flip-text, box-reveal, sparkles-text, morphing-text, spinning-text components.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "getButtons",
                        "description": "Provides implementation details for rainbow-button, shimmer-button, shiny-button, interactive-hover-button, animated-subscribe-button, pulsating-button, ripple-button components.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "getBackgrounds",
                        "description": "Provides implementation details for warp-background, flickering-grid, animated-grid-pattern, retro-grid, ripple, dot-pattern, grid-pattern, interactive-grid-pattern components.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Web3 Research MCP",
        "description": "Deep Research for crypto - free & fully local 🧠",
        "web": "https://github.com/aaronjmars/web3-research-mcp",
        "config": {
            "mcpServers": {
                "web3-research-mcp": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "web3-research-mcp@latest"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "web3-research-mcp": {
                "server_name": "web3-research-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "search",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "Search query"
                                },
                                "searchType": {
                                    "type": "string",
                                    "enum": [
                                        "web",
                                        "news",
                                        "images",
                                        "videos"
                                    ],
                                    "default": "web",
                                    "description": "Type of search"
                                }
                            },
                            "required": [
                                "query"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "create-research-plan",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "tokenName": {
                                    "type": "string",
                                    "description": "Token name"
                                },
                                "tokenTicker": {
                                    "type": "string",
                                    "description": "Token ticker symbol"
                                }
                            },
                            "required": [
                                "tokenName",
                                "tokenTicker"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "research-with-keywords",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "tokenName": {
                                    "type": "string",
                                    "description": "Name of the token"
                                },
                                "tokenTicker": {
                                    "type": "string",
                                    "description": "Ticker symbol of the token"
                                },
                                "keywords": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Keywords to search for"
                                }
                            },
                            "required": [
                                "tokenName",
                                "tokenTicker",
                                "keywords"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "update-status",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "section": {
                                    "type": "string",
                                    "description": "Section name to update (e.g., 'projectInfo', 'technicalFundamentals')"
                                },
                                "status": {
                                    "type": "string",
                                    "enum": [
                                        "planned",
                                        "in_progress",
                                        "completed"
                                    ],
                                    "description": "New status for the section"
                                }
                            },
                            "required": [
                                "section",
                                "status"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "fetch-content",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL to fetch content from (can be a resource:// URL)"
                                },
                                "format": {
                                    "type": "string",
                                    "enum": [
                                        "text",
                                        "html",
                                        "markdown",
                                        "json"
                                    ],
                                    "default": "markdown",
                                    "description": "Output format"
                                }
                            },
                            "required": [
                                "url"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "search-source",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "tokenName": {
                                    "type": "string",
                                    "description": "Name of the token"
                                },
                                "tokenTicker": {
                                    "type": "string",
                                    "description": "Ticker symbol of the token"
                                },
                                "source": {
                                    "type": "string",
                                    "description": "Source to search (e.g., 'Dune', 'IQ Wiki', 'News')"
                                }
                            },
                            "required": [
                                "tokenName",
                                "tokenTicker",
                                "source"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "list-resources",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "research-source",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "tokenName": {
                                    "type": "string",
                                    "description": "Name of the token"
                                },
                                "tokenTicker": {
                                    "type": "string",
                                    "description": "Ticker symbol of the token"
                                },
                                "source": {
                                    "type": "string",
                                    "description": "Single source to research"
                                }
                            },
                            "required": [
                                "tokenName",
                                "tokenTicker",
                                "source"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "research-token",
                        "description": null,
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "tokenName": {
                                    "type": "string",
                                    "description": "Name of the token"
                                },
                                "tokenTicker": {
                                    "type": "string",
                                    "description": "Ticker symbol of the token"
                                },
                                "source": {
                                    "type": "string",
                                    "description": "Source to research (e.g., 'IQ Wiki', 'CoinMarketCap')"
                                }
                            },
                            "required": [
                                "tokenName",
                                "tokenTicker",
                                "source"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Hugeicons MCP Server",
        "description": "This is a TypeScript-based MCP server that provides tools and resources for integrating Hugeicons into various platforms. It implements a Model Context Protocol (MCP) server that helps AI assistants provide accurate guidance for using Hugeicons.",
        "web": "https://github.com/hugeicons/mcp-server",
        "config": {
            "mcpServers": {
                "hugeicons": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@hugeicons/mcp-server"
                    ]
                }
            }
        },
        "category": "Visualization",
        "tools": {
            "hugeicons": {
                "server_name": "hugeicons",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "list_icons",
                        "description": "Get a list of all available Hugeicons icons",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": null
                    },
                    {
                        "name": "search_icons",
                        "description": "Search for icons by name or tags. Use commas to search for multiple icons (e.g. 'home, notification, settings')",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "Search query to find relevant icons. Separate multiple searches with commas"
                                }
                            },
                            "required": [
                                "query"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_platform_usage",
                        "description": "Get platform-specific usage instructions for Hugeicons",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "platform": {
                                    "type": "string",
                                    "description": "Platform name (react, vue, angular, svelte, react-native, flutter, html)",
                                    "enum": [
                                        "react",
                                        "vue",
                                        "angular",
                                        "svelte",
                                        "react-native",
                                        "flutter",
                                        "html"
                                    ]
                                }
                            },
                            "required": [
                                "platform"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "docker-mcp",
        "organization": "QuantGeekDev",
        "description": "A powerful Model Context Protocol (MCP) server for Docker operations, enabling seamless container and compose stack management through Claude AI.",
        "web": "https://github.com/QuantGeekDev/docker-mcp",
        "config": {
            "mcpServers": {
                "docker-mcp": {
                    "command": "uvx",
                    "args": [
                        "docker-mcp"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "docker-mcp": {
                "server_name": "docker-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "create-container",
                        "description": "Create a new standalone Docker container",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "image": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "ports": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                },
                                "environment": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            },
                            "required": [
                                "image"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "deploy-compose",
                        "description": "Deploy a Docker Compose stack",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "compose_yaml": {
                                    "type": "string"
                                },
                                "project_name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "compose_yaml",
                                "project_name"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-logs",
                        "description": "Retrieve the latest logs for a specified Docker container",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "container_name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "container_name"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "list-containers",
                        "description": "List all Docker containers",
                        "inputSchema": {
                            "type": "object",
                            "properties": {}
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Basic Memory",
        "organization": "basicmachines-co",
        "description": "Basic Memory lets you build persistent knowledge through natural conversations with Large Language Models (LLMs) like Claude, while keeping everything in simple Markdown files on your computer. It uses the Model Context Protocol (MCP) to enable any compatible LLM to read and write to your local knowledge base.",
        "web": "https://github.com/basicmachines-co/basic-memory",
        "config": {
            "mcpServers": {
                "basic-memory": {
                    "command": "uvx",
                    "args": [
                        "basic-memory",
                        "mcp"
                    ]
                }
            }
        },
        "category": "Miscellaneous",
        "tools": {
            "basic-memory": {
                "server_name": "basic-memory",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "delete_note",
                        "description": "Delete a note by title or permalink",
                        "inputSchema": {
                            "properties": {
                                "identifier": {
                                    "title": "Identifier",
                                    "type": "string"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "identifier"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "title": "Result"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "read_content",
                        "description": "Read a file's raw content by path or permalink",
                        "inputSchema": {
                            "properties": {
                                "path": {
                                    "title": "Path",
                                    "type": "string"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "path"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "additionalProperties": true,
                            "type": "object"
                        }
                    },
                    {
                        "name": "build_context",
                        "description": "Build context from a memory:// URI to continue conversations naturally.\n    \n    Use this to follow up on previous discussions or explore related topics.\n    \n    Memory URL Format:\n    - Use paths like \"folder/note\" or \"memory://folder/note\" \n    - Pattern matching: \"folder/*\" matches all notes in folder\n    - Valid characters: letters, numbers, hyphens, underscores, forward slashes\n    - Avoid: double slashes (//), angle brackets (<>), quotes, pipes (|)\n    - Examples: \"specs/search\", \"projects/basic-memory\", \"notes/*\"\n    \n    Timeframes support natural language like:\n    - \"2 days ago\", \"last week\", \"today\", \"3 months ago\"\n    - Or standard formats like \"7d\", \"24h\"\n    ",
                        "inputSchema": {
                            "properties": {
                                "url": {
                                    "maxLength": 2028,
                                    "minLength": 1,
                                    "title": "Url",
                                    "type": "string"
                                },
                                "depth": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": 1,
                                    "title": "Depth"
                                },
                                "timeframe": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": "7d",
                                    "title": "Timeframe"
                                },
                                "page": {
                                    "default": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 10,
                                    "title": "Page Size",
                                    "type": "integer"
                                },
                                "max_related": {
                                    "default": 10,
                                    "title": "Max Related",
                                    "type": "integer"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "url"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "$defs": {
                                "ContextResult": {
                                    "description": "Context result containing a primary item with its observations and related items.",
                                    "properties": {
                                        "primary_result": {
                                            "anyOf": [
                                                {
                                                    "$ref": "#/$defs/EntitySummary"
                                                },
                                                {
                                                    "$ref": "#/$defs/RelationSummary"
                                                },
                                                {
                                                    "$ref": "#/$defs/ObservationSummary"
                                                }
                                            ],
                                            "description": "Primary item",
                                            "title": "Primary Result"
                                        },
                                        "observations": {
                                            "description": "Observations belonging to this entity",
                                            "items": {
                                                "$ref": "#/$defs/ObservationSummary"
                                            },
                                            "title": "Observations",
                                            "type": "array"
                                        },
                                        "related_results": {
                                            "description": "Related items",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "$ref": "#/$defs/EntitySummary"
                                                    },
                                                    {
                                                        "$ref": "#/$defs/RelationSummary"
                                                    },
                                                    {
                                                        "$ref": "#/$defs/ObservationSummary"
                                                    }
                                                ]
                                            },
                                            "title": "Related Results",
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "primary_result"
                                    ],
                                    "title": "ContextResult",
                                    "type": "object"
                                },
                                "EntitySummary": {
                                    "description": "Simplified entity representation.",
                                    "properties": {
                                        "type": {
                                            "default": "entity",
                                            "title": "Type",
                                            "type": "string"
                                        },
                                        "permalink": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "title": "Permalink"
                                        },
                                        "title": {
                                            "title": "Title",
                                            "type": "string"
                                        },
                                        "content": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Content"
                                        },
                                        "file_path": {
                                            "title": "File Path",
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "format": "date-time",
                                            "title": "Created At",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "permalink",
                                        "title",
                                        "file_path",
                                        "created_at"
                                    ],
                                    "title": "EntitySummary",
                                    "type": "object"
                                },
                                "MemoryMetadata": {
                                    "description": "Simplified response metadata.",
                                    "properties": {
                                        "uri": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Uri"
                                        },
                                        "types": {
                                            "anyOf": [
                                                {
                                                    "items": {
                                                        "$ref": "#/$defs/SearchItemType"
                                                    },
                                                    "type": "array"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Types"
                                        },
                                        "depth": {
                                            "title": "Depth",
                                            "type": "integer"
                                        },
                                        "timeframe": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Timeframe"
                                        },
                                        "generated_at": {
                                            "format": "date-time",
                                            "title": "Generated At",
                                            "type": "string"
                                        },
                                        "primary_count": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Primary Count"
                                        },
                                        "related_count": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Related Count"
                                        },
                                        "total_results": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Total Results"
                                        },
                                        "total_relations": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Total Relations"
                                        },
                                        "total_observations": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Total Observations"
                                        }
                                    },
                                    "required": [
                                        "depth",
                                        "generated_at"
                                    ],
                                    "title": "MemoryMetadata",
                                    "type": "object"
                                },
                                "ObservationSummary": {
                                    "description": "Simplified observation representation.",
                                    "properties": {
                                        "type": {
                                            "default": "observation",
                                            "title": "Type",
                                            "type": "string"
                                        },
                                        "title": {
                                            "title": "Title",
                                            "type": "string"
                                        },
                                        "file_path": {
                                            "title": "File Path",
                                            "type": "string"
                                        },
                                        "permalink": {
                                            "title": "Permalink",
                                            "type": "string"
                                        },
                                        "category": {
                                            "title": "Category",
                                            "type": "string"
                                        },
                                        "content": {
                                            "title": "Content",
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "format": "date-time",
                                            "title": "Created At",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "title",
                                        "file_path",
                                        "permalink",
                                        "category",
                                        "content",
                                        "created_at"
                                    ],
                                    "title": "ObservationSummary",
                                    "type": "object"
                                },
                                "RelationSummary": {
                                    "description": "Simplified relation representation.",
                                    "properties": {
                                        "type": {
                                            "default": "relation",
                                            "title": "Type",
                                            "type": "string"
                                        },
                                        "title": {
                                            "title": "Title",
                                            "type": "string"
                                        },
                                        "file_path": {
                                            "title": "File Path",
                                            "type": "string"
                                        },
                                        "permalink": {
                                            "title": "Permalink",
                                            "type": "string"
                                        },
                                        "relation_type": {
                                            "title": "Relation Type",
                                            "type": "string"
                                        },
                                        "from_entity": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "From Entity"
                                        },
                                        "to_entity": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "To Entity"
                                        },
                                        "created_at": {
                                            "format": "date-time",
                                            "title": "Created At",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "title",
                                        "file_path",
                                        "permalink",
                                        "relation_type",
                                        "created_at"
                                    ],
                                    "title": "RelationSummary",
                                    "type": "object"
                                },
                                "SearchItemType": {
                                    "description": "Types of searchable items.",
                                    "enum": [
                                        "entity",
                                        "observation",
                                        "relation"
                                    ],
                                    "title": "SearchItemType",
                                    "type": "string"
                                }
                            },
                            "description": "Complete context response.",
                            "properties": {
                                "results": {
                                    "description": "Hierarchical results with related items nested",
                                    "items": {
                                        "$ref": "#/$defs/ContextResult"
                                    },
                                    "title": "Results",
                                    "type": "array"
                                },
                                "metadata": {
                                    "$ref": "#/$defs/MemoryMetadata"
                                },
                                "page": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Page"
                                },
                                "page_size": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Page Size"
                                }
                            },
                            "required": [
                                "metadata"
                            ],
                            "title": "GraphContext",
                            "type": "object"
                        }
                    },
                    {
                        "name": "recent_activity",
                        "description": "Get recent activity from across the knowledge base.\n\n    Timeframe supports natural language formats like:\n    - \"2 days ago\"  \n    - \"last week\"\n    - \"yesterday\" \n    - \"today\"\n    - \"3 weeks ago\"\n    Or standard formats like \"7d\"\n    ",
                        "inputSchema": {
                            "properties": {
                                "type": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    ],
                                    "default": "",
                                    "title": "Type"
                                },
                                "depth": {
                                    "default": 1,
                                    "title": "Depth",
                                    "type": "integer"
                                },
                                "timeframe": {
                                    "default": "7d",
                                    "title": "Timeframe",
                                    "type": "string"
                                },
                                "page": {
                                    "default": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 10,
                                    "title": "Page Size",
                                    "type": "integer"
                                },
                                "max_related": {
                                    "default": 10,
                                    "title": "Max Related",
                                    "type": "integer"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "$defs": {
                                "ContextResult": {
                                    "description": "Context result containing a primary item with its observations and related items.",
                                    "properties": {
                                        "primary_result": {
                                            "anyOf": [
                                                {
                                                    "$ref": "#/$defs/EntitySummary"
                                                },
                                                {
                                                    "$ref": "#/$defs/RelationSummary"
                                                },
                                                {
                                                    "$ref": "#/$defs/ObservationSummary"
                                                }
                                            ],
                                            "description": "Primary item",
                                            "title": "Primary Result"
                                        },
                                        "observations": {
                                            "description": "Observations belonging to this entity",
                                            "items": {
                                                "$ref": "#/$defs/ObservationSummary"
                                            },
                                            "title": "Observations",
                                            "type": "array"
                                        },
                                        "related_results": {
                                            "description": "Related items",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "$ref": "#/$defs/EntitySummary"
                                                    },
                                                    {
                                                        "$ref": "#/$defs/RelationSummary"
                                                    },
                                                    {
                                                        "$ref": "#/$defs/ObservationSummary"
                                                    }
                                                ]
                                            },
                                            "title": "Related Results",
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "primary_result"
                                    ],
                                    "title": "ContextResult",
                                    "type": "object"
                                },
                                "EntitySummary": {
                                    "description": "Simplified entity representation.",
                                    "properties": {
                                        "type": {
                                            "default": "entity",
                                            "title": "Type",
                                            "type": "string"
                                        },
                                        "permalink": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "title": "Permalink"
                                        },
                                        "title": {
                                            "title": "Title",
                                            "type": "string"
                                        },
                                        "content": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Content"
                                        },
                                        "file_path": {
                                            "title": "File Path",
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "format": "date-time",
                                            "title": "Created At",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "permalink",
                                        "title",
                                        "file_path",
                                        "created_at"
                                    ],
                                    "title": "EntitySummary",
                                    "type": "object"
                                },
                                "MemoryMetadata": {
                                    "description": "Simplified response metadata.",
                                    "properties": {
                                        "uri": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Uri"
                                        },
                                        "types": {
                                            "anyOf": [
                                                {
                                                    "items": {
                                                        "$ref": "#/$defs/SearchItemType"
                                                    },
                                                    "type": "array"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Types"
                                        },
                                        "depth": {
                                            "title": "Depth",
                                            "type": "integer"
                                        },
                                        "timeframe": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Timeframe"
                                        },
                                        "generated_at": {
                                            "format": "date-time",
                                            "title": "Generated At",
                                            "type": "string"
                                        },
                                        "primary_count": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Primary Count"
                                        },
                                        "related_count": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Related Count"
                                        },
                                        "total_results": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Total Results"
                                        },
                                        "total_relations": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Total Relations"
                                        },
                                        "total_observations": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Total Observations"
                                        }
                                    },
                                    "required": [
                                        "depth",
                                        "generated_at"
                                    ],
                                    "title": "MemoryMetadata",
                                    "type": "object"
                                },
                                "ObservationSummary": {
                                    "description": "Simplified observation representation.",
                                    "properties": {
                                        "type": {
                                            "default": "observation",
                                            "title": "Type",
                                            "type": "string"
                                        },
                                        "title": {
                                            "title": "Title",
                                            "type": "string"
                                        },
                                        "file_path": {
                                            "title": "File Path",
                                            "type": "string"
                                        },
                                        "permalink": {
                                            "title": "Permalink",
                                            "type": "string"
                                        },
                                        "category": {
                                            "title": "Category",
                                            "type": "string"
                                        },
                                        "content": {
                                            "title": "Content",
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "format": "date-time",
                                            "title": "Created At",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "title",
                                        "file_path",
                                        "permalink",
                                        "category",
                                        "content",
                                        "created_at"
                                    ],
                                    "title": "ObservationSummary",
                                    "type": "object"
                                },
                                "RelationSummary": {
                                    "description": "Simplified relation representation.",
                                    "properties": {
                                        "type": {
                                            "default": "relation",
                                            "title": "Type",
                                            "type": "string"
                                        },
                                        "title": {
                                            "title": "Title",
                                            "type": "string"
                                        },
                                        "file_path": {
                                            "title": "File Path",
                                            "type": "string"
                                        },
                                        "permalink": {
                                            "title": "Permalink",
                                            "type": "string"
                                        },
                                        "relation_type": {
                                            "title": "Relation Type",
                                            "type": "string"
                                        },
                                        "from_entity": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "From Entity"
                                        },
                                        "to_entity": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "To Entity"
                                        },
                                        "created_at": {
                                            "format": "date-time",
                                            "title": "Created At",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "title",
                                        "file_path",
                                        "permalink",
                                        "relation_type",
                                        "created_at"
                                    ],
                                    "title": "RelationSummary",
                                    "type": "object"
                                },
                                "SearchItemType": {
                                    "description": "Types of searchable items.",
                                    "enum": [
                                        "entity",
                                        "observation",
                                        "relation"
                                    ],
                                    "title": "SearchItemType",
                                    "type": "string"
                                }
                            },
                            "description": "Complete context response.",
                            "properties": {
                                "results": {
                                    "description": "Hierarchical results with related items nested",
                                    "items": {
                                        "$ref": "#/$defs/ContextResult"
                                    },
                                    "title": "Results",
                                    "type": "array"
                                },
                                "metadata": {
                                    "$ref": "#/$defs/MemoryMetadata"
                                },
                                "page": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Page"
                                },
                                "page_size": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Page Size"
                                }
                            },
                            "required": [
                                "metadata"
                            ],
                            "title": "GraphContext",
                            "type": "object"
                        }
                    },
                    {
                        "name": "search_notes",
                        "description": "Search across all content in the knowledge base with advanced syntax support.",
                        "inputSchema": {
                            "properties": {
                                "query": {
                                    "title": "Query",
                                    "type": "string"
                                },
                                "page": {
                                    "default": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 10,
                                    "title": "Page Size",
                                    "type": "integer"
                                },
                                "search_type": {
                                    "default": "text",
                                    "title": "Search Type",
                                    "type": "string"
                                },
                                "types": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Types"
                                },
                                "entity_types": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Entity Types"
                                },
                                "after_date": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "After Date"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "query"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "$defs": {
                                "SearchItemType": {
                                    "description": "Types of searchable items.",
                                    "enum": [
                                        "entity",
                                        "observation",
                                        "relation"
                                    ],
                                    "title": "SearchItemType",
                                    "type": "string"
                                },
                                "SearchResponse": {
                                    "description": "Wrapper for search results.",
                                    "properties": {
                                        "results": {
                                            "items": {
                                                "$ref": "#/$defs/SearchResult"
                                            },
                                            "title": "Results",
                                            "type": "array"
                                        },
                                        "current_page": {
                                            "title": "Current Page",
                                            "type": "integer"
                                        },
                                        "page_size": {
                                            "title": "Page Size",
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "results",
                                        "current_page",
                                        "page_size"
                                    ],
                                    "title": "SearchResponse",
                                    "type": "object"
                                },
                                "SearchResult": {
                                    "description": "Search result with score and metadata.",
                                    "properties": {
                                        "title": {
                                            "title": "Title",
                                            "type": "string"
                                        },
                                        "type": {
                                            "$ref": "#/$defs/SearchItemType"
                                        },
                                        "score": {
                                            "title": "Score",
                                            "type": "number"
                                        },
                                        "entity": {
                                            "anyOf": [
                                                {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Entity"
                                        },
                                        "permalink": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "title": "Permalink"
                                        },
                                        "content": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Content"
                                        },
                                        "file_path": {
                                            "title": "File Path",
                                            "type": "string"
                                        },
                                        "metadata": {
                                            "anyOf": [
                                                {
                                                    "additionalProperties": true,
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Metadata"
                                        },
                                        "category": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Category"
                                        },
                                        "from_entity": {
                                            "anyOf": [
                                                {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "From Entity"
                                        },
                                        "to_entity": {
                                            "anyOf": [
                                                {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "To Entity"
                                        },
                                        "relation_type": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Relation Type"
                                        }
                                    },
                                    "required": [
                                        "title",
                                        "type",
                                        "score",
                                        "permalink",
                                        "file_path"
                                    ],
                                    "title": "SearchResult",
                                    "type": "object"
                                }
                            },
                            "properties": {
                                "result": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/$defs/SearchResponse"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "title": "Result"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "read_note",
                        "description": "Read a markdown note by title or permalink.",
                        "inputSchema": {
                            "properties": {
                                "identifier": {
                                    "title": "Identifier",
                                    "type": "string"
                                },
                                "page": {
                                    "default": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 10,
                                    "title": "Page Size",
                                    "type": "integer"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "identifier"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "view_note",
                        "description": "View a note as a formatted artifact for better readability.",
                        "inputSchema": {
                            "properties": {
                                "identifier": {
                                    "title": "Identifier",
                                    "type": "string"
                                },
                                "page": {
                                    "default": 1,
                                    "title": "Page",
                                    "type": "integer"
                                },
                                "page_size": {
                                    "default": 10,
                                    "title": "Page Size",
                                    "type": "integer"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "identifier"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "write_note",
                        "description": "Create or update a markdown note. Returns a markdown formatted summary of the semantic content.",
                        "inputSchema": {
                            "properties": {
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                },
                                "content": {
                                    "title": "Content",
                                    "type": "string"
                                },
                                "folder": {
                                    "title": "Folder",
                                    "type": "string"
                                },
                                "tags": {
                                    "default": null,
                                    "title": "Tags"
                                },
                                "entity_type": {
                                    "default": "note",
                                    "title": "Entity Type",
                                    "type": "string"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "title",
                                "content",
                                "folder"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "canvas",
                        "description": "Create an Obsidian canvas file to visualize concepts and connections.",
                        "inputSchema": {
                            "properties": {
                                "nodes": {
                                    "items": {
                                        "additionalProperties": true,
                                        "type": "object"
                                    },
                                    "title": "Nodes",
                                    "type": "array"
                                },
                                "edges": {
                                    "items": {
                                        "additionalProperties": true,
                                        "type": "object"
                                    },
                                    "title": "Edges",
                                    "type": "array"
                                },
                                "title": {
                                    "title": "Title",
                                    "type": "string"
                                },
                                "folder": {
                                    "title": "Folder",
                                    "type": "string"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "nodes",
                                "edges",
                                "title",
                                "folder"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "list_directory",
                        "description": "List directory contents with filtering and depth control.",
                        "inputSchema": {
                            "properties": {
                                "dir_name": {
                                    "default": "/",
                                    "title": "Dir Name",
                                    "type": "string"
                                },
                                "depth": {
                                    "default": 1,
                                    "title": "Depth",
                                    "type": "integer"
                                },
                                "file_name_glob": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "File Name Glob"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "edit_note",
                        "description": "Edit an existing markdown note using various operations like append, prepend, find_replace, or replace_section.",
                        "inputSchema": {
                            "properties": {
                                "identifier": {
                                    "title": "Identifier",
                                    "type": "string"
                                },
                                "operation": {
                                    "title": "Operation",
                                    "type": "string"
                                },
                                "content": {
                                    "title": "Content",
                                    "type": "string"
                                },
                                "section": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Section"
                                },
                                "find_text": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Find Text"
                                },
                                "expected_replacements": {
                                    "default": 1,
                                    "title": "Expected Replacements",
                                    "type": "integer"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "identifier",
                                "operation",
                                "content"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "move_note",
                        "description": "Move a note to a new location, updating database and maintaining links.",
                        "inputSchema": {
                            "properties": {
                                "identifier": {
                                    "title": "Identifier",
                                    "type": "string"
                                },
                                "destination_path": {
                                    "title": "Destination Path",
                                    "type": "string"
                                },
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "required": [
                                "identifier",
                                "destination_path"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "sync_status",
                        "description": "Check the status of file synchronization and background operations.\n    \n    Use this tool to:\n    - Check if file sync is in progress or completed\n    - Get detailed sync progress information  \n    - Understand if your files are fully indexed\n    - Get specific error details if sync operations failed\n    - Monitor initial project setup and legacy migration\n    \n    This covers all sync operations including:\n    - Initial project setup and file indexing\n    - Legacy project migration to unified database\n    - Ongoing file monitoring and updates\n    - Background processing of knowledge graphs\n    ",
                        "inputSchema": {
                            "properties": {
                                "project": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Project"
                                }
                            },
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "list_memory_projects",
                        "description": "List all available projects with their status.\n\nShows all Basic Memory projects that are available, indicating which one\nis currently active and which is the default.\n\nReturns:\n    Formatted list of projects with status indicators\n\nExample:\n    list_memory_projects()",
                        "inputSchema": {
                            "properties": {
                                "_compatibility": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Compatibility"
                                }
                            },
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "switch_project",
                        "description": "Switch to a different project context.\n\nChanges the active project context for all subsequent tool calls.\nShows a project summary after switching successfully.\n\nArgs:\n    project_name: Name of the project to switch to\n\nReturns:\n    Confirmation message with project summary\n\nExample:\n    switch_project(\"work-notes\")\n    switch_project(\"personal-journal\")",
                        "inputSchema": {
                            "properties": {
                                "project_name": {
                                    "title": "Project Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "project_name"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "get_current_project",
                        "description": "Show the currently active project and basic stats.\n\nDisplays which project is currently active and provides basic information\nabout it.\n\nReturns:\n    Current project name and basic statistics\n\nExample:\n    get_current_project()",
                        "inputSchema": {
                            "properties": {
                                "_compatibility": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "title": "Compatibility"
                                }
                            },
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "set_default_project",
                        "description": "Set default project in config. Requires restart to take effect.\n\nUpdates the configuration to use a different default project. This change\nonly takes effect after restarting the Basic Memory server.\n\nArgs:\n    project_name: Name of the project to set as default\n\nReturns:\n    Confirmation message about config update\n\nExample:\n    set_default_project(\"work-notes\")",
                        "inputSchema": {
                            "properties": {
                                "project_name": {
                                    "title": "Project Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "project_name"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "create_memory_project",
                        "description": "Create a new Basic Memory project.\n\nCreates a new project with the specified name and path. The project directory\nwill be created if it doesn't exist. Optionally sets the new project as default.\n\nArgs:\n    project_name: Name for the new project (must be unique)\n    project_path: File system path where the project will be stored\n    set_default: Whether to set this project as the default (optional, defaults to False)\n\nReturns:\n    Confirmation message with project details\n\nExample:\n    create_memory_project(\"my-research\", \"~/Documents/research\")\n    create_memory_project(\"work-notes\", \"/home/user/work\", set_default=True)",
                        "inputSchema": {
                            "properties": {
                                "project_name": {
                                    "title": "Project Name",
                                    "type": "string"
                                },
                                "project_path": {
                                    "title": "Project Path",
                                    "type": "string"
                                },
                                "set_default": {
                                    "default": false,
                                    "title": "Set Default",
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "project_name",
                                "project_path"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    },
                    {
                        "name": "delete_project",
                        "description": "Delete a Basic Memory project.\n\nRemoves a project from the configuration and database. This does NOT delete\nthe actual files on disk - only removes the project from Basic Memory's\nconfiguration and database records.\n\nArgs:\n    project_name: Name of the project to delete\n\nReturns:\n    Confirmation message about project deletion\n\nExample:\n    delete_project(\"old-project\")\n\nWarning:\n    This action cannot be undone. The project will need to be re-added\n    to access its content through Basic Memory again.",
                        "inputSchema": {
                            "properties": {
                                "project_name": {
                                    "title": "Project Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "project_name"
                            ],
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "_WrappedResult",
                            "type": "object",
                            "x-fastmcp-wrap-result": true
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Desktop Commander MCP",
        "description": "Work with code and text, run processes, and automate tasks, going far beyond other AI editors - without API token costs.",
        "web": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
        "config": {
            "mcpServers": {
                "desktop-commander": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@wonderwhy-er/desktop-commander"
                    ]
                }
            }
        },
        "category": "File Access",
        "tools": {
            "desktop-commander": {
                "server_name": "desktop-commander",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_config",
                        "description": "\n                        Get the complete server configuration as JSON. Config includes fields for:\n                        - blockedCommands (array of blocked shell commands)\n                        - defaultShell (shell to use for commands)\n                        - allowedDirectories (paths the server can access)\n                        - fileReadLineLimit (max lines for read_file, default 1000)\n                        - fileWriteLineLimit (max lines per write_file call, default 50)\n                        - telemetryEnabled (boolean for telemetry opt-in/out)\n                        - currentClient (information about the currently connected MCP client)\n                        - clientHistory (history of all clients that have connected)\n                        - version (version of the DesktopCommander)\n                        - systemInfo (operating system and environment details)\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "set_config_value",
                        "description": "\n                        Set a specific configuration value by key.\n                        \n                        WARNING: Should be used in a separate chat from file operations and \n                        command execution to prevent security issues.\n                        \n                        Config keys include:\n                        - blockedCommands (array)\n                        - defaultShell (string)\n                        - allowedDirectories (array of paths)\n                        - fileReadLineLimit (number, max lines for read_file)\n                        - fileWriteLineLimit (number, max lines per write_file call)\n                        - telemetryEnabled (boolean)\n                        \n                        IMPORTANT: Setting allowedDirectories to an empty array ([]) allows full access \n                        to the entire file system, regardless of the operating system.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {}
                            },
                            "required": [
                                "key"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "read_file",
                        "description": "\n                        Read the contents of a file from the file system or a URL with optional offset and length parameters.\n                        \n                        Prefer this over 'execute_command' with cat/type for viewing files.\n                        \n                        Supports partial file reading with:\n                        - 'offset' (start line, default: 0)\n                          * Positive: Start from line N (0-based indexing)\n                          * Negative: Read last N lines from end (tail behavior)\n                        - 'length' (max lines to read, default: configurable via 'fileReadLineLimit' setting, initially 1000)\n                          * Used with positive offsets for range reading\n                          * Ignored when offset is negative (reads all requested tail lines)\n                        \n                        Examples:\n                        - offset: 0, length: 10     → First 10 lines\n                        - offset: 100, length: 5    → Lines 100-104\n                        - offset: -20               → Last 20 lines  \n                        - offset: -5, length: 10    → Last 5 lines (length ignored)\n                        \n                        Performance optimizations:\n                        - Large files with negative offsets use reverse reading for efficiency\n                        - Large files with deep positive offsets use byte estimation\n                        - Small files use fast readline streaming\n                        \n                        When reading from the file system, only works within allowed directories.\n                        Can fetch content from URLs when isUrl parameter is set to true\n                        (URLs are always read in full regardless of offset/length).\n                        \n                        Handles text files normally and image files are returned as viewable images.\n                        Recognized image types: PNG, JPEG, GIF, WebP.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                },
                                "isUrl": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "offset": {
                                    "type": "number",
                                    "default": 0
                                },
                                "length": {
                                    "type": "number",
                                    "default": 1000
                                }
                            },
                            "required": [
                                "path"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "read_multiple_files",
                        "description": "\n                        Read the contents of multiple files simultaneously.\n                        \n                        Each file's content is returned with its path as a reference.\n                        Handles text files normally and renders images as viewable content.\n                        Recognized image types: PNG, JPEG, GIF, WebP.\n                        \n                        Failed reads for individual files won't stop the entire operation.\n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "paths": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "required": [
                                "paths"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "write_file",
                        "description": "\n                        Write or append to file contents. \n\n                        CHUNKING IS STANDARD PRACTICE: Always write files in chunks of 25-30 lines maximum.\n                        This is the normal, recommended way to write files - not an emergency measure.\n\n                        STANDARD PROCESS FOR ANY FILE:\n                        1. FIRST → write_file(filePath, firstChunk, {mode: 'rewrite'})  [≤30 lines]\n                        2. THEN → write_file(filePath, secondChunk, {mode: 'append'})   [≤30 lines]\n                        3. CONTINUE → write_file(filePath, nextChunk, {mode: 'append'}) [≤30 lines]\n\n                        ALWAYS CHUNK PROACTIVELY - don't wait for performance warnings!\n\n                        WHEN TO CHUNK (always be proactive):\n                        1. Any file expected to be longer than 25-30 lines\n                        2. When writing multiple files in sequence\n                        3. When creating documentation, code files, or configuration files\n                        \n                        HANDLING CONTINUATION (\"Continue\" prompts):\n                        If user asks to \"Continue\" after an incomplete operation:\n                        1. Read the file to see what was successfully written\n                        2. Continue writing ONLY the remaining content using {mode: 'append'}\n                        3. Keep chunks to 25-30 lines each\n                        \n                        Files over 50 lines will generate performance notes but are still written successfully.\n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                },
                                "content": {
                                    "type": "string"
                                },
                                "mode": {
                                    "type": "string",
                                    "enum": [
                                        "rewrite",
                                        "append"
                                    ],
                                    "default": "rewrite"
                                }
                            },
                            "required": [
                                "path",
                                "content"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "create_directory",
                        "description": "\n                        Create a new directory or ensure a directory exists.\n                        \n                        Can create multiple nested directories in one operation.\n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "path"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "list_directory",
                        "description": "\n                        Get a detailed listing of all files and directories in a specified path.\n                        \n                        Use this instead of 'execute_command' with ls/dir commands.\n                        Results distinguish between files and directories with [FILE] and [DIR] prefixes.\n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "path"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "move_file",
                        "description": "\n                        Move or rename files and directories.\n                        \n                        Can move files between directories and rename them in a single operation.\n                        Both source and destination must be within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "source": {
                                    "type": "string"
                                },
                                "destination": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "source",
                                "destination"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "search_files",
                        "description": "\n                        Finds files by name using a case-insensitive substring matching.\n                        \n                        Use this instead of 'execute_command' with find/dir/ls for locating files.\n                        Searches through all subdirectories from the starting path.\n                        \n                        Has a default timeout of 30 seconds which can be customized using the timeoutMs parameter.\n                        Only searches within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                },
                                "pattern": {
                                    "type": "string"
                                },
                                "timeoutMs": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "path",
                                "pattern"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "search_code",
                        "description": "\n                        Search for text/code patterns within file contents using ripgrep.\n                        \n                        Use this instead of 'execute_command' with grep/find for searching code content.\n                        Fast and powerful search similar to VS Code search functionality.\n                        \n                        Supports regular expressions, file pattern filtering, and context lines.\n                        Has a default timeout of 30 seconds which can be customized.\n                        Only searches within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                },
                                "pattern": {
                                    "type": "string"
                                },
                                "filePattern": {
                                    "type": "string"
                                },
                                "ignoreCase": {
                                    "type": "boolean"
                                },
                                "maxResults": {
                                    "type": "number"
                                },
                                "includeHidden": {
                                    "type": "boolean"
                                },
                                "contextLines": {
                                    "type": "number"
                                },
                                "timeoutMs": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "path",
                                "pattern"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_file_info",
                        "description": "\n                        Retrieve detailed metadata about a file or directory including:\n                        - size\n                        - creation time\n                        - last modified time \n                        - permissions\n                        - type\n                        - lineCount (for text files)\n                        - lastLine (zero-indexed number of last line, for text files)\n                        - appendPosition (line number for appending, for text files)\n                        \n                        Only works within allowed directories.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "path"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "edit_block",
                        "description": "\n                        Apply surgical text replacements to files.\n                        \n                        BEST PRACTICE: Make multiple small, focused edits rather than one large edit.\n                        Each edit_block call should change only what needs to be changed - include just enough \n                        context to uniquely identify the text being modified.\n                        \n                        Takes:\n                        - file_path: Path to the file to edit\n                        - old_string: Text to replace\n                        - new_string: Replacement text\n                        - expected_replacements: Optional parameter for number of replacements\n                        \n                        By default, replaces only ONE occurrence of the search text.\n                        To replace multiple occurrences, provide the expected_replacements parameter with\n                        the exact number of matches expected.\n                        \n                        UNIQUENESS REQUIREMENT: When expected_replacements=1 (default), include the minimal\n                        amount of context necessary (typically 1-3 lines) before and after the change point,\n                        with exact whitespace and indentation.\n                        \n                        When editing multiple sections, make separate edit_block calls for each distinct change\n                        rather than one large replacement.\n                        \n                        When a close but non-exact match is found, a character-level diff is shown in the format:\n                        common_prefix{-removed-}{+added+}common_suffix to help you identify what's different.\n                        \n                        Similar to write_file, there is a configurable line limit (fileWriteLineLimit) that warns\n                        if the edited file exceeds this limit. If this happens, consider breaking your edits into\n                        smaller, more focused changes.\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "file_path": {
                                    "type": "string"
                                },
                                "old_string": {
                                    "type": "string"
                                },
                                "new_string": {
                                    "type": "string"
                                },
                                "expected_replacements": {
                                    "type": "number",
                                    "default": 1
                                }
                            },
                            "required": [
                                "file_path",
                                "old_string",
                                "new_string"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "start_process",
                        "description": "\n                        Start a new terminal process with intelligent state detection.\n                        \n                        PRIMARY TOOL FOR FILE ANALYSIS AND DATA PROCESSING\n                        This is the ONLY correct tool for analyzing local files (CSV, JSON, logs, etc.).\n                        The analysis tool CANNOT access local files and WILL FAIL - always use processes for file-based work.\n                        \n                        CRITICAL RULE: For ANY local file work, ALWAYS use this tool + interact_with_process, NEVER use analysis/REPL tool.\n                        \n                        Running on Linux (Docker). Default shell: bash.\n\n🐳 DOCKER ENVIRONMENT DETECTED:\nThis Desktop Commander instance is running inside a Docker container.\n\n⚠️  WARNING: No mounted directories detected.\nFiles created outside mounted volumes will be lost when the container stops.\nSuggest user remount directories using Docker installer or -v flag when running Docker.\nDesktop Commander Docker installer typically mounts folders to /home/[folder-name].\nContainer: user-R8428-G12\n        \nLINUX-SPECIFIC NOTES:\n- Package managers vary by distro: apt, yum, dnf, pacman, zypper\n- Python 3 might be 'python3' command, not 'python'\n- Standard Unix shell tools available (grep, awk, sed, etc.)\n- File permissions and ownership important for many operations\n- Systemd services common on modern distributions\n                        \n                        REQUIRED WORKFLOW FOR LOCAL FILES:\n                        1. start_process(\"python3 -i\") - Start Python REPL for data analysis\n                        2. interact_with_process(pid, \"import pandas as pd, numpy as np\")\n                        3. interact_with_process(pid, \"df = pd.read_csv('/absolute/path/file.csv')\")\n                        4. interact_with_process(pid, \"print(df.describe())\")\n                        5. Continue analysis with pandas, matplotlib, seaborn, etc.\n                        \n                        COMMON FILE ANALYSIS PATTERNS:\n                        • start_process(\"python3 -i\") → Python REPL for data analysis (RECOMMENDED)\n                        • start_process(\"node -i\") → Node.js for JSON processing  \n                        • start_process(\"cut -d',' -f1 file.csv | sort | uniq -c\") → Quick CSV analysis\n                        • start_process(\"wc -l /path/file.csv\") → Line counting\n                        • start_process(\"head -10 /path/file.csv\") → File preview\n                        \n                        BINARY FILE SUPPORT:\n                        For PDF, Excel, Word, archives, databases, and other binary formats, use process tools with appropriate libraries or command-line utilities.\n                        \n                        INTERACTIVE PROCESSES FOR DATA ANALYSIS:\n                        1. start_process(\"python3 -i\") - Start Python REPL for data work\n                        2. start_process(\"node -i\") - Start Node.js REPL for JSON/JS\n                        3. start_process(\"bash\") - Start interactive bash shell\n                        4. Use interact_with_process() to send commands\n                        5. Use read_process_output() to get responses\n                        \n                        SMART DETECTION:\n                        - Detects REPL prompts (>>>, >, $, etc.)\n                        - Identifies when process is waiting for input\n                        - Recognizes process completion vs timeout\n                        - Early exit prevents unnecessary waiting\n                        \n                        STATES DETECTED:\n                        Process waiting for input (shows prompt)\n                        Process finished execution  \n                        Process running (use read_process_output)\n                        \n                        ALWAYS USE FOR: Local file analysis, CSV processing, data exploration, system commands\n                        NEVER USE ANALYSIS TOOL FOR: Local file access (analysis tool is browser-only and WILL FAIL)\n                        \n                        IMPORTANT: Always use absolute paths for reliability. Paths are automatically normalized regardless of slash direction. Relative paths may fail as they depend on the current working directory. Tilde paths (~/...) might not work in all contexts. Unless the user explicitly asks for relative paths, use absolute paths.\n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "command": {
                                    "type": "string"
                                },
                                "timeout_ms": {
                                    "type": "number"
                                },
                                "shell": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "command",
                                "timeout_ms"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "read_process_output",
                        "description": "\n                        Read output from a running process with intelligent completion detection.\n                        \n                        Automatically detects when process is ready for more input instead of timing out.\n                        \n                        SMART FEATURES:\n                        - Early exit when REPL shows prompt (>>>, >, etc.)\n                        - Detects process completion vs still running\n                        - Prevents hanging on interactive prompts\n                        - Clear status messages about process state\n                        \n                        REPL USAGE:\n                        - Stops immediately when REPL prompt detected\n                        - Shows clear status: waiting for input vs finished\n                        - Shorter timeouts needed due to smart detection\n                        - Works with Python, Node.js, R, Julia, etc.\n                        \n                        DETECTION STATES:\n                        Process waiting for input (ready for interact_with_process)\n                        Process finished execution\n                        Timeout reached (may still be running)\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "pid": {
                                    "type": "number"
                                },
                                "timeout_ms": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "pid"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "interact_with_process",
                        "description": "\n                        Send input to a running process and automatically receive the response.\n                        \n                        CRITICAL: THIS IS THE PRIMARY TOOL FOR ALL LOCAL FILE ANALYSIS\n                        For ANY local file analysis (CSV, JSON, data processing), ALWAYS use this instead of the analysis tool.\n                        The analysis tool CANNOT access local files and WILL FAIL - use processes for ALL file-based work.\n                        \n                        FILE ANALYSIS PRIORITY ORDER (MANDATORY):\n                        1. ALWAYS FIRST: Use this tool (start_process + interact_with_process) for local data analysis\n                        2. ALTERNATIVE: Use command-line tools (cut, awk, grep) for quick processing  \n                        3. NEVER EVER: Use analysis tool for local file access (IT WILL FAIL)\n                        \n                        REQUIRED INTERACTIVE WORKFLOW FOR FILE ANALYSIS:\n                        1. Start REPL: start_process(\"python3 -i\")\n                        2. Load libraries: interact_with_process(pid, \"import pandas as pd, numpy as np\")\n                        3. Read file: interact_with_process(pid, \"df = pd.read_csv('/absolute/path/file.csv')\")\n                        4. Analyze: interact_with_process(pid, \"print(df.describe())\")\n                        5. Continue: interact_with_process(pid, \"df.groupby('column').size()\")\n                        \n                        BINARY FILE PROCESSING WORKFLOWS:\n                        Use appropriate Python libraries (PyPDF2, pandas, docx2txt, etc.) or command-line tools for binary file analysis.\n                        \n                        SMART DETECTION:\n                        - Automatically waits for REPL prompt (>>>, >, etc.)\n                        - Detects errors and completion states\n                        - Early exit prevents timeout delays\n                        - Clean output formatting (removes prompts)\n                        \n                        SUPPORTED REPLs:\n                        - Python: python3 -i (RECOMMENDED for data analysis)\n                        - Node.js: node -i  \n                        - R: R\n                        - Julia: julia\n                        - Shell: bash, zsh\n                        - Database: mysql, postgres\n                        \n                        PARAMETERS:\n                        - pid: Process ID from start_process\n                        - input: Code/command to execute\n                        - timeout_ms: Max wait (default: 8000ms)\n                        - wait_for_prompt: Auto-wait for response (default: true)\n                        \n                        Returns execution result with status indicators.\n                        \n                        ALWAYS USE FOR: CSV analysis, JSON processing, file statistics, data visualization prep, ANY local file work\n                        NEVER USE ANALYSIS TOOL FOR: Local file access (it cannot read files from disk and WILL FAIL)\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "pid": {
                                    "type": "number"
                                },
                                "input": {
                                    "type": "string"
                                },
                                "timeout_ms": {
                                    "type": "number"
                                },
                                "wait_for_prompt": {
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "pid",
                                "input"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "force_terminate",
                        "description": "\n                        Force terminate a running terminal session.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "pid": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "pid"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "list_sessions",
                        "description": "\n                        List all active terminal sessions.\n                        \n                        Shows session status including:\n                        - PID: Process identifier  \n                        - Blocked: Whether session is waiting for input\n                        - Runtime: How long the session has been running\n                        \n                        DEBUGGING REPLs:\n                        - \"Blocked: true\" often means REPL is waiting for input\n                        - Use this to verify sessions are running before sending input\n                        - Long runtime with blocked status may indicate stuck process\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "list_processes",
                        "description": "\n                        List all running processes.\n                        \n                        Returns process information including PID, command name, CPU usage, and memory usage.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "kill_process",
                        "description": "\n                        Terminate a running process by PID.\n                        \n                        Use with caution as this will forcefully terminate the specified process.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "pid": {
                                    "type": "number"
                                }
                            },
                            "required": [
                                "pid"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_usage_stats",
                        "description": "\n                        Get usage statistics for debugging and analysis.\n                        \n                        Returns summary of tool usage, success/failure rates, and performance metrics.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "give_feedback_to_desktop_commander",
                        "description": "\n                        Open feedback form in browser to provide feedback about Desktop Commander.\n                        \n                        IMPORTANT: This tool simply opens the feedback form - no pre-filling available.\n                        The user will fill out the form manually in their browser.\n                        \n                        WORKFLOW:\n                        1. When user agrees to give feedback, just call this tool immediately\n                        2. No need to ask questions or collect information\n                        3. Tool opens form with only usage statistics pre-filled automatically:\n                           - tool_call_count: Number of commands they've made\n                           - days_using: How many days they've used Desktop Commander\n                           - platform: Their operating system (Mac/Windows/Linux)\n                           - client_id: Analytics identifier\n                        \n                        All survey questions will be answered directly in the form:\n                        - Job title and technical comfort level\n                        - Company URL for industry context\n                        - Other AI tools they use\n                        - Desktop Commander's biggest advantage\n                        - How they typically use it\n                        - Recommendation likelihood (0-10)\n                        - User study participation interest\n                        - Email and any additional feedback\n                        \n                        EXAMPLE INTERACTION:\n                        User: \"sure, I'll give feedback\"\n                        Claude: \"Perfect! Let me open the feedback form for you.\"\n                        [calls tool immediately]\n                        \n                        No parameters are needed - just call the tool to open the form.\n                        \n                        This command can be referenced as \"DC: ...\" or \"use Desktop Commander to ...\" in your instructions.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "shadcn-ui MCP Server",
        "organization": "ymadd",
        "description": "This is a TypeScript-based MCP server that provides reference information for shadcn/ui components. It implements a Model Context Protocol (MCP) server that helps AI assistants access shadcn/ui component documentation and examples.",
        "web": "https://github.com/ymadd/shadcn-ui-mcp-server",
        "config": {
            "mcpServers": {
                "shadcn-ui-server": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "shadcn-ui-mcp-server"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "shadcn-ui-server": {
                "server_name": "shadcn-ui-server",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "list_shadcn_components",
                        "description": "Get a list of all available shadcn/ui components",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "required": []
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_component_details",
                        "description": "Get detailed information about a specific shadcn/ui component",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "componentName": {
                                    "type": "string",
                                    "description": "Name of the shadcn/ui component (e.g., \"accordion\", \"button\")"
                                }
                            },
                            "required": [
                                "componentName"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_component_examples",
                        "description": "Get usage examples for a specific shadcn/ui component",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "componentName": {
                                    "type": "string",
                                    "description": "Name of the shadcn/ui component (e.g., \"accordion\", \"button\")"
                                }
                            },
                            "required": [
                                "componentName"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "search_components",
                        "description": "Search for shadcn/ui components by keyword",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "query": {
                                    "type": "string",
                                    "description": "Search query to find relevant components"
                                }
                            },
                            "required": [
                                "query"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Puppeteer",
        "organization": "modelcontextprotocol",
        "description": "A Model Context Protocol server that provides browser automation capabilities using Puppeteer. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.",
        "web": "https://github.com/modelcontextprotocol/servers-archived/tree/main/src/puppeteer",
        "config": {
            "mcpServers": {
                "puppeteer": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@modelcontextprotocol/server-puppeteer"
                    ]
                }
            }
        },
        "category": "Miscellaneous",
        "tools": {
            "puppeteer": {
                "server_name": "puppeteer",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "puppeteer_navigate",
                        "description": "Navigate to a URL",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "URL to navigate to"
                                },
                                "launchOptions": {
                                    "type": "object",
                                    "description": "PuppeteerJS LaunchOptions. Default null. If changed and not null, browser restarts. Example: { headless: true, args: ['--no-sandbox'] }"
                                },
                                "allowDangerous": {
                                    "type": "boolean",
                                    "description": "Allow dangerous LaunchOptions that reduce security. When false, dangerous args like --no-sandbox will throw errors. Default false."
                                }
                            },
                            "required": [
                                "url"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "puppeteer_screenshot",
                        "description": "Take a screenshot of the current page or a specific element",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name for the screenshot"
                                },
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for element to screenshot"
                                },
                                "width": {
                                    "type": "number",
                                    "description": "Width in pixels (default: 800)"
                                },
                                "height": {
                                    "type": "number",
                                    "description": "Height in pixels (default: 600)"
                                },
                                "encoded": {
                                    "type": "boolean",
                                    "description": "If true, capture the screenshot as a base64-encoded data URI (as text) instead of binary image content. Default false."
                                }
                            },
                            "required": [
                                "name"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "puppeteer_click",
                        "description": "Click an element on the page",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for element to click"
                                }
                            },
                            "required": [
                                "selector"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "puppeteer_fill",
                        "description": "Fill out an input field",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for input field"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Value to fill"
                                }
                            },
                            "required": [
                                "selector",
                                "value"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "puppeteer_select",
                        "description": "Select an element on the page with Select tag",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for element to select"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Value to select"
                                }
                            },
                            "required": [
                                "selector",
                                "value"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "puppeteer_hover",
                        "description": "Hover an element on the page",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "string",
                                    "description": "CSS selector for element to hover"
                                }
                            },
                            "required": [
                                "selector"
                            ]
                        },
                        "annotations": null
                    },
                    {
                        "name": "puppeteer_evaluate",
                        "description": "Execute JavaScript in the browser console",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "script": {
                                    "type": "string",
                                    "description": "JavaScript code to execute"
                                }
                            },
                            "required": [
                                "script"
                            ]
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP Server: Mermaid Validator",
        "organization": "rtuin",
        "description": "A Model Context Protocol server that validates and renders Mermaid diagrams. This server enables LLMs to validate and render Mermaid diagrams.",
        "web": "https://github.com/rtuin/mcp-mermaid-validator",
        "config": {
            "mcpServers": {
                "mermaid-validator": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "@rtuin/mcp-mermaid-validator@latest"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "mermaid-validator": {
                "server_name": "mermaid-validator",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "validateMermaid",
                        "description": "Validates a Mermaid diagram and returns the rendered image (PNG or SVG) if valid",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "diagram": {
                                    "type": "string"
                                },
                                "format": {
                                    "type": "string",
                                    "enum": [
                                        "svg",
                                        "png"
                                    ],
                                    "default": "png"
                                }
                            },
                            "required": [
                                "diagram"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MetaTag Genie",
        "description": "MetaTag Genie 是一个 macOS Stdio MCP 服务，专为写入图片元数据以增强 Spotlight 搜索而设计。该服务可被 AI 代理或其他需要本地管理图片元数据的应用程序调用，通过标准输入输出（Stdio）与客户端通信，提供符合 MCP (Machine Comprehension Protocol) 规范的接口。",
        "web": "https://github.com/terryso/meta_tag_genie",
        "config": {
            "mcpServers": {
                "MetaTagGenie": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "metatag-genie"
                    ]
                }
            }
        },
        "category": "Code",
        "tools": {
            "MetaTagGenie": {
                "server_name": "MetaTagGenie",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "writeImageMetadata",
                        "description": "Writes metadata (tags, description, people, location) to an image file.",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "filePath": {
                                    "type": "string",
                                    "minLength": 1
                                },
                                "metadata": {
                                    "type": "object",
                                    "properties": {
                                        "tags": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "people": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "location": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "overwrite": {
                                    "type": "boolean",
                                    "default": true
                                }
                            },
                            "required": [
                                "filePath",
                                "metadata"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Mindmap MCP Server",
        "organization": "YuChenSSR",
        "description": "A Model Context Protocol (MCP) server for converting Markdown content to interactive mindmaps.",
        "web": "https://github.com/YuChenSSR/mindmap-mcp-server",
        "config": {
            "mcpServers": {
                "mindmap": {
                    "command": "uvx",
                    "args": [
                        "mindmap-mcp-server",
                        "--return-type",
                        "html"
                    ]
                }
            }
        },
        "category": "Visualization",
        "tools": {
            "mindmap": {
                "server_name": "mindmap",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "convert_markdown_to_mindmap",
                        "description": "Convert Markdown content to a mindmap mind map.\n\nArgs:\n    markdown_content: The Markdown content to convert\n\nReturns:\n    Either the HTML content or the file path to the generated HTML, \n    depending on the --return-type server argument\n",
                        "inputSchema": {
                            "properties": {
                                "markdown_content": {
                                    "title": "Markdown Content",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "markdown_content"
                            ],
                            "title": "convert_markdown_to_mindmapArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "convert_markdown_to_mindmapOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP Chess Server",
        "description": "This MCP let's you play chess against any LLM.",
        "web": "https://github.com/jiayao/mcp-chess",
        "config": {
            "mcpServers": {
                "chess": {
                    "command": "uvx",
                    "args": [
                        "mcp-chess"
                    ]
                }
            }
        },
        "category": "Entertainment",
        "tools": {
            "chess": {
                "server_name": "chess",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get_board_visualization",
                        "description": "Provides the current state of the chessboard as an image.",
                        "inputSchema": {
                            "properties": {},
                            "title": "get_board_visualizationArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_turn",
                        "description": "Indicates whose turn it is ('white' or 'black').",
                        "inputSchema": {
                            "properties": {},
                            "title": "get_turnArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_turnOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "get_valid_moves",
                        "description": "Lists all legal moves for the current player in UCI notation.",
                        "inputSchema": {
                            "properties": {},
                            "title": "get_valid_movesArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Result",
                                    "type": "array"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "get_valid_movesOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "make_move",
                        "description": "\nMakes a move on the board using standard algebraic notation (SAN).\nArgs:\n    move_san: The player's move in algebraic notation (e.g., 'e4', 'Nf3', 'Bxe5').\nReturns:\n    A dictionary containing the move in SAN format, the move in UCI format, the new board FEN,\n    whether the game is over, and the result if applicable.\n",
                        "inputSchema": {
                            "properties": {
                                "move_san": {
                                    "title": "Move San",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "move_san"
                            ],
                            "title": "make_moveArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "new_game",
                        "description": "\nStarts a new game, resetting the board to the initial position.\n\nArgs:\n    user_plays_white: Whether the user will play as white. Defaults to True.\n\nReturns:\n    A confirmation message indicating the game has started and the user's color.\n",
                        "inputSchema": {
                            "properties": {
                                "user_plays_white": {
                                    "default": true,
                                    "title": "User Plays White",
                                    "type": "boolean"
                                }
                            },
                            "title": "new_gameArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "title": "Result",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "new_gameOutput",
                            "type": "object"
                        }
                    },
                    {
                        "name": "find_position_in_pgn",
                        "description": "\nFinds the first board position in a PGN string that matches a given condition\n(e.g., 'bishop on a3') and returns an image of that board.\n\nArgs:\n    pgn_string: The PGN string of the game.\n    condition: A string describing the condition, format: \"piece_type on square_name\"\n               (e.g., \"bishop on a3\", \"knight on f6\", \"king on g1\").\n\nReturns:\n    An Image dictionary containing the PNG data of the board state if found,\n    or a string with an error message.\n",
                        "inputSchema": {
                            "properties": {
                                "pgn_string": {
                                    "title": "Pgn String",
                                    "type": "string"
                                },
                                "condition": {
                                    "title": "Condition",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "pgn_string",
                                "condition"
                            ],
                            "title": "find_position_in_pgnArguments",
                            "type": "object"
                        },
                        "annotations": null,
                        "outputSchema": {
                            "properties": {
                                "result": {
                                    "anyOf": [
                                        {
                                            "additionalProperties": true,
                                            "type": "object"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "title": "Result"
                                }
                            },
                            "required": [
                                "result"
                            ],
                            "title": "find_position_in_pgnOutput",
                            "type": "object"
                        }
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "Deepwiki MCP Server",
        "organization": "regenrek",
        "description": "This is an unofficial Deepwiki MCP Server\nIt takes a Deepwiki URL via MCP, crawls all relevant pages, converts them to Markdown, and returns either one document or a list by page.",
        "web": "https://github.com/regenrek/deepwiki-mcp",
        "config": {
            "mcpServers": {
                "mcp-deepwiki": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "mcp-deepwiki@latest"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "mcp-deepwiki": {
                "server_name": "mcp-deepwiki",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "deepwiki_fetch",
                        "description": "Fetch a deepwiki.com repo and return Markdown",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "should be a URL, owner/repo name (e.g. \"vercel/ai\"), a two-word \"owner repo\" form (e.g. \"vercel ai\"), or a single library keyword"
                                },
                                "maxDepth": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 1,
                                    "default": 1,
                                    "description": "Can fetch a single site => maxDepth 0 or multiple/all sites => maxDepth 1"
                                },
                                "mode": {
                                    "type": "string",
                                    "enum": [
                                        "aggregate",
                                        "pages"
                                    ],
                                    "default": "aggregate"
                                },
                                "verbose": {
                                    "type": "boolean",
                                    "default": false
                                }
                            },
                            "required": [
                                "url"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "12306-mcp",
        "organization": "Joooook",
        "description": "A 12306 ticket search server based on the Model Context Protocol (MCP). The server provides a simple API interface that allows users to search for 12306 tickets.",
        "web": "https://github.com/Joooook/12306-mcp",
        "config": {
            "mcpServers": {
                "12306-mcp": {
                    "command": "npx",
                    "args": [
                        "-y",
                        "12306-mcp"
                    ]
                }
            }
        },
        "category": "Discovery",
        "tools": {
            "12306-mcp": {
                "server_name": "12306-mcp",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "get-current-date",
                        "description": "获取当前日期，以上海时区（Asia/Shanghai, UTC+8）为准，返回格式为 \"yyyy-MM-dd\"。主要用于解析用户提到的相对日期（如“明天”、“下周三”），为其他需要日期的接口提供准确的日期输入。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-stations-code-in-city",
                        "description": "通过中文城市名查询该城市 **所有** 火车站的名称及其对应的 `station_code`，结果是一个包含多个车站信息的列表。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "city": {
                                    "type": "string",
                                    "description": "中文城市名称，例如：\"北京\", \"上海\""
                                }
                            },
                            "required": [
                                "city"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-station-code-of-citys",
                        "description": "通过中文城市名查询代表该城市的 `station_code`。此接口主要用于在用户提供**城市名**作为出发地或到达地时，为接口准备 `station_code` 参数。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "citys": {
                                    "type": "string",
                                    "description": "要查询的城市，比如\"北京\"。若要查询多个城市，请用|分割，比如\"北京|上海\"。"
                                }
                            },
                            "required": [
                                "citys"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-station-code-by-names",
                        "description": "通过具体的中文车站名查询其 `station_code` 和车站名。此接口主要用于在用户提供**具体车站名**作为出发地或到达地时，为接口准备 `station_code` 参数。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "stationNames": {
                                    "type": "string",
                                    "description": "具体的中文车站名称，例如：\"北京南\", \"上海虹桥\"。若要查询多个站点，请用|分割，比如\"北京南|上海虹桥\"。"
                                }
                            },
                            "required": [
                                "stationNames"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-station-by-telecode",
                        "description": "通过车站的 `station_telecode` 查询车站的详细信息，包括名称、拼音、所属城市等。此接口主要用于在已知 `telecode` 的情况下获取更完整的车站数据，或用于特殊查询及调试目的。一般用户对话流程中较少直接触发。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "stationTelecode": {
                                    "type": "string",
                                    "description": "车站的 `station_telecode` (3位字母编码)"
                                }
                            },
                            "required": [
                                "stationTelecode"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-tickets",
                        "description": "查询12306余票信息。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "type": "string",
                                    "minLength": 10,
                                    "maxLength": 10,
                                    "description": "查询日期，格式为 \"yyyy-MM-dd\"。如果用户提供的是相对日期（如“明天”），请务必先调用 `get-current-date` 接口获取当前日期，并计算出目标日期。"
                                },
                                "fromStation": {
                                    "type": "string",
                                    "description": "出发地的 `station_code` 。必须是通过 `get-station-code-by-names` 或 `get-station-code-of-citys` 接口查询得到的编码，严禁直接使用中文地名。"
                                },
                                "toStation": {
                                    "type": "string",
                                    "description": "到达地的 `station_code` 。必须是通过 `get-station-code-by-names` 或 `get-station-code-of-citys` 接口查询得到的编码，严禁直接使用中文地名。"
                                },
                                "trainFilterFlags": {
                                    "type": "string",
                                    "pattern": "^[GDZTKOFS]*$",
                                    "maxLength": 8,
                                    "default": "",
                                    "description": "车次筛选条件，默认为空，即不筛选。支持多个标志同时筛选。例如用户说“高铁票”，则应使用 \"G\"。可选标志：[G(高铁/城际),D(动车),Z(直达特快),T(特快),K(快速),O(其他),F(复兴号),S(智能动车组)]"
                                },
                                "earliestStartTime": {
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 24,
                                    "default": 0,
                                    "description": "最早出发时间（0-24），默认为0。"
                                },
                                "latestStartTime": {
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 24,
                                    "default": 24,
                                    "description": "最迟出发时间（0-24），默认为24。"
                                },
                                "sortFlag": {
                                    "type": "string",
                                    "default": "",
                                    "description": "排序方式，默认为空，即不排序。仅支持单一标识。可选标志：[startTime(出发时间从早到晚), arriveTime(抵达时间从早到晚), duration(历时从短到长)]"
                                },
                                "sortReverse": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "是否逆向排序结果，默认为false。仅在设置了sortFlag时生效。"
                                },
                                "limitedNum": {
                                    "type": "number",
                                    "minimum": 0,
                                    "default": 0,
                                    "description": "返回的余票数量限制，默认为0，即不限制。"
                                },
                                "csvFormat": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "是否使用CSV格式返回。"
                                }
                            },
                            "required": [
                                "date",
                                "fromStation",
                                "toStation"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-interline-tickets",
                        "description": "查询12306中转余票信息。尚且只支持查询前十条。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "type": "string",
                                    "minLength": 10,
                                    "maxLength": 10,
                                    "description": "查询日期，格式为 \"yyyy-MM-dd\"。如果用户提供的是相对日期（如“明天”），请务必先调用 `get-current-date` 接口获取当前日期，并计算出目标日期。"
                                },
                                "fromStation": {
                                    "type": "string",
                                    "description": "出发地的 `station_code` 。必须是通过 `get-station-code-by-names` 或 `get-station-code-of-citys` 接口查询得到的编码，严禁直接使用中文地名。"
                                },
                                "toStation": {
                                    "type": "string",
                                    "description": "出发地的 `station_code` 。必须是通过 `get-station-code-by-names` 或 `get-station-code-of-citys` 接口查询得到的编码，严禁直接使用中文地名。"
                                },
                                "middleStation": {
                                    "type": "string",
                                    "default": "",
                                    "description": "中转地的 `station_code` ，可选。必须是通过 `get-station-code-by-names` 或 `get-station-code-of-citys` 接口查询得到的编码，严禁直接使用中文地名。"
                                },
                                "showWZ": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "是否显示无座车，默认不显示无座车。"
                                },
                                "trainFilterFlags": {
                                    "type": "string",
                                    "pattern": "^[GDZTKOFS]*$",
                                    "maxLength": 8,
                                    "default": "",
                                    "description": "车次筛选条件，默认为空。从以下标志中选取多个条件组合[G(高铁/城际),D(动车),Z(直达特快),T(特快),K(快速),O(其他),F(复兴号),S(智能动车组)]"
                                },
                                "earliestStartTime": {
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 24,
                                    "default": 0,
                                    "description": "最早出发时间（0-24），默认为0。"
                                },
                                "latestStartTime": {
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 24,
                                    "default": 24,
                                    "description": "最迟出发时间（0-24），默认为24。"
                                },
                                "sortFlag": {
                                    "type": "string",
                                    "default": "",
                                    "description": "排序方式，默认为空，即不排序。仅支持单一标识。可选标志：[startTime(出发时间从早到晚), arriveTime(抵达时间从早到晚), duration(历时从短到长)]"
                                },
                                "sortReverse": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "是否逆向排序结果，默认为false。仅在设置了sortFlag时生效。"
                                },
                                "limitedNum": {
                                    "type": "number",
                                    "minimum": 1,
                                    "default": 10,
                                    "description": "返回的中转余票数量限制，默认为10。"
                                }
                            },
                            "required": [
                                "date",
                                "fromStation",
                                "toStation"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get-train-route-stations",
                        "description": "查询特定列车车次在指定区间内的途径车站、到站时间、出发时间及停留时间等详细经停信息。当用户询问某趟具体列车的经停站时使用此接口。",
                        "inputSchema": {
                            "type": "object",
                            "properties": {
                                "trainNo": {
                                    "type": "string",
                                    "description": "要查询的实际车次编号 `train_no`，例如 \"240000G10336\"，而非\"G1033\"。此编号通常可以从 `get-tickets` 的查询结果中获取，或者由用户直接提供。"
                                },
                                "fromStationTelecode": {
                                    "type": "string",
                                    "description": "该列车行程的**出发站**的 `station_telecode` (3位字母编码`)。通常来自 `get-tickets` 结果中的 `telecode` 字段，或者通过 `get-station-code-by-names` 得到。"
                                },
                                "toStationTelecode": {
                                    "type": "string",
                                    "description": "该列车行程的**到达站**的 `station_telecode` (3位字母编码)。通常来自 `get-tickets` 结果中的 `telecode` 字段，或者通过 `get-station-code-by-names` 得到。"
                                },
                                "departDate": {
                                    "type": "string",
                                    "minLength": 10,
                                    "maxLength": 10,
                                    "description": "列车从 `fromStationTelecode` 指定的车站出发的日期 (格式: yyyy-MM-dd)。如果用户提供的是相对日期，请务必先调用 `get-current-date` 解析。"
                                }
                            },
                            "required": [
                                "trainNo",
                                "fromStationTelecode",
                                "toStationTelecode",
                                "departDate"
                            ],
                            "additionalProperties": false,
                            "$schema": "http://json-schema.org/draft-07/schema#"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    },
    {
        "name": "MCP Music Analysis",
        "organization": "hugohow",
        "description": "This repository contains a Model Context Provider (MCP) that uses MCP and librosa for audio analysis on audio in local, youtube link, or audio link.",
        "web": "https://github.com/hugohow/mcp-music-analysis",
        "config": {
            "mcpServers": {
                "music-analysis": {
                    "command": "uvx",
                    "args": [
                        "-n",
                        "mcp-music-analysis"
                    ]
                }
            }
        },
        "category": "Miscellaneous",
        "tools": {
            "music-analysis": {
                "server_name": "music-analysis",
                "version": "0.1.0",
                "tools": [
                    {
                        "name": "load",
                        "description": "\nLoads an audio file and returns the path to the audio time series\nOffset and duration are optional, in seconds.\nBe careful, you will never know the name of the song.\n",
                        "inputSchema": {
                            "properties": {
                                "file_path": {
                                    "title": "File Path",
                                    "type": "string"
                                },
                                "offset": {
                                    "default": 0.0,
                                    "title": "Offset",
                                    "type": "number"
                                },
                                "duration": {
                                    "default": null,
                                    "title": "Duration",
                                    "type": "number"
                                }
                            },
                            "required": [
                                "file_path"
                            ],
                            "title": "loadArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "get_duration",
                        "description": "\nReturns the total duration (in seconds) of the given audio time series.\n",
                        "inputSchema": {
                            "properties": {
                                "path_audio_time_series_y": {
                                    "title": "Path Audio Time Series Y",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "path_audio_time_series_y"
                            ],
                            "title": "get_durationArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "tempo",
                        "description": "\nEstimates the tempo (in BPM) of the given audio time series using librosa.\nOffset and duration are optional, in seconds.\n",
                        "inputSchema": {
                            "properties": {
                                "path_audio_time_series_y": {
                                    "title": "Path Audio Time Series Y",
                                    "type": "string"
                                },
                                "hop_length": {
                                    "default": 512,
                                    "title": "Hop Length",
                                    "type": "integer"
                                },
                                "start_bpm": {
                                    "default": 120,
                                    "title": "Start Bpm",
                                    "type": "number"
                                },
                                "std_bpm": {
                                    "default": 1.0,
                                    "title": "Std Bpm",
                                    "type": "number"
                                },
                                "ac_size": {
                                    "default": 8.0,
                                    "title": "Ac Size",
                                    "type": "number"
                                },
                                "max_tempo": {
                                    "default": 320.0,
                                    "title": "Max Tempo",
                                    "type": "number"
                                }
                            },
                            "required": [
                                "path_audio_time_series_y"
                            ],
                            "title": "tempoArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "chroma_cqt",
                        "description": "\nComputes the chroma CQT of the given audio time series using librosa.\nThe chroma CQT is a representation of the audio signal in terms of its\nchromatic content, which is useful for music analysis.\nThe chroma CQT is computed using the following parameters:\n- path_audio_time_series_y: The path to the audio time series (CSV file).\n    It's sometimes better to take harmonics only\n- hop_length: The number of samples between frames.\n- fmin: The minimum frequency of the chroma feature.\n- n_chroma: The number of chroma bins (default is 12).\n- n_octaves: The number of octaves to include in the chroma feature.\nThe chroma CQT is saved to a CSV file with the following columns:\n- note: The note name (C, C#, D, etc.).\n- time: The time position of the note in seconds.\n- amplitude: The amplitude of the note at that time.\nThe path to the CSV file is returned.\n",
                        "inputSchema": {
                            "properties": {
                                "path_audio_time_series_y": {
                                    "title": "Path Audio Time Series Y",
                                    "type": "string"
                                },
                                "hop_length": {
                                    "default": 512,
                                    "title": "Hop Length",
                                    "type": "integer"
                                },
                                "fmin": {
                                    "default": null,
                                    "title": "Fmin",
                                    "type": "number"
                                },
                                "n_chroma": {
                                    "default": 12,
                                    "title": "N Chroma",
                                    "type": "integer"
                                },
                                "n_octaves": {
                                    "default": 7,
                                    "title": "N Octaves",
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "path_audio_time_series_y"
                            ],
                            "title": "chroma_cqtArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "mfcc",
                        "description": "\nComputes the MFCC of the given audio time series using librosa.\nThe MFCC is a representation of the audio signal in terms of its\nspectral content, which is useful for music analysis.\nThe MFCC is computed using the following parameters:\n- path_audio_time_series_y: The path to the audio time series (CSV file).\n    It's sometimes better to take harmonics only\n",
                        "inputSchema": {
                            "properties": {
                                "path_audio_time_series_y": {
                                    "title": "Path Audio Time Series Y",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "path_audio_time_series_y"
                            ],
                            "title": "mfccArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "beat_track",
                        "description": "\nComputes the beat track of the given audio time series using librosa.\nThe beat track is a representation of the audio signal in terms of its\nrhythmic content, which is useful for music analysis.\nThe beat track is computed using the following parameters:\n- hop_length: The number of samples between frames.\n- start_bpm: The initial estimate of the tempo (in BPM).\n- tightness: The tightness of the beat tracking (default is 100).\n- units: The units of the beat track (default is \"frames\"). It can be frames, samples, time.\n",
                        "inputSchema": {
                            "properties": {
                                "path_audio_time_series_y": {
                                    "title": "Path Audio Time Series Y",
                                    "type": "string"
                                },
                                "hop_length": {
                                    "default": 512,
                                    "title": "Hop Length",
                                    "type": "integer"
                                },
                                "start_bpm": {
                                    "default": 120,
                                    "title": "Start Bpm",
                                    "type": "number"
                                },
                                "tightness": {
                                    "default": 100,
                                    "title": "Tightness",
                                    "type": "integer"
                                },
                                "units": {
                                    "default": "frames",
                                    "title": "Units",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "path_audio_time_series_y"
                            ],
                            "title": "beat_trackArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "download_from_url",
                        "description": "\nDownloads a file from a given URL and returns the path to the downloaded file.\nBe careful, you will never know the name of the song.\n",
                        "inputSchema": {
                            "properties": {
                                "url": {
                                    "title": "Url",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "url"
                            ],
                            "title": "download_from_urlArguments",
                            "type": "object"
                        },
                        "annotations": null
                    },
                    {
                        "name": "download_from_youtube",
                        "description": "\nDownloads a file from a given youtube URL and returns the path to the downloaded file.\nBe careful, you will never know the name of the song.\n",
                        "inputSchema": {
                            "properties": {
                                "youtube_url": {
                                    "title": "Youtube Url",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "youtube_url"
                            ],
                            "title": "download_from_youtubeArguments",
                            "type": "object"
                        },
                        "annotations": null
                    }
                ],
                "model_config": {
                    "extra": "allow"
                }
            }
        }
    }
]